{
  "openapi": "3.1.0",
  "info": {
    "title": "",
    "description": "an example API",
    "version": ""
  },
  "paths": {
    "/version": {
      "get": {
        "responses": {
          "200": {
            "description": "plain text",
            "content": {
              "text/plain; charset=utf-8": {}
            }
          }
        }
      }
    },
    "/docs": {
      "get": {
        "description": "This documentation page.",
        "responses": {
          "200": {
            "description": "HTML content",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      }
    },
    "/docs/redoc": {
      "get": {
        "description": "This documentation page.",
        "responses": {
          "200": {
            "description": "HTML content",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      }
    },
    "/docs/swagger": {
      "get": {
        "description": "This documentation page.",
        "responses": {
          "200": {
            "description": "HTML content",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      }
    },
    "/m2/noncelab/users": {
      "post": {
        "summary": "Register users by Noncelab",
        "description": "This endpoint allows you to register users by Noncelab.\n\n                    **Authorization header required**\n\n                    `Authorization: Bearer \u003Ctoken\u003E`",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v3/me": {
      "get": {
        "summary": "(V3)Get Logged-in User Info",
        "description": "Get the user data of the logged-in user",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetailResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "(V3)Update Logged-in User Info",
        "description": "Update the user data of the logged-in user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetailResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v3/users": {
      "get": {
        "summary": "(V3)",
        "description": "",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "description": "query type",
            "required": true,
            "schema": {
              "description": "query type",
              "$ref": "#/components/schemas/FindUserQueryType"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "value",
            "description": "query value",
            "required": true,
            "schema": {
              "description": "query value",
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetailResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v3/posts": {
      "get": {
        "summary": "(V3)List Posts",
        "description": "List all posts",
        "parameters": [
          {
            "in": "query",
            "name": "bookmark",
            "schema": {
              "type": ["string", "null"]
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Number of items to return (default: 20, max: 100)",
            "schema": {
              "description": "Number of items to return (default: 20, max: 100)",
              "type": ["integer", "null"],
              "format": "int32",
              "maximum": 100,
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/PostStatus"
                },
                {
                  "type": "null"
                }
              ]
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "value",
            "schema": {
              "type": ["string", "null"]
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListItemsResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "(V3)Create Post",
        "description": "Create a new post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePostRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePostResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v3/posts/{post_pk}/like": {
      "post": {
        "summary": "(V3)Like/Unlike Post",
        "description": "Like or unlike a post by ID",
        "parameters": [
          {
            "in": "path",
            "name": "post_pk",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LikePostRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LikePostResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v3/posts/{post_pk}/comments": {
      "post": {
        "summary": "(V3)Add Comment",
        "description": "Add a comment to a post by ID",
        "parameters": [
          {
            "in": "path",
            "name": "post_pk",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCommentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddCommentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v3/posts/{post_pk}": {
      "get": {
        "summary": "(V3)Get Post",
        "description": "Get a post by ID",
        "parameters": [
          {
            "in": "path",
            "name": "post_pk",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostDetailResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "(V3)Update Post",
        "description": "Update a post by ID",
        "parameters": [
          {
            "in": "path",
            "name": "post_pk",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePostRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "(V3)Delete Post",
        "description": "Delete a post by ID",
        "parameters": [
          {
            "in": "path",
            "name": "post_pk",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "no content"
          }
        }
      }
    },
    "/v3/auth/login": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v3/auth/logout": {
      "post": {}
    },
    "/v3/auth/signup": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignupRequest"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v3/auth/verification/send-verification-code": {
      "post": {
        "summary": "(V3)Send verification code",
        "description": "Send a verification code to the user's email",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendCodeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendCodeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v3/auth/verification/verify-code": {
      "post": {
        "summary": "(V3)Verify code",
        "description": "Verify the provided email verification code",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyCodeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyCodeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v3/spaces/deliberation/{space_pk}/responses": {
      "post": {
        "summary": "(V3)Create response answer",
        "description": "Create response answer with survey id",
        "parameters": [
          {
            "in": "path",
            "name": "space_pk",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Partition"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateResponseAnswerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateDeliberationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v3/spaces/deliberation/{space_pk}/responses/{response_pk}": {
      "get": {
        "summary": "(V3)Get response answer",
        "description": "Get response answer with response id",
        "parameters": [
          {
            "in": "path",
            "name": "response_pk",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Partition"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "space_pk",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Partition"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliberationSpaceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v3/spaces/deliberation/{space_pk}/discussions": {
      "post": {
        "summary": "(V3)Create discussion",
        "description": "Create discussion under deliberation with id",
        "parameters": [
          {
            "in": "path",
            "name": "space_pk",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Partition"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDiscussionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliberationDiscussionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v3/spaces/deliberation/{space_pk}/discussions/{discussion_pk}/start-meeting": {
      "post": {
        "summary": "(V3)Start meeting",
        "description": "Start meeting for discussion with id",
        "parameters": [
          {
            "in": "path",
            "name": "discussion_pk",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Partition"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "space_pk",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Partition"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliberationDiscussionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v3/spaces/deliberation/{space_pk}/discussions/{discussion_pk}/participant-meeting": {
      "post": {
        "summary": "(V3)Participant meeting",
        "description": "Participant meeting for discussion with id",
        "parameters": [
          {
            "in": "path",
            "name": "discussion_pk",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Partition"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "space_pk",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Partition"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliberationDiscussionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v3/spaces/deliberation/{space_pk}/discussions/{discussion_pk}/start-recording": {
      "post": {
        "summary": "(V3)Start recording",
        "description": "Start recording for discussion with id",
        "parameters": [
          {
            "in": "path",
            "name": "discussion_pk",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Partition"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "space_pk",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Partition"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliberationDiscussionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v3/spaces/deliberation/{space_pk}/discussions/{discussion_pk}/end-recording": {
      "post": {
        "summary": "(V3)End recording",
        "description": "End recording for discussion with id",
        "parameters": [
          {
            "in": "path",
            "name": "discussion_pk",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Partition"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "space_pk",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Partition"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliberationDiscussionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v3/spaces/deliberation/{space_pk}/discussions/{discussion_pk}/exit-meeting": {
      "post": {
        "summary": "(V3)Exit meeting",
        "description": "Exit meeting for discussion with id",
        "parameters": [
          {
            "in": "path",
            "name": "discussion_pk",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Partition"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "space_pk",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Partition"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliberationDiscussionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v3/spaces/deliberation": {
      "post": {
        "summary": "(V3)Create deliberation",
        "description": "Create a new deliberation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDeliberationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateDeliberationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v3/spaces/deliberation/{space_pk}": {
      "get": {
        "summary": "(V3)Get deliberation",
        "description": "Get deliberation with ID",
        "parameters": [
          {
            "in": "path",
            "name": "space_pk",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Partition"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliberationDetailResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "(V3)Update deliberation",
        "description": "Update a deliberation",
        "parameters": [
          {
            "in": "path",
            "name": "space_pk",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Partition"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDeliberationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliberationDetailResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v3/spaces/deliberation/{space_pk}/posting": {
      "post": {
        "summary": "(V3)Posting deliberation",
        "description": "Posting deliberation with id",
        "parameters": [
          {
            "in": "path",
            "name": "space_pk",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Partition"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostingDeliberationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostingDeliberationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v3/spaces/deliberation/{space_pk}/delete": {
      "post": {
        "summary": "(V3)Delete deliberation",
        "description": "Delete deliberation with id",
        "parameters": [
          {
            "in": "path",
            "name": "space_pk",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Partition"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v3/teams": {
      "get": {
        "summary": "(V3)Find team",
        "description": "Find a team by ID",
        "parameters": [
          {
            "in": "query",
            "name": "username",
            "description": "Search by username",
            "schema": {
              "description": "Search by username",
              "type": ["string", "null"]
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindTeamResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "(V3)Create team",
        "description": "Create a new team",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTeamRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTeamResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v3/teams/{team_pk}": {
      "get": {
        "summary": "(V3)Get team",
        "description": "Get team information",
        "parameters": [
          {
            "in": "path",
            "name": "team_pk",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamDetailResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "(V3)Update team",
        "description": "Update team information",
        "parameters": [
          {
            "in": "path",
            "name": "team_pk",
            "description": "Team PK to be updated",
            "required": true,
            "schema": {
              "description": "Team PK to be updated",
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTeamRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v3/teams/{team_pk}/groups": {
      "post": {
        "summary": "(V3)Create group",
        "description": "Create a new group",
        "parameters": [
          {
            "in": "path",
            "name": "team_pk",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateGroupResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v3/teams/{team_pk}/groups/{group_sk}": {
      "post": {
        "summary": "(V3)Update group",
        "description": "Update group information",
        "parameters": [
          {
            "in": "path",
            "name": "group_sk",
            "description": "Group SK to be updated",
            "required": true,
            "schema": {
              "description": "Group SK to be updated",
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "team_pk",
            "description": "Team PK to be updated",
            "required": true,
            "schema": {
              "description": "Team PK to be updated",
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "no content"
          }
        }
      }
    },
    "/v3/teams/{team_pk}/groups/{group_sk}/member": {
      "post": {
        "summary": "(V3)Add member",
        "description": "Add a new member to the group",
        "parameters": [
          {
            "in": "path",
            "name": "group_sk",
            "description": "Group SK to be updated",
            "required": true,
            "schema": {
              "description": "Group SK to be updated",
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "team_pk",
            "description": "Team PK to be updated",
            "required": true,
            "schema": {
              "description": "Team PK to be updated",
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddMemberRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "no content"
          }
        }
      },
      "delete": {
        "summary": "(V3)Remove member",
        "description": "Remove a member from the group",
        "parameters": [
          {
            "in": "path",
            "name": "group_sk",
            "description": "Group SK to be updated",
            "required": true,
            "schema": {
              "description": "Group SK to be updated",
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "team_pk",
            "description": "Team PK to be updated",
            "required": true,
            "schema": {
              "description": "Team PK to be updated",
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveMemberRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "no content"
          }
        }
      }
    },
    "/v1/auth/hasura": {
      "get": {},
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HasuraAuthRequest"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/me/info": {
      "get": {}
    },
    "/v1/spaces": {
      "get": {},
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpaceAction"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/spaces/{id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpaceByIdAction"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/spaces/{space-id}/comments": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "space-id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ]
      }
    },
    "/v1/spaces/{space-id}/discussions/{id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "space-id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "space-id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscussionByIdAction"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/spaces/{space-id}/discussions": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "space-id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "space-id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscussionAction"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/spaces/{space-id}/responses/{id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "space-id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "space-id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SurveyResponseByIdAction"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/spaces/{space-id}/responses": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "space-id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "space-id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SurveyResponseAction"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/spaces/{space-id}/meeting/{discussion-id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "discussion-id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "space-id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ]
      }
    },
    "/v1/spaces/{space-id}/badges": {
      "get": {},
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "space-id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpaceBadgeAction"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/spaces/{space-id}/redeem-codes": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "space-id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ]
      }
    },
    "/v1/spaces/{space-id}/sprint-leagues": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "space-id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SprintLeagueAction"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/spaces/{space-id}/sprint-leagues/{sprint-league-id}": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "space-id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "sprint-league-id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SprintLeagueByIdAction"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/spaces/{space-id}/sprint-leagues/{sprint-league-id}/players/{player-id}": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "player-id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "space-id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "sprint-league-id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SprintLeaguePlayerUpdateRequest"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/spaces/{space-id}/notice-quiz-attempts": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "space-id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ]
      }
    },
    "/v1/spaces/{space-id}/notice-quiz-attempts/submit": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "space-id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitAnswersRequest"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/spaces/{space-id}/notice-quiz-answers": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "space-id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ]
      }
    },
    "/v1/network": {
      "get": {}
    },
    "/v1/assets": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "action",
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AssetPresignedUrisReadActionType"
                },
                {
                  "type": "null"
                }
              ]
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "file_type",
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/FileType"
                },
                {
                  "type": "null"
                }
              ],
              "default": null
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "total_count",
            "schema": {
              "type": ["integer", "null"],
              "format": "uint",
              "default": null,
              "minimum": 0
            },
            "style": "form"
          }
        ]
      }
    },
    "/v1/assets/multipart": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "action",
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AssetPresignedUrisReadActionType"
                },
                {
                  "type": "null"
                }
              ]
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "file_type",
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/FileType"
                },
                {
                  "type": "null"
                }
              ],
              "default": null
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "total_count",
            "schema": {
              "type": ["integer", "null"],
              "format": "uint",
              "default": null,
              "minimum": 0
            },
            "style": "form"
          }
        ]
      }
    },
    "/v1/assets/multipart/complete": {
      "post": {
        "requestBody": {
          "description": "CompleteMultipartUploadRequest is a generated struct that represents the model\n\nFor making API calls related to this model, use `CompleteMultipartUploadRequest::get_client(endpoint: &str)`.\nIt will returns CompleteMultipartUploadRequestClient struct that implements the API calls.\n\nIn server side, you can use `CompleteMultipartUploadRequest::get_repository()` to interact with the database.\nRecommend to use `CompleteMultipartUploadRequestRepository` to insert or update the model.\nTo query the model, use `CompleteMultipartUploadRequest::query_builder()`.\nFor more detail, refer to the documentation of the query builder.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteMultipartUploadRequest"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/promotions/{id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromotionByIdAction"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/promotions": {
      "get": {},
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromotionAction"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/news/{id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewsByIdAction"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/news": {
      "get": {},
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewsAction"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/bots/{id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BotByIdAction"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/bots": {
      "get": {},
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BotAction"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/teams/{id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamByIdAction"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/teams": {
      "get": {},
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamAction"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/teams/{team_id}/groups/{id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupByIdAction"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/teams/{team_id}/groups": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupAction"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/feeds/{id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeedByIdAction"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/feeds": {
      "get": {},
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeedAction"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/users": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "action",
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/UserReadActionType"
                },
                {
                  "type": "null"
                }
              ]
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "email",
            "schema": {
              "type": ["string", "null"],
              "format": "email"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "password",
            "schema": {
              "type": ["string", "null"]
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "phone",
            "schema": {
              "type": ["string", "null"]
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "principal",
            "schema": {
              "type": ["string", "null"]
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "telegram_raw",
            "schema": {
              "type": ["string", "null"]
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "username",
            "schema": {
              "type": ["string", "null"]
            },
            "style": "form"
          }
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAction"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/users/{id}": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserByIdAction"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/users/{id}/followings": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "bookmark",
            "schema": {
              "type": ["string", "null"]
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "uint",
              "default": 0,
              "minimum": 0
            },
            "style": "form"
          }
        ]
      }
    },
    "/v1/users/{id}/followers": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "bookmark",
            "schema": {
              "type": ["string", "null"]
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "uint",
              "default": 0,
              "minimum": 0
            },
            "style": "form"
          }
        ]
      }
    },
    "/v1/users/verifications": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerificationAction"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/subscriptions": {
      "get": {},
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionAction"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/redeems/{id}": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedeemCodeByIdAction"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/my-networks/{id}": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MynetworkAction"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/notifications/{id}": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationByIdAction"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/notifications": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "bookmark",
            "schema": {
              "type": ["string", "null"]
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "uint",
              "default": 0,
              "minimum": 0
            },
            "style": "form"
          }
        ]
      }
    },
    "/v2/binances/subscriptions": {
      "post": {
        "summary": "Create Subscription",
        "description": "Create subscription in ratel and get a QR code",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscribeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/binances/webhooks": {
      "post": {
        "summary": "Create Webhook",
        "description": "Create binance payment api webhook handler",
        "requestBody": {
          "content": {
            "application/octet-stream": {}
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/binances/unsubscribe": {
      "post": {
        "summary": "Unsubscribe Service",
        "description": "Unsubscribe service in ratel",
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/conversations": {
      "get": {
        "summary": "Get Conversations",
        "description": "Retrieve user's conversations with pagination",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Maximum number of conversations to return (default: 20, max: 100)",
            "schema": {
              "description": "Maximum number of conversations to return (default: 20, max: 100)",
              "type": ["integer", "null"],
              "format": "int64"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Number of conversations to skip for pagination (default: 0)",
            "schema": {
              "description": "Number of conversations to skip for pagination (default: 0)",
              "type": ["integer", "null"],
              "format": "int64"
            },
            "style": "form"
          }
        ],
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Conversation",
        "description": "Create a new group or channel conversation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConversationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/conversations/{conversation_id}": {
      "get": {
        "summary": "Get Conversation by ID",
        "description": "Retrieve a specific conversation by ID",
        "parameters": [
          {
            "in": "path",
            "name": "conversation_id",
            "description": "Conversation ID",
            "required": true,
            "schema": {
              "description": "Conversation ID",
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/conversations/{conversation_id}/messages": {
      "get": {
        "summary": "Get Messages",
        "description": "Retrieve messages from a conversation with pagination",
        "parameters": [
          {
            "in": "path",
            "name": "conversation_id",
            "description": "Conversation ID",
            "required": true,
            "schema": {
              "description": "Conversation ID",
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number (default: 1)",
            "schema": {
              "description": "Page number (default: 1)",
              "type": "integer",
              "format": "int32",
              "default": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "size",
            "description": "Number of messages per page (default: 50, max: 100)",
            "schema": {
              "description": "Number of messages per page (default: 50, max: 100)",
              "type": "integer",
              "format": "int32",
              "default": 50
            },
            "style": "form"
          }
        ],
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add Message",
        "description": "Add a new message to a conversation",
        "parameters": [
          {
            "in": "path",
            "name": "conversation_id",
            "description": "Conversation ID",
            "required": true,
            "schema": {
              "description": "Conversation ID",
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddMessageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/conversations/{conversation_id}/messages/poll": {
      "get": {
        "summary": "Poll Messages",
        "description": "Long poll for new messages in a conversation",
        "parameters": [
          {
            "in": "path",
            "name": "conversation_id",
            "description": "Conversation ID",
            "required": true,
            "schema": {
              "description": "Conversation ID",
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "since_id",
            "description": "Last message ID received (get messages with ID greater than this)",
            "schema": {
              "description": "Last message ID received (get messages with ID greater than this)",
              "type": ["integer", "null"],
              "format": "int64"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "timeout_seconds",
            "description": "Maximum time to wait for new messages (seconds, default: 30)",
            "schema": {
              "description": "Maximum time to wait for new messages (seconds, default: 30)",
              "type": ["integer", "null"],
              "format": "uint64",
              "minimum": 0
            },
            "style": "form"
          }
        ],
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/messages/{message_id}/clear": {
      "post": {
        "summary": "Clear Message",
        "description": "Clear the content of a message (soft delete)",
        "parameters": [
          {
            "in": "path",
            "name": "message_id",
            "description": "Message ID",
            "required": true,
            "schema": {
              "description": "Message ID",
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/industries/select-topics": {
      "post": {
        "summary": "Select Topics",
        "description": "Select interesting topics",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SelectTopicsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/industries": {
      "get": {
        "summary": "List Industries",
        "description": "List industry types",
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/connections": {
      "get": {
        "summary": "List Connections",
        "description": "List connections based on recommendation algorithm",
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/connections/search": {
      "get": {
        "summary": "List Connections by keyword",
        "description": "List connections by search keyword",
        "parameters": [
          {
            "in": "query",
            "name": "keyword",
            "description": "Search Keyword",
            "schema": {
              "description": "Search Keyword",
              "type": ["string", "null"]
            },
            "style": "form"
          }
        ],
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/connections/follow": {
      "post": {
        "summary": "Follow Users",
        "description": "Follow users with follower IDs",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FollowRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/networks": {
      "get": {
        "summary": "List Networks",
        "description": "List Networks with user ID",
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/networks/invitations/accept": {
      "post": {
        "summary": "Accept invitation",
        "description": "Accept Invitation from followee ID",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptInvitationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/networks/invitations/reject": {
      "post": {
        "summary": "Reject invitation",
        "description": "Reject Invitation from followee ID",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RejectInvitationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/networks/suggestions/accept": {
      "post": {
        "summary": "Accept suggestion",
        "description": "Accept Suggestion from followee ID",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptSuggestionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/networks/suggestions/reject": {
      "post": {
        "summary": "Reject suggestion",
        "description": "Reject Suggestion from followee ID",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RejectSuggestionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/bookmarks/add": {
      "post": {
        "summary": "Add Bookmarks",
        "description": "Add Feed Bookmarks with user ID",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddBookmarkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/notifications": {
      "get": {
        "summary": "Get Notifications",
        "description": "Retrieve a notifications",
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/bookmarks/remove": {
      "post": {
        "summary": "Remove Bookmarks",
        "description": "Remove Feed Bookmarks with user ID",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveBookmarkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/bookmarks": {
      "get": {
        "summary": "List Bookmarks",
        "description": "Retrieve bookmarked feed with user ID",
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/permissions": {
      "get": {
        "summary": "Has Permission",
        "description": "Check user group permission",
        "parameters": [
          {
            "in": "query",
            "name": "permission",
            "description": "Group Permission",
            "schema": {
              "description": "Group Permission",
              "anyOf": [
                {
                  "$ref": "#/components/schemas/GroupPermission"
                },
                {
                  "type": "null"
                }
              ]
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "team_id",
            "description": "Team ID",
            "schema": {
              "description": "Team ID",
              "type": ["integer", "null"],
              "format": "int64"
            },
            "style": "form"
          }
        ],
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/users": {
      "get": {
        "summary": "Get User",
        "description": "Retrieve users with username or phone number or email",
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "description": "Email",
            "schema": {
              "description": "Email",
              "type": ["string", "null"]
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "phone-number",
            "description": "Phone Number",
            "schema": {
              "description": "Phone Number",
              "type": ["string", "null"]
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "username",
            "description": "Username",
            "schema": {
              "description": "Username",
              "type": ["string", "null"]
            },
            "style": "form"
          }
        ],
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/teams": {
      "post": {
        "summary": "Delete Team",
        "description": "Delete Team with Team ID",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTeamRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/users/telegram": {
      "post": {
        "summary": "Update User Telegram Id",
        "description": "Connect User with Telegram",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectTelegramRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/telegram": {
      "get": {
        "summary": "Get Telegram Info",
        "description": "Get Telegram Info from token",
        "parameters": [
          {
            "in": "query",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Verify Telegram Raw Data",
        "description": "Verify Telegram Raw Data and return token for future connection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyTelegramRawRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/dashboards": {
      "get": {
        "summary": "Get Dashboards",
        "description": "Retrieve dashboard in a service",
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/themes": {
      "post": {
        "summary": "Change Theme",
        "description": "Change Users Theme Information",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeThemeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/dagits/{space_id}": {
      "get": {
        "summary": "Get Dagit by space ID",
        "description": "Retrieve dagit in a space",
        "parameters": [
          {
            "in": "path",
            "name": "space_id",
            "description": "Space ID",
            "required": true,
            "schema": {
              "description": "Space ID",
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/dagits/{space_id}/oracles": {
      "post": {
        "summary": "Add Oracle",
        "description": "Add a new oracle to a dagit",
        "parameters": [
          {
            "in": "path",
            "name": "space_id",
            "description": "Space ID",
            "required": true,
            "schema": {
              "description": "Space ID",
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddOracleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/dagits/{space_id}/artworks": {
      "post": {
        "summary": "Create Artwork",
        "description": "Create a new artwork for a dagit",
        "parameters": [
          {
            "in": "path",
            "name": "space_id",
            "description": "Space ID",
            "required": true,
            "schema": {
              "description": "Space ID",
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateArtworkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/dagits/{space_id}/consensus": {
      "post": {
        "summary": "Start Dagit Consensus",
        "description": "Start a new consensus for a dagit",
        "parameters": [
          {
            "in": "path",
            "name": "space_id",
            "description": "Space ID",
            "required": true,
            "schema": {
              "description": "Space ID",
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConsensusRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/artworks/{artwork_id}": {
      "get": {
        "summary": "Get Artwork",
        "description": "Retrieve a specific artwork",
        "parameters": [
          {
            "in": "path",
            "name": "artwork_id",
            "description": "ID of the artwork to retrieve",
            "required": true,
            "schema": {
              "description": "ID of the artwork to retrieve",
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/my-spaces": {
      "get": {
        "summary": "Get My Space",
        "description": "Retrieve a spaces",
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/dagits/{space_id}/artworks/{artwork_id}/vote": {
      "post": {
        "summary": "Vote on Dagit Consensus",
        "description": "Submit a vote for a specific dagit consensus",
        "parameters": [
          {
            "in": "path",
            "name": "artwork_id",
            "description": "Artwork ID",
            "required": true,
            "schema": {
              "description": "Artwork ID",
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "space_id",
            "description": "Space ID",
            "required": true,
            "schema": {
              "description": "Space ID",
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoteConsensusRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/artworks/{artwork_id}/certificate": {
      "get": {
        "summary": "Get Artwork",
        "description": "Retrieve a specific artwork",
        "parameters": [
          {
            "in": "path",
            "name": "artwork_id",
            "description": "ID of the artwork to retrieve",
            "required": true,
            "schema": {
              "description": "ID of the artwork to retrieve",
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/m2/oracles": {
      "post": {
        "summary": "Create Oracle",
        "description": "Create a new oracle",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOracleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/documents": {
      "get": {
        "summary": "Get S3 Presigned URL for Uploading Private Image",
        "description": "This endpoint provides presigned URLs for uploading private images to S3.\n                **Authorization header required**\n                `Authorization: Bearer \u003Ctoken\u003E`",
        "parameters": [
          {
            "in": "query",
            "name": "category",
            "description": "Category for the images, e.g., 'passport', 'medical'",
            "schema": {
              "description": "Category for the images, e.g., 'passport', 'medical'",
              "type": ["string", "null"]
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "total_size",
            "description": "Number of S3 presigned URLs to create",
            "schema": {
              "description": "Number of S3 presigned URLs to create",
              "type": ["integer", "null"],
              "format": "int32"
            },
            "style": "form"
          }
        ],
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/verifiable-credentials/medical": {
      "post": {
        "summary": "Extract Information from Medical Image",
        "description": "This endpoint allows you to extract medical information from an image.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MedicalRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/documents/passport": {
      "post": {
        "summary": "Extract Information from Passport Image",
        "description": "This endpoint allows you to extract passport information from an image.\n\n                **Authorization header required**",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PassportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/spaces/{space_id}/delete": {
      "post": {
        "summary": "Delete Space",
        "description": "Delete a space and all its related resources after confirmation",
        "parameters": [
          {
            "in": "path",
            "name": "space_id",
            "description": "Space ID",
            "required": true,
            "schema": {
              "description": "Space ID",
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpaceDeleteConfirmation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/notifications/mark-all-read": {
      "post": {
        "summary": "Mark All Notifications Read",
        "description": "Mark all notifications as read for the authenticated user.",
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/feeds/{id}": {
      "get": {
        "summary": "Get Post",
        "description": "Retrieve a specific post by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Update Post",
        "description": "Update an existing post with new details",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePostRequest2"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/v2/feeds": {
      "get": {
        "summary": "List Posts",
        "description": "Retrieve a paginated list of posts with optional filters",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": ["integer", "null"],
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": ["integer", "null"],
              "format": "int32"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/FeedStatus"
                },
                {
                  "type": "null"
                }
              ]
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "user_id",
            "schema": {
              "type": ["integer", "null"],
              "format": "int64"
            },
            "style": "form"
          }
        ],
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/.well-known/oauth-authorization-server": {
      "get": {
        "summary": "Authorization Server Metadata",
        "description": "Retrieve OAuth 2.0 Authorization Server Metadata",
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      },
      "options": {}
    },
    "/m2/binances/balance": {
      "get": {
        "summary": "Query Owner Balance",
        "description": "Query Owner Balance from inner owner wallet address",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantBalanceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    },
    "/wg/home": {
      "get": {
        "summary": "Get Home Data",
        "description": "Retrieve home data including feeds, promotions, and news",
        "parameters": [
          {
            "in": "query",
            "name": "feed_limit",
            "schema": {
              "type": ["integer", "null"],
              "format": "int64"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "news_limit",
            "schema": {
              "type": ["integer", "null"],
              "format": "int64"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect or invalid requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": "UserAlreadyExists"
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AcceptInvitationRequest": {
        "type": "object",
        "properties": {
          "followee_id": {
            "description": "Followee ID",
            "type": "integer",
            "format": "int64"
          },
          "invitation_ids": {
            "description": "Total Invitation IDs",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "required": ["invitation_ids", "followee_id"]
      },
      "AcceptSuggestionRequest": {
        "type": "object",
        "properties": {
          "followee_id": {
            "description": "Followee ID",
            "type": "integer",
            "format": "int64"
          },
          "suggestion_ids": {
            "description": "Total Suggestion IDs",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "required": ["suggestion_ids", "followee_id"]
      },
      "AddBookmarkRequest": {
        "type": "object",
        "properties": {
          "feed_id": {
            "description": "Feed ID",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["feed_id"]
      },
      "AddCommentPathParams": {
        "type": "object",
        "properties": {
          "post_pk": {
            "type": "string"
          }
        },
        "required": ["post_pk"]
      },
      "AddCommentRequest": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          }
        },
        "required": ["content"]
      },
      "AddCommentResponse": {
        "type": "object",
        "properties": {
          "comment_pk": {
            "type": "string"
          }
        },
        "required": ["comment_pk"]
      },
      "AddMemberPathParams": {
        "type": "object",
        "properties": {
          "group_sk": {
            "description": "Group SK to be updated",
            "type": "string"
          },
          "team_pk": {
            "description": "Team PK to be updated",
            "type": "string"
          }
        },
        "required": ["team_pk", "group_sk"]
      },
      "AddMemberRequest": {
        "type": "object",
        "properties": {
          "user_pks": {
            "description": "User PKs to add to the group",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["user_pks"]
      },
      "AddMessageRequest": {
        "type": "object",
        "properties": {
          "html_contents": {
            "description": "HTML content of the message",
            "type": "string",
            "maxLength": 10000,
            "minLength": 1
          },
          "recipient_id": {
            "description": "Recipient user ID (only used for direct messages when no conversation exists)",
            "type": ["integer", "null"],
            "format": "int64"
          }
        },
        "required": ["html_contents"]
      },
      "AddOraclePathParams": {
        "type": "object",
        "properties": {
          "space_id": {
            "description": "Space ID",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["space_id"]
      },
      "AddOracleRequest": {
        "type": "object",
        "properties": {
          "user_id": {
            "description": "User ID",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["user_id"]
      },
      "Answer": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "answer": {
                "type": ["integer", "null"],
                "format": "int32"
              },
              "answer_type": {
                "type": "string",
                "const": "single_choice"
              }
            },
            "required": ["answer_type"]
          },
          {
            "type": "object",
            "properties": {
              "answer": {
                "type": ["array", "null"],
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "answer_type": {
                "type": "string",
                "const": "multiple_choice"
              }
            },
            "required": ["answer_type"]
          },
          {
            "type": "object",
            "properties": {
              "answer": {
                "type": ["string", "null"]
              },
              "answer_type": {
                "type": "string",
                "const": "short_answer"
              }
            },
            "required": ["answer_type"]
          },
          {
            "type": "object",
            "properties": {
              "answer": {
                "type": ["string", "null"]
              },
              "answer_type": {
                "type": "string",
                "const": "subjective"
              }
            },
            "required": ["answer_type"]
          },
          {
            "type": "object",
            "properties": {
              "answer": {
                "type": ["array", "null"],
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "answer_type": {
                "type": "string",
                "const": "checkbox"
              }
            },
            "required": ["answer_type"]
          },
          {
            "type": "object",
            "properties": {
              "answer": {
                "type": ["integer", "null"],
                "format": "int32"
              },
              "answer_type": {
                "type": "string",
                "const": "dropdown"
              }
            },
            "required": ["answer_type"]
          },
          {
            "type": "object",
            "properties": {
              "answer": {
                "type": ["integer", "null"],
                "format": "int32"
              },
              "answer_type": {
                "type": "string",
                "const": "linear_scale"
              }
            },
            "required": ["answer_type"]
          }
        ]
      },
      "ApiKeyLocation": {
        "type": "string",
        "enum": ["query", "header", "cookie"]
      },
      "ArtworkMetadata": {
        "type": "object",
        "properties": {
          "traits": {
            "type": "array",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/ArtworkTrait"
            }
          }
        }
      },
      "ArtworkTrait": {
        "type": "object",
        "properties": {
          "display_type": {
            "type": ["string", "null"]
          },
          "trait_type": {
            "type": "string"
          },
          "value": true
        },
        "required": ["trait_type", "value"]
      },
      "AssetPresignedUrisReadAction": {
        "type": "object",
        "properties": {
          "action": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AssetPresignedUrisReadActionType"
              },
              {
                "type": "null"
              }
            ]
          },
          "file_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FileType"
              },
              {
                "type": "null"
              }
            ],
            "default": null
          },
          "total_count": {
            "type": ["integer", "null"],
            "format": "uint",
            "default": null,
            "minimum": 0
          }
        }
      },
      "AssetPresignedUrisReadActionType": {
        "type": "string",
        "enum": ["get-presigned-uris"]
      },
      "BadgeCreateRequest": {
        "type": "object",
        "properties": {
          "contract": {
            "type": ["string", "null"]
          },
          "image_url": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "token_id": {
            "type": ["integer", "null"],
            "format": "int64"
          }
        },
        "required": ["name", "image_url"]
      },
      "BoosterType": {
        "type": "integer",
        "enum": [1, 2, 3, 4, 255]
      },
      "BoosterType2": {
        "type": "string",
        "enum": ["NoBoost", "X2", "X10", "X100"]
      },
      "BotAction": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "create": {
                "$ref": "#/components/schemas/BotCreateRequest"
              }
            },
            "additionalProperties": false,
            "required": ["create"]
          }
        ]
      },
      "BotByIdAction": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "delete": {
                "$ref": "#/components/schemas/BotDeleteRequest"
              }
            },
            "additionalProperties": false,
            "required": ["delete"]
          },
          {
            "type": "object",
            "properties": {
              "update_profile_image": {
                "$ref": "#/components/schemas/BotUpdateProfileImageRequest"
              }
            },
            "additionalProperties": false,
            "required": ["update_profile_image"]
          },
          {
            "type": "object",
            "properties": {
              "update_name": {
                "$ref": "#/components/schemas/BotUpdateNameRequest"
              }
            },
            "additionalProperties": false,
            "required": ["update_name"]
          }
        ]
      },
      "BotCreateRequest": {
        "type": "object",
        "properties": {
          "profile_url": {
            "type": "string",
            "format": "uri"
          },
          "username": {
            "type": "string"
          }
        },
        "required": ["profile_url", "username"]
      },
      "BotDeleteRequest": {
        "type": "object"
      },
      "BotParam": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "param-type": {
                "type": "string",
                "const": "query"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/BotQuery"
              }
            ],
            "required": ["param-type"]
          }
        ]
      },
      "BotPath": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["id"]
      },
      "BotQuery": {
        "type": "object",
        "properties": {
          "bookmark": {
            "type": ["string", "null"]
          },
          "size": {
            "type": "integer",
            "format": "uint",
            "default": 0,
            "minimum": 0
          }
        }
      },
      "BotUpdateNameRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          }
        },
        "required": ["username"]
      },
      "BotUpdateProfileImageRequest": {
        "type": "object",
        "properties": {
          "profile_url": {
            "type": "string",
            "format": "uri"
          }
        },
        "required": ["profile_url"]
      },
      "ChangeThemeRequest": {
        "type": "object",
        "properties": {
          "theme": {
            "description": "Theme Name",
            "allOf": [
              {
                "$ref": "#/components/schemas/Theme2"
              }
            ]
          }
        },
        "required": ["theme"]
      },
      "CheckboxQuestion": {
        "type": "object",
        "properties": {
          "description": {
            "type": ["string", "null"]
          },
          "image_url": {
            "type": ["string", "null"]
          },
          "is_multi": {
            "type": "boolean"
          },
          "is_required": {
            "type": ["boolean", "null"]
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string"
          }
        },
        "required": ["title", "options", "is_multi"]
      },
      "CheckboxQuestion2": {
        "type": "object",
        "properties": {
          "description": {
            "type": ["string", "null"]
          },
          "image_url": {
            "type": ["string", "null"]
          },
          "is_multi": {
            "type": "boolean"
          },
          "is_required": {
            "type": ["boolean", "null"]
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string"
          }
        },
        "required": ["title", "options", "is_multi"]
      },
      "ChoiceQuestion": {
        "type": "object",
        "properties": {
          "description": {
            "type": ["string", "null"]
          },
          "image_url": {
            "type": ["string", "null"]
          },
          "is_required": {
            "type": ["boolean", "null"]
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string"
          }
        },
        "required": ["title", "options"]
      },
      "ChoiceQuestion2": {
        "type": "object",
        "properties": {
          "description": {
            "type": ["string", "null"]
          },
          "image_url": {
            "type": ["string", "null"]
          },
          "is_required": {
            "type": ["boolean", "null"]
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string"
          }
        },
        "required": ["title", "options"]
      },
      "CompleteMultipartUploadRequest": {
        "description": "CompleteMultipartUploadRequest is a generated struct that represents the model\n\nFor making API calls related to this model, use `CompleteMultipartUploadRequest::get_client(endpoint: &str)`.\nIt will returns CompleteMultipartUploadRequestClient struct that implements the API calls.\n\nIn server side, you can use `CompleteMultipartUploadRequest::get_repository()` to interact with the database.\nRecommend to use `CompleteMultipartUploadRequestRepository` to insert or update the model.\nTo query the model, use `CompleteMultipartUploadRequest::query_builder()`.\nFor more detail, refer to the documentation of the query builder.",
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "parts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UploadedPart"
            }
          },
          "upload_id": {
            "type": "string"
          }
        },
        "required": ["upload_id", "key", "parts"]
      },
      "Components": {
        "description": "Holds a set of reusable objects for different aspects of the OAS.\nAll objects defined within the components object will have no effect\non the API unless they are explicitly referenced from properties\noutside the components object.",
        "type": "object",
        "properties": {
          "callbacks": {
            "description": "An object to hold reusable Callback Objects.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ReferenceOr8"
            }
          },
          "examples": {
            "description": "An object to hold reusable Example Objects.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ReferenceOr3"
            }
          },
          "headers": {
            "description": "An object to hold reusable Header Objects.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ReferenceOr4"
            }
          },
          "links": {
            "description": "An object to hold reusable Link Objects.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ReferenceOr7"
            }
          },
          "parameters": {
            "description": "An object to hold reusable Parameter Objects.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ReferenceOr2"
            }
          },
          "pathItems": {
            "description": "An object to hold reusable Path Item Objects.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ReferenceOr"
            }
          },
          "requestBodies": {
            "description": "An object to hold reusable Request Body Objects.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ReferenceOr5"
            }
          },
          "responses": {
            "description": "An object to hold reusable Response Objects.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ReferenceOr6"
            }
          },
          "schemas": {
            "description": "An object to hold reusable Schema Objects.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/SchemaObject"
            }
          },
          "securitySchemes": {
            "description": "An object to hold reusable Security Scheme Objects.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ReferenceOr9"
            }
          }
        },
        "additionalProperties": true
      },
      "ConnectTelegramRequest": {
        "type": "object",
        "properties": {
          "token": {
            "description": "Received Telegram Token",
            "type": "string"
          }
        },
        "required": ["token"]
      },
      "ConsensusVoteType": {
        "type": "string",
        "enum": ["Approved", "Rejected"]
      },
      "Contact": {
        "description": "Contact information for the exposed API.",
        "type": "object",
        "properties": {
          "email": {
            "description": "The email address of the contact person/organization.\nThis MUST be in the format of an email address.",
            "type": ["string", "null"]
          },
          "name": {
            "description": "The identifying name of the contact person/organization.",
            "type": ["string", "null"]
          },
          "url": {
            "description": "The URL pointing to the contact information.\nThis MUST be in the format of a URL.",
            "type": ["string", "null"]
          }
        },
        "additionalProperties": true
      },
      "ConversationPath": {
        "type": "object",
        "properties": {
          "conversation_id": {
            "description": "Conversation ID",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["conversation_id"]
      },
      "ConversationPath2": {
        "type": "object",
        "properties": {
          "conversation_id": {
            "description": "Conversation ID",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["conversation_id"]
      },
      "ConversationPath3": {
        "type": "object",
        "properties": {
          "conversation_id": {
            "description": "Conversation ID",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["conversation_id"]
      },
      "ConversationPath4": {
        "type": "object",
        "properties": {
          "conversation_id": {
            "description": "Conversation ID",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["conversation_id"]
      },
      "ConversationType": {
        "type": "string",
        "enum": ["Direct", "Group", "Channel"]
      },
      "CookieStyle": {
        "type": "string",
        "enum": ["form"]
      },
      "CreateArtworkPathParams": {
        "type": "object",
        "properties": {
          "space_id": {
            "description": "Space ID",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["space_id"]
      },
      "CreateArtworkRequest": {
        "type": "object",
        "properties": {
          "description": {
            "description": "Artwork description",
            "type": ["string", "null"]
          },
          "file": {
            "description": "Artwork file",
            "allOf": [
              {
                "$ref": "#/components/schemas/File2"
              }
            ]
          },
          "skip_encryption": {
            "description": "WARNING: This field is just for testing",
            "type": ["boolean", "null"]
          },
          "title": {
            "description": "Artwork title",
            "type": "string"
          }
        },
        "required": ["title", "file"]
      },
      "CreateConsensusPathParams": {
        "type": "object",
        "properties": {
          "space_id": {
            "description": "Space ID",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["space_id"]
      },
      "CreateConsensusRequest": {
        "type": "object",
        "properties": {
          "artwork_id": {
            "description": "Target Artwork ID for certification",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["artwork_id"]
      },
      "CreateConversationRequest": {
        "type": "object",
        "properties": {
          "conversation_type": {
            "description": "Type of conversation (Group or Channel only)",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConversationType"
              }
            ]
          },
          "description": {
            "description": "Description of the conversation (optional)",
            "type": ["string", "null"],
            "maxLength": 1000
          },
          "participant_ids": {
            "description": "List of participant user IDs to add to the conversation",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "minItems": 1
          },
          "title": {
            "description": "Title of the conversation (Group or Channel only)",
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          }
        },
        "required": ["title", "conversation_type", "participant_ids"]
      },
      "CreateDeliberationRequest": {
        "type": "object",
        "properties": {
          "feed_pk": {
            "description": "Post ID",
            "allOf": [
              {
                "$ref": "#/components/schemas/Partition"
              }
            ]
          }
        },
        "required": ["feed_pk"]
      },
      "CreateDeliberationResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/DeliberationDetailResponse"
          }
        },
        "required": ["metadata"]
      },
      "CreateDiscussionRequest": {
        "type": "object",
        "properties": {
          "description": {
            "description": "Discussion description",
            "type": "string"
          },
          "ended_at": {
            "description": "Discussion end date",
            "type": "integer",
            "format": "int64"
          },
          "members": {
            "description": "Discussion participants",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "description": "Discussion name",
            "type": "string"
          },
          "started_at": {
            "description": "Discussion start date",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["name", "description", "started_at", "ended_at", "members"]
      },
      "CreateGroupPathParams": {
        "type": "object",
        "properties": {
          "team_pk": {
            "type": "string"
          }
        },
        "required": ["team_pk"]
      },
      "CreateGroupRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "image_url": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamGroupPermission"
            }
          }
        },
        "required": ["name", "description", "image_url", "permissions"]
      },
      "CreateGroupResponse": {
        "type": "object",
        "properties": {
          "group_pk": {
            "type": "string"
          },
          "group_sk": {
            "type": "string"
          }
        },
        "required": ["group_pk", "group_sk"]
      },
      "CreateOracleRequest": {
        "type": "object",
        "properties": {
          "oracle_type": {
            "description": "Dagit ID (optional)",
            "allOf": [
              {
                "$ref": "#/components/schemas/OracleType"
              }
            ]
          },
          "space_id": {
            "description": "Space ID (optional)",
            "type": ["integer", "null"],
            "format": "int64"
          },
          "user_id": {
            "description": "Dagit ID (optional)",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["user_id", "oracle_type"]
      },
      "CreatePostRequest": {
        "type": "object",
        "properties": {
          "team_pk": {
            "type": ["string", "null"]
          }
        }
      },
      "CreatePostResponse": {
        "type": "object",
        "properties": {
          "post_pk": {
            "type": "string"
          }
        },
        "required": ["post_pk"]
      },
      "CreatePrivateImageQueryParams": {
        "type": "object",
        "properties": {
          "category": {
            "description": "Category for the images, e.g., 'passport', 'medical'",
            "type": ["string", "null"]
          },
          "total_size": {
            "description": "Number of S3 presigned URLs to create",
            "type": ["integer", "null"],
            "format": "int32"
          }
        }
      },
      "CreateResponseAnswerRequest": {
        "type": "object",
        "properties": {
          "answers": {
            "description": "Survey Answers",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SurveyAnswer"
            }
          },
          "survey_pk": {
            "description": "Survey ID",
            "allOf": [
              {
                "$ref": "#/components/schemas/Partition"
              }
            ]
          },
          "survey_type": {
            "description": "Survey Type(Sample, Survey)",
            "allOf": [
              {
                "$ref": "#/components/schemas/SurveyType"
              }
            ]
          }
        },
        "required": ["survey_pk", "survey_type", "answers"]
      },
      "CreateTeamRequest": {
        "type": "object",
        "properties": {
          "description": {
            "description": "Team description. Max length: 160 characters",
            "type": "string"
          },
          "nickname": {
            "description": "Team display name. (3 ~ 10 Characters)",
            "type": "string"
          },
          "profile_url": {
            "description": "Team profile URL to update",
            "type": "string"
          },
          "username": {
            "description": "Team name. SHOULD be unique",
            "type": "string"
          }
        },
        "required": ["username", "nickname", "profile_url", "description"]
      },
      "CreateTeamResponse": {
        "type": "object",
        "properties": {
          "team_pk": {
            "type": "string"
          }
        },
        "required": ["team_pk"]
      },
      "DeletePostPathParams": {
        "type": "object",
        "properties": {
          "post_pk": {
            "type": "string"
          }
        },
        "required": ["post_pk"]
      },
      "DeleteSpacePathParams": {
        "type": "object",
        "properties": {
          "space_id": {
            "description": "Space ID",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["space_id"]
      },
      "DeleteTeamRequest": {
        "type": "object",
        "properties": {
          "team_id": {
            "description": "Deleted Team ID",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["team_id"]
      },
      "DeliberationContentResponse": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            }
          },
          "html_contents": {
            "type": "string"
          }
        },
        "required": ["html_contents", "files"]
      },
      "DeliberationDeletePath": {
        "type": "object",
        "properties": {
          "space_pk": {
            "$ref": "#/components/schemas/Partition"
          }
        },
        "required": ["space_pk"]
      },
      "DeliberationDetailResponse": {
        "type": "object",
        "properties": {
          "author_display_name": {
            "type": "string"
          },
          "author_profile_url": {
            "type": "string"
          },
          "author_username": {
            "type": "string"
          },
          "comments": {
            "type": "integer",
            "format": "int64"
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "discussions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeliberationDiscussionResponse"
            }
          },
          "elearnings": {
            "$ref": "#/components/schemas/ElearningResponse"
          },
          "likes": {
            "type": "integer",
            "format": "int64"
          },
          "pk": {
            "$ref": "#/components/schemas/Partition"
          },
          "post_pk": {
            "$ref": "#/components/schemas/Partition"
          },
          "recommendation": {
            "$ref": "#/components/schemas/DeliberationContentResponse"
          },
          "rewards": {
            "type": "integer",
            "format": "int64"
          },
          "shares": {
            "type": "integer",
            "format": "int64"
          },
          "summary": {
            "$ref": "#/components/schemas/DeliberationContentResponse"
          },
          "surveys": {
            "$ref": "#/components/schemas/DeliberationSurveyResponse"
          },
          "title": {
            "type": "string"
          },
          "updated_at": {
            "type": "integer",
            "format": "int64"
          },
          "user_pk": {
            "$ref": "#/components/schemas/Partition"
          },
          "visibility": {
            "$ref": "#/components/schemas/SpaceVisibility"
          }
        },
        "required": [
          "pk",
          "created_at",
          "updated_at",
          "likes",
          "comments",
          "rewards",
          "shares",
          "visibility",
          "title",
          "post_pk",
          "user_pk",
          "author_display_name",
          "author_profile_url",
          "author_username",
          "summary",
          "discussions",
          "elearnings",
          "surveys",
          "recommendation"
        ]
      },
      "DeliberationDiscussionByIdPath": {
        "type": "object",
        "properties": {
          "discussion_pk": {
            "$ref": "#/components/schemas/Partition"
          },
          "space_pk": {
            "$ref": "#/components/schemas/Partition"
          }
        },
        "required": ["space_pk", "discussion_pk"]
      },
      "DeliberationDiscussionPath": {
        "type": "object",
        "properties": {
          "space_pk": {
            "$ref": "#/components/schemas/Partition"
          }
        },
        "required": ["space_pk"]
      },
      "DeliberationDiscussionResponse": {
        "type": "object",
        "properties": {
          "author_display_name": {
            "type": "string"
          },
          "author_profile_url": {
            "type": "string"
          },
          "author_username": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "ended_at": {
            "type": "integer",
            "format": "int64"
          },
          "media_pipeline_arn": {
            "type": ["string", "null"]
          },
          "meeting_id": {
            "type": ["string", "null"]
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscussionMemberResponse"
            }
          },
          "name": {
            "type": "string"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscussionParticipantResponse"
            }
          },
          "pipeline_id": {
            "type": "string"
          },
          "pk": {
            "$ref": "#/components/schemas/Partition"
          },
          "record": {
            "type": ["string", "null"]
          },
          "started_at": {
            "type": "integer",
            "format": "int64"
          },
          "user_pk": {
            "$ref": "#/components/schemas/Partition"
          }
        },
        "required": [
          "pk",
          "started_at",
          "ended_at",
          "name",
          "description",
          "pipeline_id",
          "user_pk",
          "author_display_name",
          "author_profile_url",
          "author_username",
          "members",
          "participants"
        ]
      },
      "DeliberationGetPath": {
        "type": "object",
        "properties": {
          "space_pk": {
            "$ref": "#/components/schemas/Partition"
          }
        },
        "required": ["space_pk"]
      },
      "DeliberationPath": {
        "type": "object",
        "properties": {
          "space_pk": {
            "$ref": "#/components/schemas/Partition"
          }
        },
        "required": ["space_pk"]
      },
      "DeliberationResponseByIdPath": {
        "type": "object",
        "properties": {
          "response_pk": {
            "$ref": "#/components/schemas/Partition"
          },
          "space_pk": {
            "$ref": "#/components/schemas/Partition"
          }
        },
        "required": ["space_pk", "response_pk"]
      },
      "DeliberationResponsePath": {
        "type": "object",
        "properties": {
          "space_pk": {
            "$ref": "#/components/schemas/Partition"
          }
        },
        "required": ["space_pk"]
      },
      "DeliberationSpaceResponse": {
        "type": "object",
        "properties": {
          "answers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SurveyAnswer"
            }
          },
          "author_display_name": {
            "type": "string"
          },
          "author_profile_url": {
            "type": "string"
          },
          "author_username": {
            "type": "string"
          },
          "pk": {
            "$ref": "#/components/schemas/Partition"
          },
          "sk": {
            "$ref": "#/components/schemas/EntityType"
          },
          "survey_pk": {
            "$ref": "#/components/schemas/Partition"
          },
          "survey_type": {
            "$ref": "#/components/schemas/SurveyType"
          },
          "user_pk": {
            "$ref": "#/components/schemas/Partition"
          }
        },
        "required": [
          "pk",
          "sk",
          "user_pk",
          "author_display_name",
          "author_profile_url",
          "author_username",
          "survey_pk",
          "survey_type",
          "answers"
        ]
      },
      "DeliberationSurveyResponse": {
        "type": "object",
        "properties": {
          "ended_at": {
            "type": "integer",
            "format": "int64"
          },
          "pk": {
            "$ref": "#/components/schemas/Partition"
          },
          "questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SurveyQuestion"
            }
          },
          "responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SurveyResponseResponse"
            }
          },
          "started_at": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "$ref": "#/components/schemas/SurveyStatus"
          },
          "user_responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SurveyResponseResponse"
            }
          }
        },
        "required": [
          "pk",
          "started_at",
          "ended_at",
          "status",
          "questions",
          "responses",
          "user_responses"
        ]
      },
      "DiscussionAction": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "create": {
                "$ref": "#/components/schemas/DiscussionCreateRequest2"
              }
            },
            "additionalProperties": false,
            "required": ["create"]
          }
        ]
      },
      "DiscussionByIdAction": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "start_meeting": {
                "$ref": "#/components/schemas/DiscussionStartMeetingRequest"
              }
            },
            "additionalProperties": false,
            "required": ["start_meeting"]
          },
          {
            "type": "object",
            "properties": {
              "participant_meeting": {
                "$ref": "#/components/schemas/DiscussionParticipantMeetingRequest"
              }
            },
            "additionalProperties": false,
            "required": ["participant_meeting"]
          },
          {
            "type": "object",
            "properties": {
              "exit_meeting": {
                "$ref": "#/components/schemas/DiscussionExitMeetingRequest"
              }
            },
            "additionalProperties": false,
            "required": ["exit_meeting"]
          },
          {
            "type": "object",
            "properties": {
              "start_recording": {
                "$ref": "#/components/schemas/DiscussionStartRecordingRequest"
              }
            },
            "additionalProperties": false,
            "required": ["start_recording"]
          },
          {
            "type": "object",
            "properties": {
              "end_recording": {
                "$ref": "#/components/schemas/DiscussionEndRecordingRequest"
              }
            },
            "additionalProperties": false,
            "required": ["end_recording"]
          },
          {
            "type": "object",
            "properties": {
              "delete": {
                "$ref": "#/components/schemas/DiscussionDeleteRequest"
              }
            },
            "additionalProperties": false,
            "required": ["delete"]
          },
          {
            "type": "object",
            "properties": {
              "update": {
                "$ref": "#/components/schemas/DiscussionUpdateRequest"
              }
            },
            "additionalProperties": false,
            "required": ["update"]
          }
        ]
      },
      "DiscussionCreateRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "discussion_pk": {
            "type": ["string", "null"]
          },
          "ended_at": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "started_at": {
            "type": "integer",
            "format": "int64"
          },
          "user_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "started_at",
          "ended_at",
          "name",
          "description",
          "user_ids"
        ]
      },
      "DiscussionCreateRequest2": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "discussion_id": {
            "type": ["integer", "null"],
            "format": "int64"
          },
          "ended_at": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "participants": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "started_at": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "started_at",
          "ended_at",
          "name",
          "description",
          "participants"
        ]
      },
      "DiscussionDeleteRequest": {
        "type": "object"
      },
      "DiscussionEndRecordingRequest": {
        "type": "object"
      },
      "DiscussionExitMeetingRequest": {
        "type": "object"
      },
      "DiscussionMemberResponse": {
        "type": "object",
        "properties": {
          "author_display_name": {
            "type": "string"
          },
          "author_profile_url": {
            "type": "string"
          },
          "author_username": {
            "type": "string"
          },
          "user_pk": {
            "$ref": "#/components/schemas/Partition"
          }
        },
        "required": [
          "user_pk",
          "author_display_name",
          "author_profile_url",
          "author_username"
        ]
      },
      "DiscussionParam": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "param-type": {
                "type": "string",
                "const": "query"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscussionQuery"
              }
            ],
            "required": ["param-type"]
          }
        ]
      },
      "DiscussionParticipantMeetingRequest": {
        "type": "object"
      },
      "DiscussionParticipantResponse": {
        "type": "object",
        "properties": {
          "author_display_name": {
            "type": "string"
          },
          "author_profile_url": {
            "type": "string"
          },
          "author_username": {
            "type": "string"
          },
          "participant_id": {
            "type": "string"
          },
          "user_pk": {
            "$ref": "#/components/schemas/Partition"
          }
        },
        "required": [
          "user_pk",
          "author_display_name",
          "author_profile_url",
          "author_username",
          "participant_id"
        ]
      },
      "DiscussionPath": {
        "type": "object",
        "properties": {
          "discussion-id": {
            "type": "integer",
            "format": "int64"
          },
          "space-id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["space-id", "discussion-id"]
      },
      "DiscussionQuery": {
        "type": "object",
        "properties": {
          "bookmark": {
            "type": ["string", "null"]
          },
          "size": {
            "type": "integer",
            "format": "uint",
            "default": 0,
            "minimum": 0
          }
        }
      },
      "DiscussionStartMeetingRequest": {
        "type": "object"
      },
      "DiscussionStartRecordingRequest": {
        "type": "object"
      },
      "DiscussionUpdateRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "ended_at": {
            "type": "integer",
            "format": "int64"
          },
          "media_pipeline_arn": {
            "type": ["string", "null"]
          },
          "meeting_id": {
            "type": ["string", "null"]
          },
          "name": {
            "type": "string"
          },
          "pipeline_id": {
            "type": "string"
          },
          "record": {
            "type": ["string", "null"]
          },
          "started_at": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "started_at",
          "ended_at",
          "name",
          "description",
          "pipeline_id"
        ]
      },
      "DropdownQuestion": {
        "type": "object",
        "properties": {
          "description": {
            "type": ["string", "null"]
          },
          "image_url": {
            "type": ["string", "null"]
          },
          "is_required": {
            "type": ["boolean", "null"]
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string"
          }
        },
        "required": ["title", "options"]
      },
      "DropdownQuestion2": {
        "type": "object",
        "properties": {
          "description": {
            "type": ["string", "null"]
          },
          "image_url": {
            "type": ["string", "null"]
          },
          "is_required": {
            "type": ["boolean", "null"]
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string"
          }
        },
        "required": ["title", "options"]
      },
      "ElearningCreateRequest": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File2"
            }
          }
        },
        "required": ["files"]
      },
      "ElearningResponse": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            }
          }
        },
        "required": ["files"]
      },
      "Encoding": {
        "description": "A single encoding definition applied to a single schema property.",
        "type": "object",
        "properties": {
          "allowReserved": {
            "description": "Determines whether the parameter value SHOULD allow reserved characters,\nas defined by RFC3986 :/?#[]@!$&'()*+,;= to be included without\npercent-encoding. The default value is false. This property SHALL be\nignored if the request body media type is not\napplication/x-www-form-urlencoded or multipart/form-data. If a value is\nexplicitly defined, then the value of `contentType` (implicit or\nexplicit) SHALL be ignored.",
            "type": "boolean"
          },
          "contentType": {
            "description": "The Content-Type for encoding a specific property.\nDefault value depends on the property type:\nfor object - application/json;\nfor array – the default is defined based on the inner type.\nfor all other cases the default is `application/octet-stream`.\nThe value can be a specific media type (e.g. application/json),\na wildcard media type (e.g. image/*), or a comma-separated list of the\ntwo types.",
            "type": ["string", "null"]
          },
          "explode": {
            "description": "When this is true, property values of type array or object generate\nseparate parameters for each value of the array, or key-value-pair\nof the map. For other types of properties this property has no effect.\nWhen style is form, the default value is true.\nFor all other styles, the default value is false. This property\nSHALL be ignored if the request body media type is\nnot application/x-www-form-urlencoded or multipart/form-data. If a value\nis explicitly defined, then the value of `contentType` (implicit or\nexplicit) SHALL be ignored.\n\nIn this Library this value defaults to false always despite the\nspecification.",
            "type": "boolean"
          },
          "headers": {
            "description": "A map allowing additional information to be provided as headers,\nfor example Content-Disposition. Content-Type is described separately\nand SHALL be ignored in this section. This property SHALL be ignored\nif the request body media type is not a multipart.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ReferenceOr4"
            }
          },
          "style": {
            "description": "Describes how a specific property value will be serialized depending\non its type. See Parameter Object for details on the style property.\nThe behavior follows the same values as query parameters, including\ndefault values. This property SHALL be ignored if the request body\nmedia type is not application/x-www-form-urlencoded  or\nmultipart/form-data. If a value is explicitly defined, then the value of\n`contentType` (implicit or explicit) SHALL be ignored.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/QueryStyle"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": true
      },
      "EntityType": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "None",
              "Session",
              "User",
              "UserEvmAddress",
              "UserReferralCode",
              "UserPrincipal",
              "UserOAuth",
              "UserPhoneNumber",
              "UserTelegram",
              "EmailVerification",
              "Post",
              "PostAuthor",
              "PostSpace",
              "PostArtwork",
              "PostRepost",
              "Team",
              "TeamOwner",
              "SpaceCommon",
              "PollSpace",
              "SurveySpace",
              "DeliberationSpace",
              "DeliberationSpaceSummary",
              "DeliberationSpaceElearning",
              "DeliberationSpaceRecommendation",
              "SprintLeagueSpace",
              "ArtworkSpace",
              "Space",
              "SpaceMember",
              "Feed",
              "Group",
              "Discussion",
              "Metadata",
              "Member",
              "Follower",
              "Following",
              "Like",
              "Bookmark",
              "Comment",
              "Badge",
              "Industry"
            ]
          },
          {
            "type": "object",
            "properties": {
              "UserTeam": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["UserTeam"]
          },
          {
            "type": "object",
            "properties": {
              "UserTeamGroup": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["UserTeamGroup"]
          },
          {
            "type": "object",
            "properties": {
              "UserRelationship": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["UserRelationship"]
          },
          {
            "type": "object",
            "properties": {
              "PostComment": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["PostComment"]
          },
          {
            "type": "object",
            "properties": {
              "PostLike": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["PostLike"]
          },
          {
            "type": "object",
            "properties": {
              "TeamGroup": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["TeamGroup"]
          },
          {
            "type": "object",
            "properties": {
              "TeamMember": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["TeamMember"]
          },
          {
            "type": "object",
            "properties": {
              "DeliberationSpaceSurvey": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["DeliberationSpaceSurvey"]
          },
          {
            "type": "object",
            "properties": {
              "DeliberationSpaceDiscussion": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["DeliberationSpaceDiscussion"]
          },
          {
            "type": "object",
            "properties": {
              "DeliberationSpaceParticipant": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["DeliberationSpaceParticipant"]
          },
          {
            "type": "object",
            "properties": {
              "DeliberationSpaceMember": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["DeliberationSpaceMember"]
          },
          {
            "type": "object",
            "properties": {
              "DeliberationSpaceQuestion": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["DeliberationSpaceQuestion"]
          },
          {
            "type": "object",
            "properties": {
              "DeliberationSpaceResponse": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["DeliberationSpaceResponse"]
          }
        ]
      },
      "Error": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "InvalidAction",
              "InvalidPhoneNumberFormat",
              "UpdateNotAllowed",
              "DbPoolTimeout",
              "NotFound",
              "Unauthorized",
              "UserAlreadyExists",
              "InvalidUser",
              "InvalidEmail",
              "InvalidUsername",
              "InvalidPhoneNumber",
              "InvalidPrinciapl",
              "DuplicatedTeamName",
              "SignException",
              "DuplicatedGroupName",
              "InsertGroupMemberFailed",
              "NaOpenApiResponseParsingError",
              "NaOpenApiRequestError",
              "UsCongressApiRequestError",
              "HkOpenDataApiResponseParsingError",
              "HkOpenDataApiRequestError",
              "ChOpenDataApiResponseParsingError",
              "ChOpenDataApiRequestError",
              "EuOpenDataApiResponseParsingError",
              "EuOpenDataApiRequestError",
              "ApiEmptyRow",
              "BadRequest",
              "WalletNotFound",
              "EmptyInputValue",
              "EmailAlreadySubscribed",
              "InvalidInputValue",
              "AlreadyVoted",
              "AlreadyLiked",
              "FeedWritePostError",
              "FeedPublishError",
              "FeedWriteCommentError",
              "FeedInvalidParentId",
              "FeedInvalidQuoteId",
              "FeedInvalidQuoteSpaceId",
              "FeedExclusiveParentOrIndustry",
              "SpaceWritePostError",
              "InvalidType",
              "InvalidQuizId",
              "InvalidTeamname",
              "BadgeCreationFailure",
              "AlreadyClaimed",
              "NFTLimitedError",
              "RedeemCodeCreationFailure",
              "InvalidRedeemCode",
              "RedeemCodeNotFound",
              "DiscussionInsertFailed",
              "DiscussionNotFound",
              "PipelineNotFound",
              "AlreadyFollowing",
              "InvalidVerificationCode",
              "InvalidPayload",
              "SprintLeagueCreationFailed",
              "SprintLeagueUpdateFailed",
              "FailedReward",
              "DuplicatedTelegramUser",
              "InvalidTelegramData"
            ]
          },
          {
            "type": "object",
            "properties": {
              "MissingParam": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["MissingParam"]
          },
          {
            "type": "object",
            "properties": {
              "Unknown": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["Unknown"]
          },
          {
            "type": "object",
            "properties": {
              "Klaytn": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["Klaytn"]
          },
          {
            "type": "object",
            "properties": {
              "InvalidUserQuery": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["InvalidUserQuery"]
          },
          {
            "type": "object",
            "properties": {
              "VerifyException": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["VerifyException"]
          },
          {
            "type": "object",
            "properties": {
              "DatabaseException": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["DatabaseException"]
          },
          {
            "type": "object",
            "properties": {
              "AwsChimeError": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["AwsChimeError"]
          },
          {
            "type": "object",
            "properties": {
              "AwsMediaPipelinesError": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["AwsMediaPipelinesError"]
          },
          {
            "type": "object",
            "properties": {
              "AwsMediaConvertError": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["AwsMediaConvertError"]
          },
          {
            "type": "object",
            "properties": {
              "AwsS3Error": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["AwsS3Error"]
          },
          {
            "type": "object",
            "properties": {
              "OpenApiResponseError": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["OpenApiResponseError"]
          },
          {
            "type": "object",
            "properties": {
              "UsCongressApiError": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["UsCongressApiError"]
          },
          {
            "type": "object",
            "properties": {
              "HkOpenDataApiError": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["HkOpenDataApiError"]
          },
          {
            "type": "object",
            "properties": {
              "ChOpenDataApiError": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["ChOpenDataApiError"]
          },
          {
            "type": "object",
            "properties": {
              "EuOpenDataApiError": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["EuOpenDataApiError"]
          },
          {
            "type": "object",
            "properties": {
              "EuOpenDataFetchError": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              }
            },
            "additionalProperties": false,
            "required": ["EuOpenDataFetchError"]
          },
          {
            "type": "object",
            "properties": {
              "HtmlParseError": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["HtmlParseError"]
          },
          {
            "type": "object",
            "properties": {
              "FetchError": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "type": "integer",
                      "format": "int64"
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              }
            },
            "additionalProperties": false,
            "required": ["FetchError"]
          },
          {
            "type": "object",
            "properties": {
              "ReqwestClientError": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["ReqwestClientError"]
          },
          {
            "type": "object",
            "properties": {
              "HMacInitError": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["HMacInitError"]
          },
          {
            "type": "object",
            "properties": {
              "JsonDeserializeError": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["JsonDeserializeError"]
          },
          {
            "type": "object",
            "properties": {
              "WalletError": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["WalletError"]
          },
          {
            "type": "object",
            "properties": {
              "UniqueViolation": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["UniqueViolation"]
          },
          {
            "type": "object",
            "properties": {
              "SlackNotificationError": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["SlackNotificationError"]
          },
          {
            "type": "object",
            "properties": {
              "JWTGenerationFail": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["JWTGenerationFail"]
          },
          {
            "type": "object",
            "properties": {
              "AssetError": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["AssetError"]
          },
          {
            "type": "object",
            "properties": {
              "UploadMetadataError": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["UploadMetadataError"]
          },
          {
            "type": "object",
            "properties": {
              "DiscussionCreateUserFailed": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["DiscussionCreateUserFailed"]
          },
          {
            "type": "object",
            "properties": {
              "UpdateDiscussionError": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["UpdateDiscussionError"]
          },
          {
            "type": "object",
            "properties": {
              "SESServiceError": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["SESServiceError"]
          },
          {
            "type": "object",
            "properties": {
              "ServerError": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["ServerError"]
          },
          {
            "type": "object",
            "properties": {
              "PassportVerificationFailed": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["PassportVerificationFailed"]
          },
          {
            "type": "object",
            "properties": {
              "MedicalInfoExtractionFailed": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["MedicalInfoExtractionFailed"]
          },
          {
            "type": "object",
            "properties": {
              "AwsRekognitionError": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["AwsRekognitionError"]
          },
          {
            "type": "object",
            "properties": {
              "AwsTextractError": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["AwsTextractError"]
          },
          {
            "type": "object",
            "properties": {
              "AwsBedrockError": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["AwsBedrockError"]
          },
          {
            "type": "object",
            "properties": {
              "DynamoDbError": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["DynamoDbError"]
          },
          {
            "type": "object",
            "properties": {
              "DynamoDbSerializationError": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["DynamoDbSerializationError"]
          },
          {
            "type": "object",
            "properties": {
              "DynamoDbTableNotFound": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["DynamoDbTableNotFound"]
          }
        ]
      },
      "Example": {
        "type": "object",
        "properties": {
          "description": {
            "description": "Long description for the example.\nCommonMark syntax MAY be used for rich text representation.",
            "type": ["string", "null"]
          },
          "externalValue": {
            "description": "A URI that points to the literal example.\nThis provides the capability to reference examples that cannot\neasily be included in JSON or YAML documents. The `value` field and\n`externalValue` field are mutually exclusive. See the rules for\nresolving Relative References.",
            "type": ["string", "null"]
          },
          "summary": {
            "description": "Short description for the example.",
            "type": ["string", "null"]
          },
          "value": {
            "description": "Embedded literal example. The `value` field and `externalValue`\nfield are mutually exclusive. To represent examples of\nmedia types that cannot naturally represented in JSON or YAML,\nuse a string value to contain the example, escaping where necessary."
          }
        },
        "additionalProperties": true
      },
      "ExternalDocumentation": {
        "description": "Allows referencing an external resource for extended documentation.",
        "type": "object",
        "properties": {
          "description": {
            "description": "A description of the target documentation.\nCommonMark syntax MAY be used for rich text representation.",
            "type": ["string", "null"]
          },
          "url": {
            "description": "REQUIRED. The URL for the target documentation.\nThis MUST be in the format of a URL.",
            "type": "string"
          }
        },
        "additionalProperties": true,
        "required": ["url"]
      },
      "FeedAction": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "create_draft": {
                "$ref": "#/components/schemas/FeedCreateDraftRequest"
              }
            },
            "additionalProperties": false,
            "required": ["create_draft"]
          },
          {
            "type": "object",
            "properties": {
              "repost": {
                "$ref": "#/components/schemas/FeedRepostRequest"
              }
            },
            "additionalProperties": false,
            "required": ["repost"]
          },
          {
            "type": "object",
            "properties": {
              "comment": {
                "$ref": "#/components/schemas/FeedCommentRequest"
              }
            },
            "additionalProperties": false,
            "required": ["comment"]
          }
        ]
      },
      "FeedByIdAction": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "delete": {
                "$ref": "#/components/schemas/FeedDeleteRequest"
              }
            },
            "additionalProperties": false,
            "required": ["delete"]
          },
          {
            "type": "object",
            "properties": {
              "publish": {
                "$ref": "#/components/schemas/FeedPublishRequest"
              }
            },
            "additionalProperties": false,
            "required": ["publish"]
          },
          {
            "type": "object",
            "properties": {
              "like": {
                "$ref": "#/components/schemas/FeedLikeRequest"
              }
            },
            "additionalProperties": false,
            "required": ["like"]
          },
          {
            "type": "object",
            "properties": {
              "unrepost": {
                "$ref": "#/components/schemas/FeedUnrepostRequest"
              }
            },
            "additionalProperties": false,
            "required": ["unrepost"]
          },
          {
            "type": "object",
            "properties": {
              "update": {
                "$ref": "#/components/schemas/FeedUpdateRequest"
              }
            },
            "additionalProperties": false,
            "required": ["update"]
          },
          {
            "type": "object",
            "properties": {
              "edit": {
                "$ref": "#/components/schemas/FeedEditRequest"
              }
            },
            "additionalProperties": false,
            "required": ["edit"]
          }
        ]
      },
      "FeedCommentRequest": {
        "type": "object",
        "properties": {
          "html_contents": {
            "type": "string"
          },
          "parent_id": {
            "type": ["integer", "null"],
            "format": "int64"
          }
        },
        "required": ["html_contents"]
      },
      "FeedCreateDraftRequest": {
        "type": "object",
        "properties": {
          "feed_type": {
            "$ref": "#/components/schemas/FeedType"
          },
          "user_id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["feed_type", "user_id"]
      },
      "FeedDeleteRequest": {
        "type": "object"
      },
      "FeedEditRequest": {
        "type": "object",
        "properties": {
          "html_contents": {
            "type": "string"
          },
          "industry_id": {
            "type": "integer",
            "format": "int64"
          },
          "parent_id": {
            "type": ["integer", "null"],
            "format": "int64"
          },
          "quote_feed_id": {
            "type": ["integer", "null"],
            "format": "int64"
          },
          "title": {
            "type": ["string", "null"]
          },
          "url": {
            "type": ["string", "null"]
          },
          "url_type": {
            "$ref": "#/components/schemas/UrlType"
          }
        },
        "required": ["industry_id", "html_contents", "url_type"]
      },
      "FeedLikeRequest": {
        "type": "object",
        "properties": {
          "value": {
            "type": "boolean"
          }
        },
        "required": ["value"]
      },
      "FeedParam": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "param-type": {
                "type": "string",
                "const": "query"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/FeedQuery"
              }
            ],
            "required": ["param-type"]
          }
        ]
      },
      "FeedPath": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["id"]
      },
      "FeedPublishRequest": {
        "type": "object"
      },
      "FeedQuery": {
        "type": "object",
        "properties": {
          "action": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FeedQueryActionType"
              },
              {
                "type": "null"
              }
            ]
          },
          "bookmark": {
            "type": ["string", "null"]
          },
          "feed-type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FeedType"
              },
              {
                "type": "null"
              }
            ],
            "default": null
          },
          "size": {
            "type": "integer",
            "format": "uint",
            "default": 0,
            "minimum": 0
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FeedStatus"
              },
              {
                "type": "null"
              }
            ],
            "default": null
          },
          "user-id": {
            "type": ["integer", "null"],
            "format": "int64",
            "default": null
          }
        }
      },
      "FeedQueryActionType": {
        "type": "string",
        "enum": ["posts-by-user-id"]
      },
      "FeedRepostRequest": {
        "type": "object",
        "properties": {
          "html_contents": {
            "type": "string"
          },
          "parent_id": {
            "type": ["integer", "null"],
            "format": "int64"
          },
          "quote_feed_id": {
            "type": ["integer", "null"],
            "format": "int64"
          },
          "user_id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["user_id", "html_contents"]
      },
      "FeedStatus": {
        "type": "string",
        "enum": ["Draft", "Published"]
      },
      "FeedType": {
        "type": "string",
        "enum": ["Artwork", "Post", "Reply", "Repost", "DocReview"]
      },
      "FeedUnrepostRequest": {
        "type": "object"
      },
      "FeedUpdateRequest": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File2"
            }
          },
          "html_contents": {
            "type": "string"
          },
          "industry_id": {
            "type": "integer",
            "format": "int64"
          },
          "parent_id": {
            "type": ["integer", "null"],
            "format": "int64"
          },
          "quote_feed_id": {
            "type": ["integer", "null"],
            "format": "int64"
          },
          "title": {
            "type": ["string", "null"]
          },
          "url": {
            "type": ["string", "null"]
          },
          "url_type": {
            "$ref": "#/components/schemas/UrlType"
          }
        },
        "required": ["industry_id", "html_contents", "url_type", "files"]
      },
      "File": {
        "type": "object",
        "properties": {
          "ext": {
            "$ref": "#/components/schemas/FileExtension"
          },
          "name": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "url": {
            "type": ["string", "null"]
          }
        },
        "required": ["name", "size", "ext"]
      },
      "File2": {
        "type": "object",
        "properties": {
          "ext": {
            "$ref": "#/components/schemas/FileExtension2"
          },
          "name": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "url": {
            "type": ["string", "null"]
          }
        },
        "required": ["name", "size", "ext"]
      },
      "FileExtension": {
        "type": "string",
        "enum": [
          "JPG",
          "PNG",
          "PDF",
          "ZIP",
          "WORD",
          "PPTX",
          "EXCEL",
          "MP4",
          "MOV"
        ]
      },
      "FileExtension2": {
        "type": "string",
        "enum": [
          "JPG",
          "PNG",
          "PDF",
          "ZIP",
          "WORD",
          "PPTX",
          "EXCEL",
          "MP4",
          "MOV"
        ]
      },
      "FileType": {
        "type": "string",
        "enum": [
          "none",
          "png",
          "jpg",
          "gif",
          "webm",
          "svg",
          "ai",
          "pdf",
          "xlsx",
          "glb",
          "gltf",
          "mp3",
          "wav",
          "mp4",
          "mov",
          "pptx"
        ]
      },
      "FindTeamQueryParams": {
        "type": "object",
        "properties": {
          "username": {
            "description": "Search by username",
            "type": ["string", "null"]
          }
        }
      },
      "FindTeamResponse": {
        "type": "object",
        "properties": {
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamResponse"
            }
          }
        },
        "required": ["teams"]
      },
      "FindUserQueryParams": {
        "type": "object",
        "properties": {
          "type": {
            "description": "query type",
            "allOf": [
              {
                "$ref": "#/components/schemas/FindUserQueryType"
              }
            ]
          },
          "value": {
            "description": "query value",
            "type": "string"
          }
        },
        "required": ["type", "value"]
      },
      "FindUserQueryType": {
        "type": "string",
        "enum": ["email", "username", "phone-number"]
      },
      "FollowRequest": {
        "type": "object",
        "properties": {
          "followee_ids": {
            "description": "Followee IDs",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "required": ["followee_ids"]
      },
      "GetArtworkCertificateRequest": {
        "type": "object",
        "properties": {
          "artwork_id": {
            "description": "ID of the artwork to retrieve",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["artwork_id"]
      },
      "GetArtworkDetailPathParams": {
        "type": "object",
        "properties": {
          "artwork_id": {
            "description": "ID of the artwork to retrieve",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["artwork_id"]
      },
      "GetConversationsQuery": {
        "type": "object",
        "properties": {
          "limit": {
            "description": "Maximum number of conversations to return (default: 20, max: 100)",
            "type": ["integer", "null"],
            "format": "int64"
          },
          "offset": {
            "description": "Number of conversations to skip for pagination (default: 0)",
            "type": ["integer", "null"],
            "format": "int64"
          }
        }
      },
      "GetDagitPathParams": {
        "type": "object",
        "properties": {
          "space_id": {
            "description": "Space ID",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["space_id"]
      },
      "GetMessagesQuery": {
        "type": "object",
        "properties": {
          "page": {
            "description": "Page number (default: 1)",
            "type": "integer",
            "format": "int32",
            "default": 1
          },
          "size": {
            "description": "Number of messages per page (default: 50, max: 100)",
            "type": "integer",
            "format": "int32",
            "default": 50
          }
        }
      },
      "GetPostPathParams": {
        "type": "object",
        "properties": {
          "post_pk": {
            "type": "string"
          }
        },
        "required": ["post_pk"]
      },
      "GetPostQueryParams": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["id"]
      },
      "GetTeamPathParams": {
        "type": "object",
        "properties": {
          "team_pk": {
            "type": "string"
          }
        },
        "required": ["team_pk"]
      },
      "GetTelegramInfoQuery": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        },
        "required": ["token"]
      },
      "GroupAction": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "create": {
                "$ref": "#/components/schemas/GroupCreateRequest"
              }
            },
            "additionalProperties": false,
            "required": ["create"]
          }
        ]
      },
      "GroupByIdAction": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "update": {
                "$ref": "#/components/schemas/GroupUpdateRequest"
              }
            },
            "additionalProperties": false,
            "required": ["update"]
          },
          {
            "type": "object",
            "properties": {
              "check_email": {
                "$ref": "#/components/schemas/GroupCheckEmailRequest"
              }
            },
            "additionalProperties": false,
            "required": ["check_email"]
          },
          {
            "type": "object",
            "properties": {
              "invite_member": {
                "$ref": "#/components/schemas/GroupInviteMemberRequest"
              }
            },
            "additionalProperties": false,
            "required": ["invite_member"]
          },
          {
            "type": "object",
            "properties": {
              "delete": {
                "$ref": "#/components/schemas/GroupDeleteRequest"
              }
            },
            "additionalProperties": false,
            "required": ["delete"]
          }
        ]
      },
      "GroupCheckEmailRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": ["email"]
      },
      "GroupCreateRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "image_url": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupPermission"
            }
          },
          "users": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "required": ["name", "description", "image_url", "users", "permissions"]
      },
      "GroupDeleteRequest": {
        "type": "object"
      },
      "GroupIdPath": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "team_id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["team_id", "id"]
      },
      "GroupInviteMemberRequest": {
        "type": "object",
        "properties": {
          "user_ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "required": ["user_ids"]
      },
      "GroupParam": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "param-type": {
                "type": "string",
                "const": "query"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupQuery"
              }
            ],
            "required": ["param-type"]
          }
        ]
      },
      "GroupPath": {
        "type": "object",
        "properties": {
          "team_id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["team_id"]
      },
      "GroupPermission": {
        "type": "string",
        "enum": [
          "ReadPosts",
          "WritePosts",
          "DeletePosts",
          "EditPosts",
          "WritePendingPosts",
          "ReadPostDrafts",
          "ReadReplies",
          "WriteReplies",
          "DeleteReplies",
          "ReadProfile",
          "UpdateProfile",
          "InviteMember",
          "ManageGroup",
          "DeleteGroup",
          "ManageSpace",
          "ManagePromotions",
          "ManageNews"
        ]
      },
      "GroupQuery": {
        "type": "object",
        "properties": {
          "bookmark": {
            "type": ["string", "null"]
          },
          "size": {
            "type": "integer",
            "format": "uint",
            "default": 0,
            "minimum": 0
          }
        }
      },
      "GroupUpdateRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "image_url": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupPermission"
            }
          },
          "users": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "required": ["name", "description", "image_url", "users", "permissions"]
      },
      "HasPostPermissionQuery": {
        "type": "object",
        "properties": {
          "permission": {
            "description": "Group Permission",
            "anyOf": [
              {
                "$ref": "#/components/schemas/GroupPermission"
              },
              {
                "type": "null"
              }
            ]
          },
          "team_id": {
            "description": "Team ID",
            "type": ["integer", "null"],
            "format": "int64"
          }
        }
      },
      "HasuraAuthInnerRequest": {
        "type": "object",
        "properties": {
          "operationName": {
            "type": "string"
          },
          "query": {
            "type": "string"
          },
          "variables": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "required": ["variables", "operationName", "query"]
      },
      "HasuraAuthRequest": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "request": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/HasuraAuthInnerRequest"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": ["headers"]
      },
      "Header": {
        "description": "The Header Object follows the structure of the Parameter Object with the\nfollowing changes:\n\n1) name MUST NOT be specified, it is given in the corresponding headers map.\n2) in MUST NOT be specified, it is implicitly in header.\n3) All traits that are affected by the location MUST be applicable to a\nlocation of header (for example, style).",
        "type": "object",
        "properties": {
          "content": true,
          "deprecated": {
            "description": "Specifies that a parameter is deprecated and SHOULD\nbe transitioned out of usage.",
            "type": ["boolean", "null"]
          },
          "description": {
            "description": "A brief description of the parameter. This could\ncontain examples of use. CommonMark syntax MAY be\nused for rich text representation.",
            "type": ["string", "null"]
          },
          "example": true,
          "examples": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ReferenceOr3"
            }
          },
          "required": {
            "description": "Determines whether this parameter is mandatory.\nIf the parameter location is \"path\", this property\nis REQUIRED and its value MUST be true. Otherwise,\nthe property MAY be included and its default value\nis false.",
            "type": "boolean"
          },
          "schema": true,
          "style": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HeaderStyle"
              }
            ],
            "default": "simple"
          }
        },
        "additionalProperties": true,
        "oneOf": [
          {
            "description": "The schema defining the type used for the parameter.",
            "type": "object",
            "properties": {
              "schema": {
                "$ref": "#/components/schemas/SchemaObject"
              }
            },
            "required": ["schema"]
          },
          {
            "description": "A map containing the representations for the parameter. The key is the\nmedia type and the value describes it. The map MUST only contain one\nentry.",
            "type": "object",
            "properties": {
              "content": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/MediaType"
                }
              }
            },
            "required": ["content"]
          }
        ]
      },
      "HeaderStyle": {
        "type": "string",
        "enum": ["simple"]
      },
      "HomeGatewayQuery": {
        "type": "object",
        "properties": {
          "feed_limit": {
            "type": ["integer", "null"],
            "format": "int64"
          },
          "news_limit": {
            "type": ["integer", "null"],
            "format": "int64"
          }
        }
      },
      "Info": {
        "description": "The object provides metadata about the API.\nThe metadata MAY be used by the clients if needed,\nand MAY be presented in editing or documentation generation tools for\nconvenience.",
        "type": "object",
        "properties": {
          "contact": {
            "description": "The contact information for the exposed API.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/Contact"
              },
              {
                "type": "null"
              }
            ]
          },
          "description": {
            "description": "A description of the API.\nCommonMark syntax MAY be used for rich text representation.",
            "type": ["string", "null"]
          },
          "license": {
            "description": "The license information for the exposed API.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/License"
              },
              {
                "type": "null"
              }
            ]
          },
          "summary": {
            "description": "A short summary of the API.",
            "type": ["string", "null"]
          },
          "termsOfService": {
            "description": "A URL to the Terms of Service for the API.\nThis MUST be in the format of a URL.",
            "type": ["string", "null"]
          },
          "title": {
            "description": "REQUIRED. The title of the application.",
            "type": "string"
          },
          "version": {
            "description": "REQUIRED. The version of the OpenAPI document (which is distinct from\nthe OpenAPI Specification version or the API implementation version).",
            "type": "string"
          }
        },
        "additionalProperties": true,
        "required": ["title", "version"]
      },
      "License": {
        "description": "License information for the exposed API.",
        "type": "object",
        "properties": {
          "identifier": {
            "description": "An [SPDX](https://spdx.org/spdx-specification-21-web-version#h.jxpfx0ykyb60) license expression for the API. The `identifier` field is mutually exclusive of the `url` field.",
            "type": ["string", "null"]
          },
          "name": {
            "description": "REQUIRED. The license name used for the API.",
            "type": "string"
          },
          "url": {
            "description": "A URL to the license used for the API. This MUST be in the form of a\nURL. The `url` field is mutually exclusive of the `identifier` field.",
            "type": ["string", "null"]
          }
        },
        "additionalProperties": true,
        "required": ["name"]
      },
      "LikePostPathParams": {
        "type": "object",
        "properties": {
          "post_pk": {
            "type": "string"
          }
        },
        "required": ["post_pk"]
      },
      "LikePostRequest": {
        "type": "object",
        "properties": {
          "like": {
            "type": "boolean"
          }
        },
        "required": ["like"]
      },
      "LikePostResponse": {
        "type": "object",
        "properties": {
          "like": {
            "type": "boolean"
          }
        },
        "required": ["like"]
      },
      "LinearScaleQuestion": {
        "type": "object",
        "properties": {
          "description": {
            "type": ["string", "null"]
          },
          "image_url": {
            "type": ["string", "null"]
          },
          "is_required": {
            "type": ["boolean", "null"]
          },
          "max_label": {
            "type": "string"
          },
          "max_value": {
            "type": "integer",
            "format": "int64"
          },
          "min_label": {
            "type": "string"
          },
          "min_value": {
            "type": "integer",
            "format": "int64"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "min_value",
          "max_value",
          "min_label",
          "max_label"
        ]
      },
      "LinearScaleQuestion2": {
        "type": "object",
        "properties": {
          "description": {
            "type": ["string", "null"]
          },
          "image_url": {
            "type": ["string", "null"]
          },
          "is_required": {
            "type": ["boolean", "null"]
          },
          "max_label": {
            "type": "string"
          },
          "max_value": {
            "type": "integer",
            "format": "int64"
          },
          "min_label": {
            "type": "string"
          },
          "min_value": {
            "type": "integer",
            "format": "int64"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "min_value",
          "max_value",
          "min_label",
          "max_label"
        ]
      },
      "Link": {
        "description": "The Link object represents a possible design-time link for a response.\nThe presence of a link does not guarantee the caller's ability to\nsuccessfully invoke it, rather it provides a known relationship and\ntraversal mechanism between responses and other operations.\n\nUnlike dynamic links (i.e. links provided in the response payload),\nthe OAS linking mechanism does not require link information in the runtime\nresponse.\n\nFor computing links, and providing instructions to execute them,\na runtime expression is used for accessing values in an operation\nand using them as parameters while invoking the linked operation.",
        "type": "object",
        "properties": {
          "description": {
            "description": "A description of the link.\nCommonMark syntax MAY be used for rich text representation.",
            "type": ["string", "null"]
          },
          "operationId": true,
          "operationRef": true,
          "parameters": {
            "description": "A map representing parameters to pass to an operation\nas specified with operationId or identified via operationRef.\nThe key is the parameter name to be used, whereas the value\ncan be a constant or an expression to be evaluated and passed\nto the linked operation. The parameter name can be qualified\nusing the parameter location [{in}.]{name} for operations\nthat use the same parameter name in different locations (e.g. path.id).",
            "type": "object",
            "additionalProperties": true
          },
          "requestBody": {
            "description": "A literal value or {expression} to use as a request body\nwhen calling the target operation."
          },
          "server": {
            "description": "A server object to be used by the target operation.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/Server"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": true,
        "oneOf": [
          {
            "description": "A relative or absolute reference to an OAS operation.\nThis field is mutually exclusive of the operationId field,\nand MUST point to an Operation Object. Relative operationRef\nvalues MAY be used to locate an existing Operation Object\nin the OpenAPI definition. See the rules for resolving Relative\nReferences.",
            "type": "object",
            "properties": {
              "operationRef": {
                "type": "string"
              }
            },
            "required": ["operationRef"]
          },
          {
            "description": "The name of an existing, resolvable OAS operation,\nas defined with a unique operationId. This field is\nmutually exclusive of the operationRef field.",
            "type": "object",
            "properties": {
              "operationId": {
                "type": "string"
              }
            },
            "required": ["operationId"]
          }
        ]
      },
      "ListItemsResponse": {
        "type": "object",
        "properties": {
          "bookmark": {
            "type": ["string", "null"]
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Post"
            }
          }
        },
        "required": ["items"]
      },
      "ListPostsQueryParams": {
        "type": "object",
        "properties": {
          "bookmark": {
            "type": ["string", "null"]
          },
          "limit": {
            "description": "Number of items to return (default: 20, max: 100)",
            "type": ["integer", "null"],
            "format": "int32",
            "maximum": 100,
            "minimum": 1
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PostStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "value": {
            "type": ["string", "null"]
          }
        }
      },
      "ListPostsQueryParams2": {
        "type": "object",
        "properties": {
          "page": {
            "type": ["integer", "null"],
            "format": "int32"
          },
          "size": {
            "type": ["integer", "null"],
            "format": "int32"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FeedStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "user_id": {
            "type": ["integer", "null"],
            "format": "int64"
          }
        }
      },
      "LoginRequest": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "email": {
                "type": "string"
              },
              "password": {
                "type": "string"
              }
            },
            "required": ["email", "password"]
          },
          {
            "type": "object",
            "properties": {
              "access_token": {
                "type": "string"
              },
              "provider": {
                "$ref": "#/components/schemas/Provider"
              }
            },
            "required": ["provider", "access_token"]
          },
          {
            "type": "object",
            "properties": {
              "telegram_raw": {
                "type": "string"
              }
            },
            "required": ["telegram_raw"]
          }
        ]
      },
      "MediaType": {
        "type": "object",
        "properties": {
          "encoding": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Encoding"
            }
          },
          "example": true,
          "examples": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ReferenceOr3"
            }
          },
          "schema": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SchemaObject"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": true
      },
      "MedicalRequest": {
        "type": "object",
        "properties": {
          "document_keys": {
            "description": "medical document image keys on S3",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["document_keys"]
      },
      "MeetingDataParam": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "param-type": {
                "type": "string",
                "const": "query"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/MeetingDataQuery"
              }
            ],
            "required": ["param-type"]
          },
          {
            "type": "object",
            "properties": {
              "param-type": {
                "type": "string",
                "const": "read"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/MeetingDataReadAction"
              }
            ],
            "required": ["param-type"]
          }
        ]
      },
      "MeetingDataQuery": {
        "type": "object",
        "properties": {
          "bookmark": {
            "type": ["string", "null"]
          },
          "size": {
            "type": "integer",
            "format": "uint",
            "default": 0,
            "minimum": 0
          }
        }
      },
      "MeetingDataReadAction": {
        "type": "object",
        "properties": {
          "action": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MeetingDataReadActionType"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "MeetingDataReadActionType": {
        "type": "string",
        "enum": ["find-one"]
      },
      "MerchantBalanceRequest": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string"
          },
          "wallet": {
            "type": "string"
          }
        },
        "required": ["wallet", "currency"]
      },
      "MessagePath": {
        "type": "object",
        "properties": {
          "message_id": {
            "description": "Message ID",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["message_id"]
      },
      "MyInfoParam": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "param-type": {
                "type": "string",
                "const": "query"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/MyInfoQuery"
              }
            ],
            "required": ["param-type"]
          },
          {
            "type": "object",
            "properties": {
              "param-type": {
                "type": "string",
                "const": "read"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/MyInfoReadAction"
              }
            ],
            "required": ["param-type"]
          }
        ]
      },
      "MyInfoQuery": {
        "type": "object",
        "properties": {
          "bookmark": {
            "type": ["string", "null"]
          },
          "size": {
            "type": "integer",
            "format": "uint",
            "default": 0,
            "minimum": 0
          }
        }
      },
      "MyInfoReadAction": {
        "type": "object",
        "properties": {
          "action": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MyInfoReadActionType"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "MyInfoReadActionType": {
        "type": "string",
        "enum": ["my-info"]
      },
      "MynetworkAction": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "follow": {
                "$ref": "#/components/schemas/MynetworkFollowRequest"
              }
            },
            "additionalProperties": false,
            "required": ["follow"]
          },
          {
            "type": "object",
            "properties": {
              "unfollow": {
                "$ref": "#/components/schemas/MynetworkUnfollowRequest"
              }
            },
            "additionalProperties": false,
            "required": ["unfollow"]
          }
        ]
      },
      "MynetworkFollowRequest": {
        "type": "object"
      },
      "MynetworkPath": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["id"]
      },
      "MynetworkUnfollowRequest": {
        "type": "object"
      },
      "NetworkDataParam": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "param-type": {
                "type": "string",
                "const": "query"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/NetworkDataQuery"
              }
            ],
            "required": ["param-type"]
          },
          {
            "type": "object",
            "properties": {
              "param-type": {
                "type": "string",
                "const": "read"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/NetworkDataReadAction"
              }
            ],
            "required": ["param-type"]
          }
        ]
      },
      "NetworkDataQuery": {
        "type": "object",
        "properties": {
          "bookmark": {
            "type": ["string", "null"]
          },
          "size": {
            "type": "integer",
            "format": "uint",
            "default": 0,
            "minimum": 0
          }
        }
      },
      "NetworkDataReadAction": {
        "type": "object",
        "properties": {
          "action": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NetworkDataReadActionType"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "NetworkDataReadActionType": {
        "type": "string",
        "enum": ["find-one"]
      },
      "NewsAction": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "create": {
                "$ref": "#/components/schemas/NewsCreateRequest"
              }
            },
            "additionalProperties": false,
            "required": ["create"]
          }
        ]
      },
      "NewsByIdAction": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "delete": {
                "$ref": "#/components/schemas/NewsDeleteRequest"
              }
            },
            "additionalProperties": false,
            "required": ["delete"]
          },
          {
            "type": "object",
            "properties": {
              "update": {
                "$ref": "#/components/schemas/NewsUpdateRequest"
              }
            },
            "additionalProperties": false,
            "required": ["update"]
          }
        ]
      },
      "NewsCreateRequest": {
        "type": "object",
        "properties": {
          "html_content": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "required": ["title", "html_content"]
      },
      "NewsDeleteRequest": {
        "type": "object"
      },
      "NewsParam": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "param-type": {
                "type": "string",
                "const": "query"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/NewsQuery"
              }
            ],
            "required": ["param-type"]
          }
        ]
      },
      "NewsPath": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["id"]
      },
      "NewsQuery": {
        "type": "object",
        "properties": {
          "bookmark": {
            "type": ["string", "null"]
          },
          "size": {
            "type": "integer",
            "format": "uint",
            "default": 0,
            "minimum": 0
          }
        }
      },
      "NewsUpdateRequest": {
        "type": "object",
        "properties": {
          "html_content": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "required": ["title", "html_content"]
      },
      "NoticeAnswer": {
        "type": "object",
        "properties": {
          "answers": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            }
          }
        },
        "required": ["answers"]
      },
      "NoticeOptionRequest": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "is_correct": {
            "type": "boolean"
          }
        },
        "required": ["content", "is_correct"]
      },
      "NoticeQuestionRequest": {
        "type": "object",
        "properties": {
          "images": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NoticeOptionRequest"
            }
          },
          "title": {
            "type": "string"
          }
        },
        "required": ["title", "images", "options"]
      },
      "NoticeQuizRequest": {
        "type": "object",
        "properties": {
          "questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NoticeQuestionRequest"
            }
          }
        },
        "required": ["questions"]
      },
      "NotificationByIdAction": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "dismiss": {
                "$ref": "#/components/schemas/NotificationDismissRequest"
              }
            },
            "additionalProperties": false,
            "required": ["dismiss"]
          },
          {
            "type": "object",
            "properties": {
              "update_status_to_read": {
                "$ref": "#/components/schemas/NotificationUpdateStatusToReadRequest"
              }
            },
            "additionalProperties": false,
            "required": ["update_status_to_read"]
          }
        ]
      },
      "NotificationDismissRequest": {
        "type": "object"
      },
      "NotificationPath": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["id"]
      },
      "NotificationQuery": {
        "type": "object",
        "properties": {
          "bookmark": {
            "type": ["string", "null"]
          },
          "size": {
            "type": "integer",
            "format": "uint",
            "default": 0,
            "minimum": 0
          }
        }
      },
      "NotificationUpdateStatusToReadRequest": {
        "type": "object"
      },
      "OAuth2Flows": {
        "type": "object",
        "allOf": [
          {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "implicit": {
                    "type": "object",
                    "properties": {
                      "authorizationUrl": {
                        "type": "string"
                      },
                      "refreshUrl": {
                        "type": ["string", "null"]
                      },
                      "scopes": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "default": {}
                      }
                    },
                    "required": ["authorizationUrl"]
                  }
                },
                "required": ["implicit"]
              },
              {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "object",
                    "properties": {
                      "refreshUrl": {
                        "type": ["string", "null"]
                      },
                      "scopes": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "default": {}
                      },
                      "tokenUrl": {
                        "type": "string"
                      }
                    },
                    "required": ["tokenUrl"]
                  }
                },
                "required": ["password"]
              },
              {
                "type": "object",
                "properties": {
                  "clientCredentials": {
                    "type": "object",
                    "properties": {
                      "refreshUrl": {
                        "type": ["string", "null"]
                      },
                      "scopes": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "default": {}
                      },
                      "tokenUrl": {
                        "type": "string"
                      }
                    },
                    "required": ["tokenUrl"]
                  }
                },
                "required": ["clientCredentials"]
              },
              {
                "type": "object",
                "properties": {
                  "authorizationCode": {
                    "type": "object",
                    "properties": {
                      "authorizationUrl": {
                        "type": "string"
                      },
                      "refreshUrl": {
                        "type": ["string", "null"]
                      },
                      "scopes": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "default": {}
                      },
                      "tokenUrl": {
                        "type": "string"
                      }
                    },
                    "required": ["authorizationUrl", "tokenUrl"]
                  }
                },
                "required": ["authorizationCode"]
              }
            ]
          },
          {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "implicit": {
                    "type": "object",
                    "properties": {
                      "authorizationUrl": {
                        "type": "string"
                      },
                      "refreshUrl": {
                        "type": ["string", "null"]
                      },
                      "scopes": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "default": {}
                      }
                    },
                    "required": ["authorizationUrl"]
                  }
                },
                "required": ["implicit"]
              },
              {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "object",
                    "properties": {
                      "refreshUrl": {
                        "type": ["string", "null"]
                      },
                      "scopes": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "default": {}
                      },
                      "tokenUrl": {
                        "type": "string"
                      }
                    },
                    "required": ["tokenUrl"]
                  }
                },
                "required": ["password"]
              },
              {
                "type": "object",
                "properties": {
                  "clientCredentials": {
                    "type": "object",
                    "properties": {
                      "refreshUrl": {
                        "type": ["string", "null"]
                      },
                      "scopes": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "default": {}
                      },
                      "tokenUrl": {
                        "type": "string"
                      }
                    },
                    "required": ["tokenUrl"]
                  }
                },
                "required": ["clientCredentials"]
              },
              {
                "type": "object",
                "properties": {
                  "authorizationCode": {
                    "type": "object",
                    "properties": {
                      "authorizationUrl": {
                        "type": "string"
                      },
                      "refreshUrl": {
                        "type": ["string", "null"]
                      },
                      "scopes": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "default": {}
                      },
                      "tokenUrl": {
                        "type": "string"
                      }
                    },
                    "required": ["authorizationUrl", "tokenUrl"]
                  }
                },
                "required": ["authorizationCode"]
              }
            ]
          },
          {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "implicit": {
                    "type": "object",
                    "properties": {
                      "authorizationUrl": {
                        "type": "string"
                      },
                      "refreshUrl": {
                        "type": ["string", "null"]
                      },
                      "scopes": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "default": {}
                      }
                    },
                    "required": ["authorizationUrl"]
                  }
                },
                "required": ["implicit"]
              },
              {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "object",
                    "properties": {
                      "refreshUrl": {
                        "type": ["string", "null"]
                      },
                      "scopes": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "default": {}
                      },
                      "tokenUrl": {
                        "type": "string"
                      }
                    },
                    "required": ["tokenUrl"]
                  }
                },
                "required": ["password"]
              },
              {
                "type": "object",
                "properties": {
                  "clientCredentials": {
                    "type": "object",
                    "properties": {
                      "refreshUrl": {
                        "type": ["string", "null"]
                      },
                      "scopes": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "default": {}
                      },
                      "tokenUrl": {
                        "type": "string"
                      }
                    },
                    "required": ["tokenUrl"]
                  }
                },
                "required": ["clientCredentials"]
              },
              {
                "type": "object",
                "properties": {
                  "authorizationCode": {
                    "type": "object",
                    "properties": {
                      "authorizationUrl": {
                        "type": "string"
                      },
                      "refreshUrl": {
                        "type": ["string", "null"]
                      },
                      "scopes": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "default": {}
                      },
                      "tokenUrl": {
                        "type": "string"
                      }
                    },
                    "required": ["authorizationUrl", "tokenUrl"]
                  }
                },
                "required": ["authorizationCode"]
              }
            ]
          },
          {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "implicit": {
                    "type": "object",
                    "properties": {
                      "authorizationUrl": {
                        "type": "string"
                      },
                      "refreshUrl": {
                        "type": ["string", "null"]
                      },
                      "scopes": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "default": {}
                      }
                    },
                    "required": ["authorizationUrl"]
                  }
                },
                "required": ["implicit"]
              },
              {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "object",
                    "properties": {
                      "refreshUrl": {
                        "type": ["string", "null"]
                      },
                      "scopes": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "default": {}
                      },
                      "tokenUrl": {
                        "type": "string"
                      }
                    },
                    "required": ["tokenUrl"]
                  }
                },
                "required": ["password"]
              },
              {
                "type": "object",
                "properties": {
                  "clientCredentials": {
                    "type": "object",
                    "properties": {
                      "refreshUrl": {
                        "type": ["string", "null"]
                      },
                      "scopes": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "default": {}
                      },
                      "tokenUrl": {
                        "type": "string"
                      }
                    },
                    "required": ["tokenUrl"]
                  }
                },
                "required": ["clientCredentials"]
              },
              {
                "type": "object",
                "properties": {
                  "authorizationCode": {
                    "type": "object",
                    "properties": {
                      "authorizationUrl": {
                        "type": "string"
                      },
                      "refreshUrl": {
                        "type": ["string", "null"]
                      },
                      "scopes": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "default": {}
                      },
                      "tokenUrl": {
                        "type": "string"
                      }
                    },
                    "required": ["authorizationUrl", "tokenUrl"]
                  }
                },
                "required": ["authorizationCode"]
              }
            ]
          }
        ]
      },
      "OpenApi": {
        "type": "object",
        "properties": {
          "components": {
            "description": "An element to hold various schemas for the document.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/Components"
              },
              {
                "type": "null"
              }
            ]
          },
          "externalDocs": {
            "description": "Additional external documentation.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/ExternalDocumentation"
              },
              {
                "type": "null"
              }
            ]
          },
          "info": {
            "description": "REQUIRED. Provides metadata about the API.\nThe metadata MAY be used by tooling as required.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Info"
              }
            ]
          },
          "jsonSchemaDialect": {
            "description": "The default value for the `$schema` keyword within Schema Objects\ncontained within this OAS document. This MUST be in the form of a URI.",
            "type": ["string", "null"]
          },
          "openapi": {
            "type": "string"
          },
          "paths": {
            "description": "The available paths and operations for the API.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/Paths"
              },
              {
                "type": "null"
              }
            ]
          },
          "security": {
            "description": "A declaration of which security mechanisms can be used across the API.\n\nThe list of values includes alternative security requirement objects\nthat can be used. Only one of the security requirement objects need to\nbe satisfied to authorize a request. Individual operations can override\nthis definition. Global security settings may be overridden on a\nper-path basis.",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "servers": {
            "description": "An array of Server Objects, which provide connectivity information to a\ntarget server. If the servers property is not provided, or is an empty\narray, the default value would be a Server Object with a url value of /.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Server"
            }
          },
          "tags": {
            "description": "A list of tags used by the document with additional metadata.\n\nThe order of the tags can be used to reflect on their order by the\nparsing tools. Not all tags that are used by the Operation Object\nmust be declared. The tags that are not declared MAY be organized\nrandomly or based on the tool's logic. Each tag name in the list\nMUST be unique.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "webhooks": {
            "description": "The incoming webhooks that MAY be received as part of this API and that\nthe API consumer MAY choose to implement. Closely related to the\n`callbacks` feature, this section describes requests initiated other\nthan by an API call, for example by an out of band registration. The key\nname is a unique string to refer to each webhook, while the (optionally\nreferenced) Path Item Object describes a request that may be initiated\nby the API provider and the expected responses.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ReferenceOr"
            }
          }
        },
        "additionalProperties": true,
        "required": ["openapi", "info"]
      },
      "Operation": {
        "description": "Describes a single API operation on a path.",
        "type": "object",
        "properties": {
          "callbacks": {
            "description": "Callbacks for the operation.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ReferenceOr8"
            }
          },
          "deprecated": {
            "description": "Declares this operation to be deprecated.Default value is false.",
            "type": "boolean"
          },
          "description": {
            "description": "A verbose explanation of the operation behavior.\nCommonMark syntax MAY be used for rich text representation.",
            "type": ["string", "null"]
          },
          "externalDocs": {
            "description": "Additional external documentation for this operation.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/ExternalDocumentation"
              },
              {
                "type": "null"
              }
            ]
          },
          "operationId": {
            "description": "Unique string used to identify the operation.\nThe id MUST be unique among all operations described in the API.\nTools and libraries MAY use the operationId to uniquely identify\nan operation, therefore, it is RECOMMENDED to follow common\nprogramming naming conventions.",
            "type": ["string", "null"]
          },
          "parameters": {
            "description": "A list of parameters that are applicable for this operation.\nIf a parameter is already defined at the Path Item, the new\ndefinition will override it but can never remove it.\nThe list MUST NOT include duplicated parameters. A unique\nparameter is defined by a combination of a name and location.\nThe list can use the Reference Object to link to parameters\nthat are defined at the OpenAPI Object's components/parameters.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceOr2"
            }
          },
          "requestBody": {
            "description": "The request body applicable for this operation.\nThe requestBody is fully supported in HTTP methods\nwhere the HTTP 1.1 specification RFC7231 has explicitly\ndefined semantics for request bodies. In other cases where\nthe HTTP spec is vague (such as\n[GET](https://tools.ietf.org/html/rfc7231#section-4.3.1),\n[HEAD](https://tools.ietf.org/html/rfc7231#section-4.3.2) and\n[DELETE](https://tools.ietf.org/html/rfc7231#section-4.3.5)),\nrequestBody is permitted but does not have well-defined semantics and\nSHOULD be avoided if possible.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/ReferenceOr5"
              },
              {
                "type": "null"
              }
            ]
          },
          "responses": {
            "description": "The list of possible responses as they are returned\nfrom executing this operation.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/Responses"
              },
              {
                "type": "null"
              }
            ]
          },
          "security": {
            "description": "A declaration of which security mechanisms can be used for this\noperation. The list of values includes alternative security\nrequirement objects that can be used. Only one of the security\nrequirement objects need to be satisfied to authorize a request.\nThis definition overrides any declared top-level security. To remove\na top-level security declaration, an empty array can be used.",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "servers": {
            "description": "An alternative server array to service this operation.\nIf an alternative server object is specified at the\nPath Item Object or Root level, it will be overridden by this value.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Server"
            }
          },
          "summary": {
            "description": "A short summary of what the operation does.",
            "type": ["string", "null"]
          },
          "tags": {
            "description": "A list of tags for API documentation control.\nTags can be used for logical grouping of operations\nby resources or any other qualifier.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": true
      },
      "OracleType": {
        "type": "string",
        "enum": ["Artist", "Gallery", "Collector", "Auction"]
      },
      "Parameter": {
        "oneOf": [
          {
            "description": "Describes a single operation parameter.\n\nA unique parameter is defined by a combination of a name and location.",
            "type": "object",
            "properties": {
              "allow_empty_value": {
                "description": "Sets the ability to pass empty-valued parameters. This is\nvalid only for query parameters and allows sending a parameter\nwith an empty value. Default value is false. If style is used,\nand if behavior is n/a (cannot be serialized), the value of\nallowEmptyValue SHALL be ignored.",
                "type": ["boolean", "null"]
              },
              "allow_reserved": {
                "description": "Determines whether the parameter value SHOULD allow reserved\ncharacters, as defined by RFC3986 :/?#[]@!$&'()*+,;= to be included\nwithout percent-encoding. This property only applies to parameters\nwith an in value of query. The default value is false.",
                "type": "boolean"
              },
              "content": true,
              "deprecated": {
                "description": "Specifies that a parameter is deprecated and SHOULD\nbe transitioned out of usage.",
                "type": ["boolean", "null"]
              },
              "description": {
                "description": "A brief description of the parameter. This could\ncontain examples of use. CommonMark syntax MAY be\nused for rich text representation.",
                "type": ["string", "null"]
              },
              "example": true,
              "examples": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ReferenceOr3"
                }
              },
              "explode": {
                "type": ["boolean", "null"]
              },
              "in": {
                "type": "string",
                "const": "query"
              },
              "name": {
                "description": "REQUIRED. The name of the parameter. Parameter names are case sensitive.\nIf in is \"path\", the name field MUST correspond to the associated path\nsegment from the path field in the Paths Object. See Path Templating for\nfurther information.\n\nIf in is \"header\" and the name field is \"Accept\", \"Content-Type\" or\n\"Authorization\", the parameter definition SHALL be ignored.\n\nFor all other cases, the name corresponds to the parameter name\nused by the in property.",
                "type": "string"
              },
              "required": {
                "description": "Determines whether this parameter is mandatory.\nIf the parameter location is \"path\", this property\nis REQUIRED and its value MUST be true. Otherwise,\nthe property MAY be included and its default value\nis false.",
                "type": "boolean"
              },
              "schema": true,
              "style": {
                "description": "Describes how the parameter value will be serialized depending on\nthe type of the parameter value. Default values (based on value of\nin): for query - form; for path - simple; for header - simple; for\ncookie - form.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/QueryStyle"
                  }
                ],
                "default": "form"
              }
            },
            "additionalProperties": true,
            "oneOf": [
              {
                "description": "The schema defining the type used for the parameter.",
                "type": "object",
                "properties": {
                  "schema": {
                    "$ref": "#/components/schemas/SchemaObject"
                  }
                },
                "required": ["schema"]
              },
              {
                "description": "A map containing the representations for the parameter. The key is the\nmedia type and the value describes it. The map MUST only contain one\nentry.",
                "type": "object",
                "properties": {
                  "content": {
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "#/components/schemas/MediaType"
                    }
                  }
                },
                "required": ["content"]
              }
            ],
            "required": ["in", "name"]
          },
          {
            "description": "Describes a single operation parameter.\n\nA unique parameter is defined by a combination of a name and location.",
            "type": "object",
            "properties": {
              "content": true,
              "deprecated": {
                "description": "Specifies that a parameter is deprecated and SHOULD\nbe transitioned out of usage.",
                "type": ["boolean", "null"]
              },
              "description": {
                "description": "A brief description of the parameter. This could\ncontain examples of use. CommonMark syntax MAY be\nused for rich text representation.",
                "type": ["string", "null"]
              },
              "example": true,
              "examples": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ReferenceOr3"
                }
              },
              "explode": {
                "type": ["boolean", "null"]
              },
              "in": {
                "type": "string",
                "const": "header"
              },
              "name": {
                "description": "REQUIRED. The name of the parameter. Parameter names are case sensitive.\nIf in is \"path\", the name field MUST correspond to the associated path\nsegment from the path field in the Paths Object. See Path Templating for\nfurther information.\n\nIf in is \"header\" and the name field is \"Accept\", \"Content-Type\" or\n\"Authorization\", the parameter definition SHALL be ignored.\n\nFor all other cases, the name corresponds to the parameter name\nused by the in property.",
                "type": "string"
              },
              "required": {
                "description": "Determines whether this parameter is mandatory.\nIf the parameter location is \"path\", this property\nis REQUIRED and its value MUST be true. Otherwise,\nthe property MAY be included and its default value\nis false.",
                "type": "boolean"
              },
              "schema": true,
              "style": {
                "description": "Describes how the parameter value will be serialized depending on\nthe type of the parameter value. Default values (based on value of\nin): for query - form; for path - simple; for header - simple; for\ncookie - form.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/HeaderStyle"
                  }
                ],
                "default": "simple"
              }
            },
            "additionalProperties": true,
            "oneOf": [
              {
                "description": "The schema defining the type used for the parameter.",
                "type": "object",
                "properties": {
                  "schema": {
                    "$ref": "#/components/schemas/SchemaObject"
                  }
                },
                "required": ["schema"]
              },
              {
                "description": "A map containing the representations for the parameter. The key is the\nmedia type and the value describes it. The map MUST only contain one\nentry.",
                "type": "object",
                "properties": {
                  "content": {
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "#/components/schemas/MediaType"
                    }
                  }
                },
                "required": ["content"]
              }
            ],
            "required": ["in", "name"]
          },
          {
            "description": "Describes a single operation parameter.\n\nA unique parameter is defined by a combination of a name and location.",
            "type": "object",
            "properties": {
              "content": true,
              "deprecated": {
                "description": "Specifies that a parameter is deprecated and SHOULD\nbe transitioned out of usage.",
                "type": ["boolean", "null"]
              },
              "description": {
                "description": "A brief description of the parameter. This could\ncontain examples of use. CommonMark syntax MAY be\nused for rich text representation.",
                "type": ["string", "null"]
              },
              "example": true,
              "examples": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ReferenceOr3"
                }
              },
              "explode": {
                "type": ["boolean", "null"]
              },
              "in": {
                "type": "string",
                "const": "path"
              },
              "name": {
                "description": "REQUIRED. The name of the parameter. Parameter names are case sensitive.\nIf in is \"path\", the name field MUST correspond to the associated path\nsegment from the path field in the Paths Object. See Path Templating for\nfurther information.\n\nIf in is \"header\" and the name field is \"Accept\", \"Content-Type\" or\n\"Authorization\", the parameter definition SHALL be ignored.\n\nFor all other cases, the name corresponds to the parameter name\nused by the in property.",
                "type": "string"
              },
              "required": {
                "description": "Determines whether this parameter is mandatory.\nIf the parameter location is \"path\", this property\nis REQUIRED and its value MUST be true. Otherwise,\nthe property MAY be included and its default value\nis false.",
                "type": "boolean"
              },
              "schema": true,
              "style": {
                "description": "Describes how the parameter value will be serialized depending on\nthe type of the parameter value. Default values (based on value of\nin): for query - form; for path - simple; for header - simple; for\ncookie - form.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PathStyle"
                  }
                ],
                "default": "simple"
              }
            },
            "additionalProperties": true,
            "oneOf": [
              {
                "description": "The schema defining the type used for the parameter.",
                "type": "object",
                "properties": {
                  "schema": {
                    "$ref": "#/components/schemas/SchemaObject"
                  }
                },
                "required": ["schema"]
              },
              {
                "description": "A map containing the representations for the parameter. The key is the\nmedia type and the value describes it. The map MUST only contain one\nentry.",
                "type": "object",
                "properties": {
                  "content": {
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "#/components/schemas/MediaType"
                    }
                  }
                },
                "required": ["content"]
              }
            ],
            "required": ["in", "name"]
          },
          {
            "description": "Describes a single operation parameter.\n\nA unique parameter is defined by a combination of a name and location.",
            "type": "object",
            "properties": {
              "content": true,
              "deprecated": {
                "description": "Specifies that a parameter is deprecated and SHOULD\nbe transitioned out of usage.",
                "type": ["boolean", "null"]
              },
              "description": {
                "description": "A brief description of the parameter. This could\ncontain examples of use. CommonMark syntax MAY be\nused for rich text representation.",
                "type": ["string", "null"]
              },
              "example": true,
              "examples": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ReferenceOr3"
                }
              },
              "explode": {
                "type": ["boolean", "null"]
              },
              "in": {
                "type": "string",
                "const": "cookie"
              },
              "name": {
                "description": "REQUIRED. The name of the parameter. Parameter names are case sensitive.\nIf in is \"path\", the name field MUST correspond to the associated path\nsegment from the path field in the Paths Object. See Path Templating for\nfurther information.\n\nIf in is \"header\" and the name field is \"Accept\", \"Content-Type\" or\n\"Authorization\", the parameter definition SHALL be ignored.\n\nFor all other cases, the name corresponds to the parameter name\nused by the in property.",
                "type": "string"
              },
              "required": {
                "description": "Determines whether this parameter is mandatory.\nIf the parameter location is \"path\", this property\nis REQUIRED and its value MUST be true. Otherwise,\nthe property MAY be included and its default value\nis false.",
                "type": "boolean"
              },
              "schema": true,
              "style": {
                "description": "Describes how the parameter value will be serialized depending on\nthe type of the parameter value. Default values (based on value of\nin): for query - form; for path - simple; for header - simple; for\ncookie - form.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CookieStyle"
                  }
                ],
                "default": "form"
              }
            },
            "additionalProperties": true,
            "oneOf": [
              {
                "description": "The schema defining the type used for the parameter.",
                "type": "object",
                "properties": {
                  "schema": {
                    "$ref": "#/components/schemas/SchemaObject"
                  }
                },
                "required": ["schema"]
              },
              {
                "description": "A map containing the representations for the parameter. The key is the\nmedia type and the value describes it. The map MUST only contain one\nentry.",
                "type": "object",
                "properties": {
                  "content": {
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "#/components/schemas/MediaType"
                    }
                  }
                },
                "required": ["content"]
              }
            ],
            "required": ["in", "name"]
          }
        ]
      },
      "Partition": {
        "oneOf": [
          {
            "type": "string",
            "enum": ["None"]
          },
          {
            "type": "object",
            "properties": {
              "User": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["User"]
          },
          {
            "type": "object",
            "properties": {
              "Email": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["Email"]
          },
          {
            "type": "object",
            "properties": {
              "Feed": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["Feed"]
          },
          {
            "type": "object",
            "properties": {
              "PostLike": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["PostLike"]
          },
          {
            "type": "object",
            "properties": {
              "Session": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["Session"]
          },
          {
            "type": "object",
            "properties": {
              "Space": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["Space"]
          },
          {
            "type": "object",
            "properties": {
              "DeliberationSpace": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["DeliberationSpace"]
          },
          {
            "type": "object",
            "properties": {
              "PollSpace": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["PollSpace"]
          },
          {
            "type": "object",
            "properties": {
              "SurveySpace": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["SurveySpace"]
          },
          {
            "type": "object",
            "properties": {
              "Discussion": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["Discussion"]
          },
          {
            "type": "object",
            "properties": {
              "DiscussionUser": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["DiscussionUser"]
          },
          {
            "type": "object",
            "properties": {
              "Survey": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["Survey"]
          },
          {
            "type": "object",
            "properties": {
              "SurveyResponse": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["SurveyResponse"]
          },
          {
            "type": "object",
            "properties": {
              "Team": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["Team"]
          }
        ]
      },
      "PassportRequest": {
        "type": "object",
        "properties": {
          "key": {
            "description": "S3 Object Key of the passport image within the s3 bucket",
            "type": "string"
          }
        },
        "required": ["key"]
      },
      "PathItem": {
        "description": "Describes the operations available on a single path.\nA Path Item MAY be empty, due to ACL constraints.\nThe path itself is still exposed to the documentation\nviewer but they will not know which operations and\nparameters are available.",
        "type": "object",
        "properties": {
          "$ref": {
            "description": "Allows for a referenced definition of this path item. The referenced\nstructure MUST be in the form of a Path Item Object.  In case a Path\nItem Object field appears both in the defined object and the referenced\nobject, the behavior is undefined. See the rules for resolving Relative\nReferences.",
            "type": ["string", "null"]
          },
          "delete": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Operation"
              },
              {
                "type": "null"
              }
            ]
          },
          "description": {
            "description": "An optional, string description, intended to apply to all operations in\nthis path. CommonMark syntax MAY be used for rich text representation.",
            "type": ["string", "null"]
          },
          "get": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Operation"
              },
              {
                "type": "null"
              }
            ]
          },
          "head": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Operation"
              },
              {
                "type": "null"
              }
            ]
          },
          "options": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Operation"
              },
              {
                "type": "null"
              }
            ]
          },
          "parameters": {
            "description": "A list of parameters that are applicable for all the\noperations described under this path. These parameters\ncan be overridden at the operation level, but cannot be\nremoved there. The list MUST NOT include duplicated parameters.\nA unique parameter is defined by a combination of a name and location.\nThe list can use the Reference Object to link to parameters that\nare defined at the OpenAPI Object's components/parameters.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceOr2"
            }
          },
          "patch": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Operation"
              },
              {
                "type": "null"
              }
            ]
          },
          "post": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Operation"
              },
              {
                "type": "null"
              }
            ]
          },
          "put": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Operation"
              },
              {
                "type": "null"
              }
            ]
          },
          "servers": {
            "description": "An alternative server array to service all operations in this path.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Server"
            }
          },
          "summary": {
            "description": "An optional, string summary, intended to apply to all operations in\nthis path.",
            "type": ["string", "null"]
          },
          "trace": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Operation"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": true
      },
      "PathStyle": {
        "type": "string",
        "enum": ["matrix", "label", "simple"]
      },
      "Paths": {
        "description": "Holds the relative paths to the individual endpoints and\ntheir operations. The path is appended to the URL from the\nServer Object in order to construct the full URL. The Paths\nMAY be empty, due to Access Control List (ACL) constraints.",
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/ReferenceOr"
        }
      },
      "PlayerImages": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string"
          },
          "lose": {
            "type": "string"
          },
          "run": {
            "$ref": "#/components/schemas/SpriteSheet"
          },
          "select": {
            "$ref": "#/components/schemas/SpriteSheet"
          },
          "win": {
            "type": "string"
          }
        },
        "required": ["alias", "select", "run", "win", "lose"]
      },
      "PollMessagesQuery": {
        "type": "object",
        "properties": {
          "since_id": {
            "description": "Last message ID received (get messages with ID greater than this)",
            "type": ["integer", "null"],
            "format": "int64"
          },
          "timeout_seconds": {
            "description": "Maximum time to wait for new messages (seconds, default: 30)",
            "type": ["integer", "null"],
            "format": "uint64",
            "minimum": 0
          }
        }
      },
      "Post": {
        "type": "object",
        "properties": {
          "author_display_name": {
            "type": "string"
          },
          "author_profile_url": {
            "type": "string"
          },
          "author_username": {
            "type": "string"
          },
          "booster": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BoosterType"
              },
              {
                "type": "null"
              }
            ]
          },
          "comments": {
            "type": "integer",
            "format": "int64"
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "html_contents": {
            "type": "string"
          },
          "likes": {
            "type": "integer",
            "format": "int64"
          },
          "pk": {
            "$ref": "#/components/schemas/Partition"
          },
          "post_type": {
            "$ref": "#/components/schemas/PostType"
          },
          "rewards": {
            "type": ["integer", "null"],
            "format": "int64"
          },
          "shares": {
            "type": "integer",
            "format": "int64"
          },
          "sk": {
            "$ref": "#/components/schemas/EntityType"
          },
          "sorted_visibility": {
            "$ref": "#/components/schemas/SortedVisibility"
          },
          "space_pk": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Partition"
              },
              {
                "type": "null"
              }
            ]
          },
          "status": {
            "$ref": "#/components/schemas/PostStatus"
          },
          "title": {
            "type": "string"
          },
          "updated_at": {
            "type": "integer",
            "format": "int64"
          },
          "urls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "user_pk": {
            "$ref": "#/components/schemas/Partition"
          },
          "visibility": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Visibility"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "pk",
          "sk",
          "created_at",
          "updated_at",
          "title",
          "html_contents",
          "post_type",
          "status",
          "shares",
          "likes",
          "comments",
          "user_pk",
          "author_display_name",
          "author_profile_url",
          "author_username",
          "sorted_visibility",
          "urls"
        ]
      },
      "PostArtworkMetadata": {
        "type": "object",
        "properties": {
          "display_type": {
            "type": ["string", "null"]
          },
          "trait_type": {
            "type": "string"
          },
          "value": true
        },
        "required": ["trait_type", "value"]
      },
      "PostAuthor": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "display_name": {
            "type": "string"
          },
          "pk": {
            "$ref": "#/components/schemas/Partition"
          },
          "profile_url": {
            "type": "string"
          },
          "sk": {
            "$ref": "#/components/schemas/EntityType"
          },
          "updated_at": {
            "type": "integer",
            "format": "int64"
          },
          "user_pk": {
            "$ref": "#/components/schemas/Partition"
          },
          "username": {
            "type": "string"
          }
        },
        "required": [
          "pk",
          "sk",
          "created_at",
          "updated_at",
          "display_name",
          "profile_url",
          "username",
          "user_pk"
        ]
      },
      "PostComment": {
        "type": "object",
        "properties": {
          "author_display_name": {
            "type": "string"
          },
          "author_pk": {
            "$ref": "#/components/schemas/Partition"
          },
          "author_profile_url": {
            "type": "string"
          },
          "author_username": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "pk": {
            "$ref": "#/components/schemas/Partition"
          },
          "sk": {
            "$ref": "#/components/schemas/EntityType"
          },
          "updated_at": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "pk",
          "sk",
          "updated_at",
          "content",
          "author_pk",
          "author_display_name",
          "author_username",
          "author_profile_url"
        ]
      },
      "PostDetailResponse": {
        "type": "object",
        "properties": {
          "artwork_metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostArtworkMetadata"
            }
          },
          "author": {
            "$ref": "#/components/schemas/PostAuthor"
          },
          "author_display_name": {
            "type": "string"
          },
          "author_profile_url": {
            "type": "string"
          },
          "author_username": {
            "type": "string"
          },
          "booster": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BoosterType"
              },
              {
                "type": "null"
              }
            ]
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostComment"
            }
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "html_contents": {
            "type": "string"
          },
          "is_liked": {
            "type": "boolean"
          },
          "likes": {
            "type": "integer",
            "format": "int64"
          },
          "pk": {
            "$ref": "#/components/schemas/Partition"
          },
          "post_type": {
            "$ref": "#/components/schemas/PostType"
          },
          "repost": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PostRepost"
              },
              {
                "type": "null"
              }
            ]
          },
          "rewards": {
            "type": ["integer", "null"],
            "format": "int64"
          },
          "shares": {
            "type": "integer",
            "format": "int64"
          },
          "sk": {
            "$ref": "#/components/schemas/EntityType"
          },
          "sorted_visibility": {
            "$ref": "#/components/schemas/SortedVisibility"
          },
          "space_pk": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Partition"
              },
              {
                "type": "null"
              }
            ]
          },
          "status": {
            "$ref": "#/components/schemas/PostStatus"
          },
          "title": {
            "type": "string"
          },
          "updated_at": {
            "type": "integer",
            "format": "int64"
          },
          "urls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "user_pk": {
            "$ref": "#/components/schemas/Partition"
          },
          "visibility": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Visibility"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": ["author", "comments", "artwork_metadata", "is_liked"]
      },
      "PostRepost": {
        "type": "object",
        "properties": {
          "author_display_name": {
            "type": "string"
          },
          "author_pk": {
            "$ref": "#/components/schemas/Partition"
          },
          "author_profile_url": {
            "type": "string"
          },
          "pk": {
            "$ref": "#/components/schemas/Partition"
          },
          "post_html_contents": {
            "type": "string"
          },
          "post_pk": {
            "$ref": "#/components/schemas/Partition"
          },
          "post_title": {
            "type": "string"
          },
          "sk": {
            "$ref": "#/components/schemas/EntityType"
          }
        },
        "required": [
          "pk",
          "sk",
          "post_pk",
          "post_title",
          "post_html_contents",
          "author_pk",
          "author_display_name",
          "author_profile_url"
        ]
      },
      "PostStatus": {
        "type": "integer",
        "enum": [1, 2]
      },
      "PostType": {
        "type": "integer",
        "enum": [1, 2, 3]
      },
      "PostingDeliberationRequest": {
        "type": "object"
      },
      "PostingDeliberationResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/DeliberationDetailResponse"
          }
        },
        "required": ["metadata"]
      },
      "PromotionAction": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "promote_feed": {
                "$ref": "#/components/schemas/PromotionPromoteFeedRequest"
              }
            },
            "additionalProperties": false,
            "required": ["promote_feed"]
          }
        ]
      },
      "PromotionApproveRequest": {
        "type": "object",
        "properties": {
          "priority": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["priority"]
      },
      "PromotionByIdAction": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "delete": {
                "$ref": "#/components/schemas/PromotionDeleteRequest"
              }
            },
            "additionalProperties": false,
            "required": ["delete"]
          },
          {
            "type": "object",
            "properties": {
              "update": {
                "$ref": "#/components/schemas/PromotionUpdateRequest"
              }
            },
            "additionalProperties": false,
            "required": ["update"]
          },
          {
            "type": "object",
            "properties": {
              "approve": {
                "$ref": "#/components/schemas/PromotionApproveRequest"
              }
            },
            "additionalProperties": false,
            "required": ["approve"]
          }
        ]
      },
      "PromotionDeleteRequest": {
        "type": "object"
      },
      "PromotionParam": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "param-type": {
                "type": "string",
                "const": "query"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/PromotionQuery"
              }
            ],
            "required": ["param-type"]
          },
          {
            "type": "object",
            "properties": {
              "param-type": {
                "type": "string",
                "const": "read"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/PromotionReadAction"
              }
            ],
            "required": ["param-type"]
          }
        ]
      },
      "PromotionPath": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["id"]
      },
      "PromotionPromoteFeedRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "end_at": {
            "type": "integer",
            "format": "int64"
          },
          "feed_id": {
            "type": "integer",
            "format": "int64"
          },
          "image_url": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "start_at": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "name",
          "description",
          "image_url",
          "start_at",
          "end_at",
          "feed_id"
        ]
      },
      "PromotionQuery": {
        "type": "object",
        "properties": {
          "bookmark": {
            "type": ["string", "null"]
          },
          "size": {
            "type": "integer",
            "format": "uint",
            "default": 0,
            "minimum": 0
          }
        }
      },
      "PromotionReadAction": {
        "type": "object",
        "properties": {
          "action": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PromotionReadActionType"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "PromotionReadActionType": {
        "type": "string",
        "enum": ["hot-promotion"]
      },
      "PromotionUpdateRequest": {
        "type": "object"
      },
      "Provider": {
        "type": "string",
        "enum": ["Google"]
      },
      "PublishingScope": {
        "type": "string",
        "enum": ["Private", "Public"]
      },
      "QueryStyle": {
        "type": "string",
        "enum": ["form", "spaceDelimited", "pipeDelimited", "deepObject"]
      },
      "Question": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "answer_type": {
                "type": "string",
                "const": "single_choice"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/ChoiceQuestion2"
              }
            ],
            "required": ["answer_type"]
          },
          {
            "type": "object",
            "properties": {
              "answer_type": {
                "type": "string",
                "const": "multiple_choice"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/ChoiceQuestion2"
              }
            ],
            "required": ["answer_type"]
          },
          {
            "type": "object",
            "properties": {
              "answer_type": {
                "type": "string",
                "const": "short_answer"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SubjectiveQuestion2"
              }
            ],
            "required": ["answer_type"]
          },
          {
            "type": "object",
            "properties": {
              "answer_type": {
                "type": "string",
                "const": "subjective"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SubjectiveQuestion2"
              }
            ],
            "required": ["answer_type"]
          },
          {
            "type": "object",
            "properties": {
              "answer_type": {
                "type": "string",
                "const": "checkbox"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/CheckboxQuestion2"
              }
            ],
            "required": ["answer_type"]
          },
          {
            "type": "object",
            "properties": {
              "answer_type": {
                "type": "string",
                "const": "dropdown"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/DropdownQuestion2"
              }
            ],
            "required": ["answer_type"]
          },
          {
            "type": "object",
            "properties": {
              "answer_type": {
                "type": "string",
                "const": "linear_scale"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/LinearScaleQuestion2"
              }
            ],
            "required": ["answer_type"]
          }
        ]
      },
      "RedeemCodeByIdAction": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "use_code": {
                "$ref": "#/components/schemas/RedeemCodeUseCodeRequest"
              }
            },
            "additionalProperties": false,
            "required": ["use_code"]
          }
        ]
      },
      "RedeemCodeByIdPath": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["id"]
      },
      "RedeemCodeUseCodeRequest": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          }
        },
        "required": ["code"]
      },
      "ReferenceOr": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "$ref": {
                "description": "REQUIRED. The reference identifier. This MUST be in the form of a\nURI.",
                "type": "string"
              },
              "description": {
                "description": "A description which by default SHOULD override that of the\nreferenced component. CommonMark syntax MAY be used for rich text\nrepresentation. If the referenced object-type does not allow a\n`description` field, then this field has no effect.",
                "type": ["string", "null"]
              },
              "summary": {
                "description": "A short summary which by default SHOULD override that of the\nreferenced component. If the referenced object-type does not allow a\n`summary` field, then this field has no effect.",
                "type": ["string", "null"]
              }
            },
            "required": ["$ref"]
          },
          {
            "$ref": "#/components/schemas/PathItem"
          }
        ]
      },
      "ReferenceOr2": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "$ref": {
                "description": "REQUIRED. The reference identifier. This MUST be in the form of a\nURI.",
                "type": "string"
              },
              "description": {
                "description": "A description which by default SHOULD override that of the\nreferenced component. CommonMark syntax MAY be used for rich text\nrepresentation. If the referenced object-type does not allow a\n`description` field, then this field has no effect.",
                "type": ["string", "null"]
              },
              "summary": {
                "description": "A short summary which by default SHOULD override that of the\nreferenced component. If the referenced object-type does not allow a\n`summary` field, then this field has no effect.",
                "type": ["string", "null"]
              }
            },
            "required": ["$ref"]
          },
          {
            "$ref": "#/components/schemas/Parameter"
          }
        ]
      },
      "ReferenceOr3": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "$ref": {
                "description": "REQUIRED. The reference identifier. This MUST be in the form of a\nURI.",
                "type": "string"
              },
              "description": {
                "description": "A description which by default SHOULD override that of the\nreferenced component. CommonMark syntax MAY be used for rich text\nrepresentation. If the referenced object-type does not allow a\n`description` field, then this field has no effect.",
                "type": ["string", "null"]
              },
              "summary": {
                "description": "A short summary which by default SHOULD override that of the\nreferenced component. If the referenced object-type does not allow a\n`summary` field, then this field has no effect.",
                "type": ["string", "null"]
              }
            },
            "required": ["$ref"]
          },
          {
            "$ref": "#/components/schemas/Example"
          }
        ]
      },
      "ReferenceOr4": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "$ref": {
                "description": "REQUIRED. The reference identifier. This MUST be in the form of a\nURI.",
                "type": "string"
              },
              "description": {
                "description": "A description which by default SHOULD override that of the\nreferenced component. CommonMark syntax MAY be used for rich text\nrepresentation. If the referenced object-type does not allow a\n`description` field, then this field has no effect.",
                "type": ["string", "null"]
              },
              "summary": {
                "description": "A short summary which by default SHOULD override that of the\nreferenced component. If the referenced object-type does not allow a\n`summary` field, then this field has no effect.",
                "type": ["string", "null"]
              }
            },
            "required": ["$ref"]
          },
          {
            "$ref": "#/components/schemas/Header"
          }
        ]
      },
      "ReferenceOr5": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "$ref": {
                "description": "REQUIRED. The reference identifier. This MUST be in the form of a\nURI.",
                "type": "string"
              },
              "description": {
                "description": "A description which by default SHOULD override that of the\nreferenced component. CommonMark syntax MAY be used for rich text\nrepresentation. If the referenced object-type does not allow a\n`description` field, then this field has no effect.",
                "type": ["string", "null"]
              },
              "summary": {
                "description": "A short summary which by default SHOULD override that of the\nreferenced component. If the referenced object-type does not allow a\n`summary` field, then this field has no effect.",
                "type": ["string", "null"]
              }
            },
            "required": ["$ref"]
          },
          {
            "$ref": "#/components/schemas/RequestBody"
          }
        ]
      },
      "ReferenceOr6": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "$ref": {
                "description": "REQUIRED. The reference identifier. This MUST be in the form of a\nURI.",
                "type": "string"
              },
              "description": {
                "description": "A description which by default SHOULD override that of the\nreferenced component. CommonMark syntax MAY be used for rich text\nrepresentation. If the referenced object-type does not allow a\n`description` field, then this field has no effect.",
                "type": ["string", "null"]
              },
              "summary": {
                "description": "A short summary which by default SHOULD override that of the\nreferenced component. If the referenced object-type does not allow a\n`summary` field, then this field has no effect.",
                "type": ["string", "null"]
              }
            },
            "required": ["$ref"]
          },
          {
            "$ref": "#/components/schemas/Response"
          }
        ]
      },
      "ReferenceOr7": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "$ref": {
                "description": "REQUIRED. The reference identifier. This MUST be in the form of a\nURI.",
                "type": "string"
              },
              "description": {
                "description": "A description which by default SHOULD override that of the\nreferenced component. CommonMark syntax MAY be used for rich text\nrepresentation. If the referenced object-type does not allow a\n`description` field, then this field has no effect.",
                "type": ["string", "null"]
              },
              "summary": {
                "description": "A short summary which by default SHOULD override that of the\nreferenced component. If the referenced object-type does not allow a\n`summary` field, then this field has no effect.",
                "type": ["string", "null"]
              }
            },
            "required": ["$ref"]
          },
          {
            "$ref": "#/components/schemas/Link"
          }
        ]
      },
      "ReferenceOr8": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "$ref": {
                "description": "REQUIRED. The reference identifier. This MUST be in the form of a\nURI.",
                "type": "string"
              },
              "description": {
                "description": "A description which by default SHOULD override that of the\nreferenced component. CommonMark syntax MAY be used for rich text\nrepresentation. If the referenced object-type does not allow a\n`description` field, then this field has no effect.",
                "type": ["string", "null"]
              },
              "summary": {
                "description": "A short summary which by default SHOULD override that of the\nreferenced component. If the referenced object-type does not allow a\n`summary` field, then this field has no effect.",
                "type": ["string", "null"]
              }
            },
            "required": ["$ref"]
          },
          {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ReferenceOr"
            }
          }
        ]
      },
      "ReferenceOr9": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "$ref": {
                "description": "REQUIRED. The reference identifier. This MUST be in the form of a\nURI.",
                "type": "string"
              },
              "description": {
                "description": "A description which by default SHOULD override that of the\nreferenced component. CommonMark syntax MAY be used for rich text\nrepresentation. If the referenced object-type does not allow a\n`description` field, then this field has no effect.",
                "type": ["string", "null"]
              },
              "summary": {
                "description": "A short summary which by default SHOULD override that of the\nreferenced component. If the referenced object-type does not allow a\n`summary` field, then this field has no effect.",
                "type": ["string", "null"]
              }
            },
            "required": ["$ref"]
          },
          {
            "$ref": "#/components/schemas/SecurityScheme"
          }
        ]
      },
      "RegisterUserRequest": {
        "type": "object",
        "properties": {
          "display_name": {
            "description": "User's display name shown publicly",
            "type": "string"
          },
          "phone_number": {
            "description": "unique phone number ex)01012345678 (can not be null)",
            "type": "string"
          },
          "principal": {
            "description": "Principal of ICP (Internet Computer Protocol)",
            "type": "string"
          },
          "profile_url": {
            "description": "Optional profile url (can be null)",
            "type": ["string", "null"]
          },
          "username": {
            "description": "Optional unique username (can be null)",
            "type": ["string", "null"]
          }
        },
        "required": ["display_name", "principal", "phone_number"]
      },
      "RegisterUserResponse": {
        "type": "object",
        "properties": {
          "principal": {
            "description": "Principal of ICP (Internet Computer Protocol)",
            "type": "string"
          },
          "user_id": {
            "description": "User ID in Ratel",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["user_id", "principal"]
      },
      "RejectInvitationRequest": {
        "type": "object",
        "properties": {
          "followee_id": {
            "type": "integer",
            "format": "int64"
          },
          "invitation_ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "required": ["invitation_ids", "followee_id"]
      },
      "RejectSuggestionRequest": {
        "type": "object",
        "properties": {
          "followee_id": {
            "description": "Followee ID",
            "type": "integer",
            "format": "int64"
          },
          "suggestion_ids": {
            "description": "Total Suggestion IDs",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "required": ["suggestion_ids", "followee_id"]
      },
      "RemoveBookmarkRequest": {
        "type": "object",
        "properties": {
          "feed_id": {
            "description": "Feed ID",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["feed_id"]
      },
      "RemoveMemberPathParams": {
        "type": "object",
        "properties": {
          "group_sk": {
            "description": "Group SK to be updated",
            "type": "string"
          },
          "team_pk": {
            "description": "Team PK to be updated",
            "type": "string"
          }
        },
        "required": ["team_pk", "group_sk"]
      },
      "RemoveMemberRequest": {
        "type": "object",
        "properties": {
          "user_pks": {
            "description": "User PKs to remove from the group",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["user_pks"]
      },
      "RequestBody": {
        "type": "object",
        "properties": {
          "content": {
            "description": "REQUIRED. The content of the request body.\nThe key is a media type or media type range and\nthe value describes it. For requests that match\nmultiple keys, only the most specific key is applicable.\n e.g. text/plain overrides text/*",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/MediaType"
            }
          },
          "description": {
            "description": "A brief description of the request body.\nThis could contain examples of use.\nCommonMark syntax MAY be used for rich text representation.",
            "type": ["string", "null"]
          },
          "required": {
            "description": "Determines if the request body is required in the\nrequest. Defaults to false.",
            "type": "boolean"
          }
        },
        "additionalProperties": true
      },
      "Response": {
        "type": "object",
        "properties": {
          "content": {
            "description": "A map containing descriptions of potential response payloads.\nThe key is a media type or media type range and the value\ndescribes it. For responses that match multiple keys,\nonly the most specific key is applicable. e.g. text/plain\noverrides text/*",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/MediaType"
            }
          },
          "description": {
            "description": "REQUIRED. A description of the response.\nCommonMark syntax MAY be used for rich text representation.",
            "type": "string"
          },
          "headers": {
            "description": "Maps a header name to its definition.\nRFC7230 states header names are case insensitive.\nIf a response header is defined with the name \"Content-Type\",\nit SHALL be ignored.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ReferenceOr4"
            }
          },
          "links": {
            "description": "A map of operations links that can be followed from the response.\nThe key of the map is a short name for the link, following\nthe naming constraints of the names for Component Objects.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ReferenceOr7"
            }
          }
        },
        "additionalProperties": true,
        "required": ["description"]
      },
      "Responses": {
        "type": "object",
        "properties": {
          "default": {
            "description": "The documentation of responses other than the ones declared\nfor specific HTTP response codes. Use this field to cover\nundeclared responses.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/ReferenceOr6"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": {
          "$ref": "#/components/schemas/ReferenceOr6"
        }
      },
      "SchemaObject": {
        "type": "object",
        "properties": {
          "example": {
            "description": "A free-form property to include an example of an instance for this\nschema. To represent examples that cannot be naturally represented in\nJSON or YAML, a string value can be used to contain the example with\nescaping where necessary. **Deprecated:** The `example` property has\nbeen deprecated in favor of the JSON Schema `examples` keyword. Use\nof `example` is discouraged, and later versions of this\nspecification may remove it."
          },
          "externalDocs": {
            "description": "Additional external documentation for this schema.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/ExternalDocumentation"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "SearchQuery": {
        "type": "object",
        "properties": {
          "keyword": {
            "description": "Search Keyword",
            "type": ["string", "null"]
          }
        }
      },
      "SecurityScheme": {
        "description": "Defines a security scheme that can be used by the operations.\nSupported schemes are HTTP authentication, an API key (either as a\nheader or as a query parameter), OAuth2's common flows (implicit, password,\napplication and access code) as defined in RFC6749, and OpenID Connect\nDiscovery.",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "description": {
                "type": ["string", "null"]
              },
              "in": {
                "$ref": "#/components/schemas/ApiKeyLocation"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "const": "apiKey"
              }
            },
            "additionalProperties": true,
            "required": ["type", "in", "name"]
          },
          {
            "type": "object",
            "properties": {
              "bearerFormat": {
                "type": ["string", "null"]
              },
              "description": {
                "type": ["string", "null"]
              },
              "scheme": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "const": "http"
              }
            },
            "additionalProperties": true,
            "required": ["type", "scheme"]
          },
          {
            "type": "object",
            "properties": {
              "description": {
                "type": ["string", "null"]
              },
              "flows": {
                "$ref": "#/components/schemas/OAuth2Flows"
              },
              "type": {
                "type": "string",
                "const": "oauth2"
              }
            },
            "additionalProperties": true,
            "required": ["type", "flows"]
          },
          {
            "type": "object",
            "properties": {
              "description": {
                "type": ["string", "null"]
              },
              "openIdConnectUrl": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "const": "openIdConnect"
              }
            },
            "additionalProperties": true,
            "required": ["type", "openIdConnectUrl"]
          },
          {
            "type": "object",
            "properties": {
              "description": {
                "type": ["string", "null"]
              },
              "type": {
                "type": "string",
                "const": "mutualTLS"
              }
            },
            "additionalProperties": true,
            "required": ["type"]
          }
        ]
      },
      "SelectTopicsRequest": {
        "type": "object",
        "properties": {
          "topics": {
            "description": "Topic IDs",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "required": ["topics"]
      },
      "SendCodeRequest": {
        "type": "object",
        "properties": {
          "email": {
            "description": "User's email address",
            "type": "string",
            "format": "email"
          }
        },
        "required": ["email"]
      },
      "SendCodeResponse": {
        "type": "object",
        "properties": {
          "expired_at": {
            "description": "Expiration time of the verification code.",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["expired_at"]
      },
      "Server": {
        "description": "An object representing a Server.",
        "type": "object",
        "properties": {
          "description": {
            "description": "An optional string describing the host designated\nby the URL. CommonMark syntax MAY be used for rich\ntext representation.",
            "type": ["string", "null"]
          },
          "url": {
            "description": "REQUIRED. A URL to the target host.\nThis URL supports Server Variables and MAY be relative,\nto indicate that the host location is relative to the\nlocation where the OpenAPI document is being served.\nVariable substitutions will be made when a variable\nis named in {brackets}.",
            "type": "string"
          },
          "variables": {
            "description": "A map between a variable name and its value.\nThe value is used for substitution in the server's URL template.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ServerVariable"
            }
          }
        },
        "additionalProperties": true,
        "required": ["url"]
      },
      "ServerVariable": {
        "description": "An object representing a Server Variable\nfor server URL template substitution.",
        "type": "object",
        "properties": {
          "default": {
            "description": "REQUIRED. The default value to use for substitution,\nand to send, if an alternate value is not supplied.\nUnlike the Schema Object's default, this value MUST\nbe provided by the consumer.",
            "type": "string"
          },
          "description": {
            "description": "An optional description for the server\nvariable. CommonMark syntax MAY be used\nfor rich text representation.",
            "type": ["string", "null"]
          },
          "enum": {
            "description": "An enumeration of string values to be\nused if the substitution options are from a limited set.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": true,
        "required": ["default"]
      },
      "SignupRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "evm_address": {
            "type": ["string", "null"]
          },
          "informed_agreed": {
            "type": "boolean"
          },
          "phone_number": {
            "type": ["string", "null"]
          },
          "profile_url": {
            "type": "string"
          },
          "term_agreed": {
            "type": "boolean"
          },
          "username": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "code": {
                "type": "string"
              },
              "email": {
                "type": "string",
                "format": "email"
              },
              "password": {
                "type": "string"
              }
            },
            "required": ["email", "password", "code"]
          },
          {
            "type": "object",
            "properties": {
              "access_token": {
                "type": "string"
              },
              "provider": {
                "$ref": "#/components/schemas/Provider"
              }
            },
            "required": ["provider", "access_token"]
          },
          {
            "type": "object",
            "properties": {
              "telegram_raw": {
                "type": "string"
              }
            },
            "required": ["telegram_raw"]
          }
        ],
        "required": [
          "display_name",
          "username",
          "profile_url",
          "description",
          "term_agreed",
          "informed_agreed"
        ]
      },
      "SortedVisibility": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "Draft": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["Draft"]
          },
          {
            "type": "object",
            "properties": {
              "Public": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["Public"]
          },
          {
            "type": "object",
            "properties": {
              "TeamOnly": {
                "type": "array",
                "items": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false,
            "required": ["TeamOnly"]
          }
        ]
      },
      "SpaceAction": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "create_space": {
                "$ref": "#/components/schemas/SpaceCreateSpaceRequest"
              }
            },
            "additionalProperties": false,
            "required": ["create_space"]
          }
        ]
      },
      "SpaceBadgeAction": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "create": {
                "$ref": "#/components/schemas/SpaceBadgeCreateRequest"
              }
            },
            "additionalProperties": false,
            "required": ["create"]
          },
          {
            "type": "object",
            "properties": {
              "claim": {
                "$ref": "#/components/schemas/SpaceBadgeClaimRequest"
              }
            },
            "additionalProperties": false,
            "required": ["claim"]
          }
        ]
      },
      "SpaceBadgeClaimRequest": {
        "type": "object",
        "properties": {
          "evm_address": {
            "type": "string"
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "required": ["ids", "evm_address"]
      },
      "SpaceBadgeCreateRequest": {
        "type": "object",
        "properties": {
          "badges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BadgeCreateRequest"
            }
          }
        },
        "required": ["badges"]
      },
      "SpaceBadgeParam": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "param-type": {
                "type": "string",
                "const": "query"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SpaceBadgeQuery"
              }
            ],
            "required": ["param-type"]
          }
        ]
      },
      "SpaceBadgeParentPath": {
        "type": "object",
        "properties": {
          "space-id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["space-id"]
      },
      "SpaceBadgeQuery": {
        "type": "object",
        "properties": {
          "bookmark": {
            "type": ["string", "null"]
          },
          "size": {
            "type": "integer",
            "format": "uint",
            "default": 0,
            "minimum": 0
          }
        }
      },
      "SpaceByIdAction": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "delete": {
                "$ref": "#/components/schemas/SpaceDeleteRequest"
              }
            },
            "additionalProperties": false,
            "required": ["delete"]
          },
          {
            "type": "object",
            "properties": {
              "posting_space": {
                "$ref": "#/components/schemas/SpacePostingSpaceRequest"
              }
            },
            "additionalProperties": false,
            "required": ["posting_space"]
          },
          {
            "type": "object",
            "properties": {
              "update_space": {
                "$ref": "#/components/schemas/SpaceUpdateSpaceRequest"
              }
            },
            "additionalProperties": false,
            "required": ["update_space"]
          },
          {
            "type": "object",
            "properties": {
              "like": {
                "$ref": "#/components/schemas/SpaceLikeRequest"
              }
            },
            "additionalProperties": false,
            "required": ["like"]
          },
          {
            "type": "object",
            "properties": {
              "share": {
                "$ref": "#/components/schemas/SpaceShareRequest"
              }
            },
            "additionalProperties": false,
            "required": ["share"]
          }
        ]
      },
      "SpaceCommentParam": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "param-type": {
                "type": "string",
                "const": "query"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SpaceCommentQuery"
              }
            ],
            "required": ["param-type"]
          }
        ]
      },
      "SpaceCommentParentPath": {
        "type": "object",
        "properties": {
          "space-id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["space-id"]
      },
      "SpaceCommentQuery": {
        "type": "object",
        "properties": {
          "bookmark": {
            "type": ["string", "null"]
          },
          "size": {
            "type": "integer",
            "format": "uint",
            "default": 0,
            "minimum": 0
          }
        }
      },
      "SpaceCreateSpaceRequest": {
        "type": "object",
        "properties": {
          "booster_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BoosterType2"
              },
              {
                "type": "null"
              }
            ]
          },
          "ended_at": {
            "type": ["integer", "null"],
            "format": "int64"
          },
          "feed_id": {
            "type": "integer",
            "format": "int64"
          },
          "num_of_redeem_codes": {
            "type": "integer",
            "format": "int64"
          },
          "space_type": {
            "$ref": "#/components/schemas/SpaceType"
          },
          "started_at": {
            "type": ["integer", "null"],
            "format": "int64"
          },
          "user_ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "required": ["space_type", "feed_id", "num_of_redeem_codes", "user_ids"]
      },
      "SpaceDeleteConfirmation": {
        "type": "object",
        "properties": {
          "confirmation": {
            "type": "boolean"
          },
          "space_name": {
            "type": "string"
          }
        },
        "required": ["confirmation", "space_name"]
      },
      "SpaceDeleteRequest": {
        "type": "object",
        "properties": {
          "confirmation": {
            "type": "boolean"
          },
          "space_name": {
            "type": "string"
          }
        },
        "required": ["confirmation", "space_name"]
      },
      "SpaceDiscussionParentPath": {
        "type": "object",
        "properties": {
          "space-id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["space-id"]
      },
      "SpaceDiscussionPath": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "space-id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["space-id", "id"]
      },
      "SpaceDraftCreateRequest": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File2"
            }
          },
          "html_contents": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "required": ["title", "html_contents", "files"]
      },
      "SpaceIdPath": {
        "type": "object",
        "properties": {
          "space-id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["space-id"]
      },
      "SpaceIdPath2": {
        "type": "object",
        "properties": {
          "space-id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["space-id"]
      },
      "SpaceLikeRequest": {
        "type": "object",
        "properties": {
          "value": {
            "type": "boolean"
          }
        },
        "required": ["value"]
      },
      "SpaceParam": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "param-type": {
                "type": "string",
                "const": "query"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SpaceQuery"
              }
            ],
            "required": ["param-type"]
          },
          {
            "type": "object",
            "properties": {
              "param-type": {
                "type": "string",
                "const": "read"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SpaceReadAction"
              }
            ],
            "required": ["param-type"]
          }
        ]
      },
      "SpacePath": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["id"]
      },
      "SpacePostingSpaceRequest": {
        "type": "object"
      },
      "SpaceQuery": {
        "type": "object",
        "properties": {
          "bookmark": {
            "type": ["string", "null"]
          },
          "size": {
            "type": "integer",
            "format": "uint",
            "default": 0,
            "minimum": 0
          }
        }
      },
      "SpaceReadAction": {
        "type": "object",
        "properties": {
          "action": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SpaceReadActionType"
              },
              {
                "type": "null"
              }
            ]
          },
          "id": {
            "type": ["integer", "null"],
            "format": "int64",
            "default": null
          }
        }
      },
      "SpaceReadActionType": {
        "type": "string",
        "enum": ["find-by-id"]
      },
      "SpaceRedeemPath": {
        "type": "object",
        "properties": {
          "space-id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["space-id"]
      },
      "SpaceShareRequest": {
        "type": "object"
      },
      "SpaceType": {
        "type": "string",
        "enum": [
          "Legislation",
          "Poll",
          "Deliberation",
          "Nft",
          "Commitee",
          "SprintLeague",
          "Notice",
          "Dagit"
        ]
      },
      "SpaceUpdateSpaceRequest": {
        "type": "object",
        "properties": {
          "discussions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscussionCreateRequest2"
            }
          },
          "drafts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpaceDraftCreateRequest"
            }
          },
          "elearnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ElearningCreateRequest"
            }
          },
          "ended_at": {
            "type": ["integer", "null"],
            "format": "int64"
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File2"
            }
          },
          "html_contents": {
            "type": "string"
          },
          "publishing_scope": {
            "$ref": "#/components/schemas/PublishingScope"
          },
          "quiz": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NoticeQuizRequest"
              },
              {
                "type": "null"
              }
            ]
          },
          "started_at": {
            "type": ["integer", "null"],
            "format": "int64"
          },
          "surveys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SurveyCreateRequest2"
            }
          },
          "title": {
            "type": ["string", "null"]
          }
        },
        "required": [
          "html_contents",
          "files",
          "publishing_scope",
          "discussions",
          "elearnings",
          "surveys",
          "drafts"
        ]
      },
      "SpaceVisibility": {
        "oneOf": [
          {
            "type": "string",
            "enum": ["Public"]
          },
          {
            "type": "object",
            "properties": {
              "Team": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["Team"]
          },
          {
            "type": "object",
            "properties": {
              "TeamGroupMember": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["TeamGroupMember"]
          }
        ]
      },
      "SprintLeagueAction": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "create": {
                "$ref": "#/components/schemas/SprintLeagueCreateRequest"
              }
            },
            "additionalProperties": false,
            "required": ["create"]
          }
        ]
      },
      "SprintLeagueByIdAction": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "vote": {
                "$ref": "#/components/schemas/SprintLeagueVoteRequest"
              }
            },
            "additionalProperties": false,
            "required": ["vote"]
          }
        ]
      },
      "SprintLeagueByIdPath": {
        "type": "object",
        "properties": {
          "space-id": {
            "type": "integer",
            "format": "int64"
          },
          "sprint-league-id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["space-id", "sprint-league-id"]
      },
      "SprintLeagueCreateRequest": {
        "type": "object",
        "properties": {
          "players": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SprintLeaguePlayerCreateRequest"
            }
          }
        },
        "required": ["players"]
      },
      "SprintLeaguePath": {
        "type": "object",
        "properties": {
          "space-id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["space-id"]
      },
      "SprintLeaguePlayerCreateRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "player_images": {
            "$ref": "#/components/schemas/PlayerImages"
          },
          "sprint_league_id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["sprint_league_id", "name", "description", "player_images"]
      },
      "SprintLeaguePlayerPath": {
        "type": "object",
        "properties": {
          "player-id": {
            "type": "integer",
            "format": "int64"
          },
          "space-id": {
            "type": "integer",
            "format": "int64"
          },
          "sprint-league-id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["space-id", "sprint-league-id", "player-id"]
      },
      "SprintLeaguePlayerUpdateRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "player_images": {
            "$ref": "#/components/schemas/PlayerImages"
          }
        },
        "required": ["name", "description", "player_images"]
      },
      "SprintLeagueVoteRequest": {
        "type": "object",
        "properties": {
          "player_id": {
            "type": "integer",
            "format": "int64"
          },
          "referral_code": {
            "type": ["string", "null"]
          }
        },
        "required": ["player_id"]
      },
      "SpriteSheet": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string"
          },
          "json": {
            "type": "string"
          }
        },
        "required": ["json", "image"]
      },
      "SubjectiveQuestion": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "is_required": {
            "type": ["boolean", "null"]
          },
          "title": {
            "type": "string"
          }
        },
        "required": ["title", "description"]
      },
      "SubjectiveQuestion2": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "is_required": {
            "type": ["boolean", "null"]
          },
          "title": {
            "type": "string"
          }
        },
        "required": ["title", "description"]
      },
      "SubmitAnswersRequest": {
        "type": "object",
        "properties": {
          "answers": {
            "$ref": "#/components/schemas/NoticeAnswer"
          }
        },
        "required": ["answers"]
      },
      "SubscribeRequest": {
        "type": "object",
        "properties": {
          "subscribe_type": {
            "description": "Subscribe Type (1: Personal, 2: Business, 3: Enterprise)",
            "allOf": [
              {
                "$ref": "#/components/schemas/SubscribeType"
              }
            ]
          }
        },
        "required": ["subscribe_type"]
      },
      "SubscribeType": {
        "type": "string",
        "enum": ["free", "pro", "premium", "vip", "admin"]
      },
      "SubscriptionAction": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "subscribe": {
                "$ref": "#/components/schemas/SubscriptionSubscribeRequest"
              }
            },
            "additionalProperties": false,
            "required": ["subscribe"]
          },
          {
            "type": "object",
            "properties": {
              "sponsor": {
                "$ref": "#/components/schemas/SubscriptionSponsorRequest"
              }
            },
            "additionalProperties": false,
            "required": ["sponsor"]
          }
        ]
      },
      "SubscriptionParam": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "param-type": {
                "type": "string",
                "const": "query"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SubscriptionQuery"
              }
            ],
            "required": ["param-type"]
          }
        ]
      },
      "SubscriptionQuery": {
        "type": "object",
        "properties": {
          "bookmark": {
            "type": ["string", "null"]
          },
          "size": {
            "type": "integer",
            "format": "uint",
            "default": 0,
            "minimum": 0
          }
        }
      },
      "SubscriptionSponsorRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          }
        },
        "required": ["email"]
      },
      "SubscriptionSubscribeRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          }
        },
        "required": ["email"]
      },
      "SurveyAnswer": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "answer": {
                "type": ["integer", "null"],
                "format": "int32"
              },
              "answer_type": {
                "type": "string",
                "const": "single_choice"
              }
            },
            "required": ["answer_type"]
          },
          {
            "type": "object",
            "properties": {
              "answer": {
                "type": ["array", "null"],
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "answer_type": {
                "type": "string",
                "const": "multiple_choice"
              }
            },
            "required": ["answer_type"]
          },
          {
            "type": "object",
            "properties": {
              "answer": {
                "type": ["string", "null"]
              },
              "answer_type": {
                "type": "string",
                "const": "short_answer"
              }
            },
            "required": ["answer_type"]
          },
          {
            "type": "object",
            "properties": {
              "answer": {
                "type": ["string", "null"]
              },
              "answer_type": {
                "type": "string",
                "const": "subjective"
              }
            },
            "required": ["answer_type"]
          },
          {
            "type": "object",
            "properties": {
              "answer": {
                "type": ["array", "null"],
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "answer_type": {
                "type": "string",
                "const": "checkbox"
              }
            },
            "required": ["answer_type"]
          },
          {
            "type": "object",
            "properties": {
              "answer": {
                "type": ["integer", "null"],
                "format": "int32"
              },
              "answer_type": {
                "type": "string",
                "const": "dropdown"
              }
            },
            "required": ["answer_type"]
          },
          {
            "type": "object",
            "properties": {
              "answer": {
                "type": ["integer", "null"],
                "format": "int32"
              },
              "answer_type": {
                "type": "string",
                "const": "linear_scale"
              }
            },
            "required": ["answer_type"]
          }
        ]
      },
      "SurveyCreateRequest": {
        "type": "object",
        "properties": {
          "ended_at": {
            "type": "integer",
            "format": "int64"
          },
          "questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SurveyQuestion"
            }
          },
          "started_at": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "$ref": "#/components/schemas/SurveyStatus"
          },
          "survey_pk": {
            "type": ["string", "null"]
          }
        },
        "required": ["started_at", "ended_at", "status", "questions"]
      },
      "SurveyCreateRequest2": {
        "type": "object",
        "properties": {
          "ended_at": {
            "type": "integer",
            "format": "int64"
          },
          "questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Question"
            }
          },
          "started_at": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["started_at", "ended_at", "questions"]
      },
      "SurveyQuestion": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "answer_type": {
                "type": "string",
                "const": "single_choice"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/ChoiceQuestion"
              }
            ],
            "required": ["answer_type"]
          },
          {
            "type": "object",
            "properties": {
              "answer_type": {
                "type": "string",
                "const": "multiple_choice"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/ChoiceQuestion"
              }
            ],
            "required": ["answer_type"]
          },
          {
            "type": "object",
            "properties": {
              "answer_type": {
                "type": "string",
                "const": "short_answer"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SubjectiveQuestion"
              }
            ],
            "required": ["answer_type"]
          },
          {
            "type": "object",
            "properties": {
              "answer_type": {
                "type": "string",
                "const": "subjective"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SubjectiveQuestion"
              }
            ],
            "required": ["answer_type"]
          },
          {
            "type": "object",
            "properties": {
              "answer_type": {
                "type": "string",
                "const": "checkbox"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/CheckboxQuestion"
              }
            ],
            "required": ["answer_type"]
          },
          {
            "type": "object",
            "properties": {
              "answer_type": {
                "type": "string",
                "const": "dropdown"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/DropdownQuestion"
              }
            ],
            "required": ["answer_type"]
          },
          {
            "type": "object",
            "properties": {
              "answer_type": {
                "type": "string",
                "const": "linear_scale"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/LinearScaleQuestion"
              }
            ],
            "required": ["answer_type"]
          }
        ]
      },
      "SurveyResponseAction": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "respond_answer": {
                "$ref": "#/components/schemas/SurveyResponseRespondAnswerRequest"
              }
            },
            "additionalProperties": false,
            "required": ["respond_answer"]
          }
        ]
      },
      "SurveyResponseByIdAction": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "remove_respond_answer": {
                "$ref": "#/components/schemas/SurveyResponseRemoveRespondAnswerRequest"
              }
            },
            "additionalProperties": false,
            "required": ["remove_respond_answer"]
          },
          {
            "type": "object",
            "properties": {
              "update_respond_answer": {
                "$ref": "#/components/schemas/SurveyResponseUpdateRespondAnswerRequest"
              }
            },
            "additionalProperties": false,
            "required": ["update_respond_answer"]
          }
        ]
      },
      "SurveyResponseParam": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "param-type": {
                "type": "string",
                "const": "query"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SurveyResponseQuery"
              }
            ],
            "required": ["param-type"]
          }
        ]
      },
      "SurveyResponseParentPath": {
        "type": "object",
        "properties": {
          "space-id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["space-id"]
      },
      "SurveyResponsePath": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "space-id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["space-id", "id"]
      },
      "SurveyResponseQuery": {
        "type": "object",
        "properties": {
          "bookmark": {
            "type": ["string", "null"]
          },
          "size": {
            "type": "integer",
            "format": "uint",
            "default": 0,
            "minimum": 0
          }
        }
      },
      "SurveyResponseRemoveRespondAnswerRequest": {
        "type": "object"
      },
      "SurveyResponseRespondAnswerRequest": {
        "type": "object",
        "properties": {
          "answers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Answer"
            }
          },
          "survey_type": {
            "$ref": "#/components/schemas/SurveyType2"
          }
        },
        "required": ["answers", "survey_type"]
      },
      "SurveyResponseResponse": {
        "type": "object",
        "properties": {
          "answers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SurveyAnswer"
            }
          },
          "author_display_name": {
            "type": "string"
          },
          "author_profile_url": {
            "type": "string"
          },
          "author_username": {
            "type": "string"
          },
          "pk": {
            "$ref": "#/components/schemas/Partition"
          },
          "survey_type": {
            "$ref": "#/components/schemas/SurveyType"
          },
          "user_pk": {
            "$ref": "#/components/schemas/Partition"
          }
        },
        "required": [
          "pk",
          "user_pk",
          "author_display_name",
          "author_profile_url",
          "author_username",
          "survey_type",
          "answers"
        ]
      },
      "SurveyResponseUpdateRespondAnswerRequest": {
        "type": "object",
        "properties": {
          "answers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Answer"
            }
          }
        },
        "required": ["answers"]
      },
      "SurveyStatus": {
        "type": "string",
        "enum": ["Ready", "InProgress", "Finish"]
      },
      "SurveyType": {
        "type": "string",
        "enum": ["Sample", "Survey"]
      },
      "SurveyType2": {
        "type": "string",
        "enum": ["Sample", "Survey"]
      },
      "Tag": {
        "description": "Adds metadata to a single tag that is used by the\nOperation Object. It is not mandatory to have a\nTag Object per tag defined in the Operation Object instances.",
        "type": "object",
        "properties": {
          "description": {
            "description": "A description for the tag.\nCommonMark syntax MAY be used for rich text representation.",
            "type": ["string", "null"]
          },
          "externalDocs": {
            "description": "Additional external documentation for this tag.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/ExternalDocumentation"
              },
              {
                "type": "null"
              }
            ]
          },
          "name": {
            "description": "REQUIRED. The name of the tag.",
            "type": "string"
          }
        },
        "additionalProperties": true,
        "required": ["name"]
      },
      "TeamAction": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "create": {
                "$ref": "#/components/schemas/TeamCreateRequest"
              }
            },
            "additionalProperties": false,
            "required": ["create"]
          }
        ]
      },
      "TeamByIdAction": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "delete": {
                "$ref": "#/components/schemas/TeamDeleteRequest"
              }
            },
            "additionalProperties": false,
            "required": ["delete"]
          },
          {
            "type": "object",
            "properties": {
              "invite_member": {
                "$ref": "#/components/schemas/TeamInviteMemberRequest"
              }
            },
            "additionalProperties": false,
            "required": ["invite_member"]
          },
          {
            "type": "object",
            "properties": {
              "update_profile_image": {
                "$ref": "#/components/schemas/TeamUpdateProfileImageRequest"
              }
            },
            "additionalProperties": false,
            "required": ["update_profile_image"]
          },
          {
            "type": "object",
            "properties": {
              "update_team_name": {
                "$ref": "#/components/schemas/TeamUpdateTeamNameRequest"
              }
            },
            "additionalProperties": false,
            "required": ["update_team_name"]
          }
        ]
      },
      "TeamCreateRequest": {
        "type": "object",
        "properties": {
          "html_contents": {
            "type": "string"
          },
          "nickname": {
            "type": "string"
          },
          "profile_url": {
            "type": "string",
            "format": "uri"
          },
          "username": {
            "type": "string"
          }
        },
        "required": ["nickname", "profile_url", "username", "html_contents"]
      },
      "TeamDeleteRequest": {
        "type": "object"
      },
      "TeamDetailResponse": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "groups": {
            "type": ["array", "null"],
            "items": {
              "$ref": "#/components/schemas/TeamGroupResponse"
            }
          },
          "html_contents": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "nickname": {
            "type": "string"
          },
          "owner": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TeamOwnerResponse"
              },
              {
                "type": "null"
              }
            ]
          },
          "profile_url": {
            "type": ["string", "null"]
          },
          "updated_at": {
            "type": "integer",
            "format": "int64"
          },
          "user_type": {
            "type": "integer",
            "format": "uint8",
            "maximum": 255,
            "minimum": 0
          },
          "username": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "nickname",
          "username",
          "user_type",
          "html_contents"
        ]
      },
      "TeamGroupPermission": {
        "type": "string",
        "enum": [
          "PostRead",
          "PostWrite",
          "PostEdit",
          "PostDelete",
          "SpaceRead",
          "SpaceWrite",
          "SpaceEdit",
          "SpaceDelete",
          "TeamAdmin",
          "TeamEdit",
          "GroupEdit",
          "ManagePromotions",
          "ManageNews"
        ]
      },
      "TeamGroupResponse": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "members": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "permissions": {
            "type": "integer",
            "format": "int64"
          },
          "sk": {
            "type": "string"
          }
        },
        "required": ["sk", "name", "description", "members", "permissions"]
      },
      "TeamInviteMemberRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": ["email"]
      },
      "TeamOwnerResponse": {
        "type": "object",
        "properties": {
          "display_name": {
            "type": "string"
          },
          "profile_url": {
            "type": "string"
          },
          "user_pk": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "required": ["user_pk", "display_name", "profile_url", "username"]
      },
      "TeamParam": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "param-type": {
                "type": "string",
                "const": "query"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/TeamQuery"
              }
            ],
            "required": ["param-type"]
          },
          {
            "type": "object",
            "properties": {
              "param-type": {
                "type": "string",
                "const": "read"
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/TeamReadAction"
              }
            ],
            "required": ["param-type"]
          }
        ]
      },
      "TeamPath": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["id"]
      },
      "TeamQuery": {
        "type": "object",
        "properties": {
          "bookmark": {
            "type": ["string", "null"]
          },
          "size": {
            "type": "integer",
            "format": "uint",
            "default": 0,
            "minimum": 0
          }
        }
      },
      "TeamReadAction": {
        "type": "object",
        "properties": {
          "action": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TeamReadActionType"
              },
              {
                "type": "null"
              }
            ]
          },
          "email": {
            "type": ["string", "null"]
          },
          "id": {
            "type": ["integer", "null"],
            "format": "int64",
            "default": null
          },
          "username": {
            "type": ["string", "null"]
          }
        }
      },
      "TeamReadActionType": {
        "type": "string",
        "enum": [
          "get-by-id",
          "check-email",
          "login",
          "find-by-email",
          "get-by-username"
        ]
      },
      "TeamResponse": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "html_contents": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "nickname": {
            "type": "string"
          },
          "profile_url": {
            "type": ["string", "null"]
          },
          "updated_at": {
            "type": "integer",
            "format": "int64"
          },
          "user_type": {
            "type": "integer",
            "format": "uint8",
            "maximum": 255,
            "minimum": 0
          },
          "username": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "nickname",
          "username",
          "user_type",
          "html_contents"
        ]
      },
      "TeamUpdateProfileImageRequest": {
        "type": "object",
        "properties": {
          "profile_url": {
            "type": "string",
            "format": "uri"
          }
        },
        "required": ["profile_url"]
      },
      "TeamUpdateTeamNameRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          }
        },
        "required": ["username"]
      },
      "Theme": {
        "type": "integer",
        "enum": [1, 2, 3]
      },
      "Theme2": {
        "type": "string",
        "enum": ["Light", "Dark", "SystemDefault"]
      },
      "UpdateDeliberationRequest": {
        "type": "object",
        "properties": {
          "discussions": {
            "description": "Discussion informations",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscussionCreateRequest"
            }
          },
          "elearning_files": {
            "description": "Deliberation elearning files",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            }
          },
          "ended_at": {
            "description": "Deliberation end date",
            "type": "integer",
            "format": "int64"
          },
          "files": {
            "description": "Deliberation summary files",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            }
          },
          "html_contents": {
            "description": "Deliberation HTML contents",
            "type": ["string", "null"]
          },
          "recommendation_files": {
            "description": "Final Recommendation files",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            }
          },
          "recommendation_html_contents": {
            "description": "Final Recommendation HTML contents",
            "type": ["string", "null"]
          },
          "started_at": {
            "description": "Deliberation start date",
            "type": "integer",
            "format": "int64"
          },
          "surveys": {
            "description": "Deliberation surveys",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SurveyCreateRequest"
            }
          },
          "title": {
            "description": "Deliberation title",
            "type": ["string", "null"]
          },
          "visibility": {
            "description": "Deliberation visibility",
            "allOf": [
              {
                "$ref": "#/components/schemas/SpaceVisibility"
              }
            ]
          }
        },
        "required": [
          "files",
          "discussions",
          "elearning_files",
          "surveys",
          "recommendation_files",
          "visibility",
          "started_at",
          "ended_at"
        ]
      },
      "UpdateGroupPathParams": {
        "type": "object",
        "properties": {
          "group_sk": {
            "description": "Group SK to be updated",
            "type": "string"
          },
          "team_pk": {
            "description": "Team PK to be updated",
            "type": "string"
          }
        },
        "required": ["team_pk", "group_sk"]
      },
      "UpdateGroupRequest": {
        "type": "object",
        "properties": {
          "description": {
            "description": "Group description to update",
            "type": ["string", "null"]
          },
          "name": {
            "description": "Group name to update",
            "type": ["string", "null"]
          },
          "permissions": {
            "description": "Group permissions to update",
            "type": ["array", "null"],
            "items": {
              "$ref": "#/components/schemas/TeamGroupPermission"
            }
          }
        }
      },
      "UpdatePostParams": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["id"]
      },
      "UpdatePostPathParams": {
        "type": "object",
        "properties": {
          "post_pk": {
            "type": "string"
          }
        },
        "required": ["post_pk"]
      },
      "UpdatePostRequest": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "Post": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  }
                },
                "required": ["title", "content"]
              }
            },
            "additionalProperties": false,
            "required": ["Post"]
          },
          {
            "type": "object",
            "properties": {
              "Artwork": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  }
                },
                "required": ["title", "content"]
              }
            },
            "additionalProperties": false,
            "required": ["Artwork"]
          },
          {
            "type": "object",
            "properties": {
              "Visibility": {
                "type": "object",
                "properties": {
                  "status": {
                    "$ref": "#/components/schemas/PostStatus"
                  },
                  "visibility": {
                    "$ref": "#/components/schemas/UpdateVisibility"
                  }
                },
                "required": ["status", "visibility"]
              }
            },
            "additionalProperties": false,
            "required": ["Visibility"]
          }
        ]
      },
      "UpdatePostRequest2": {
        "type": "object",
        "properties": {
          "artwork_metadata": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ArtworkMetadata"
              },
              {
                "type": "null"
              }
            ]
          },
          "feed_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FeedType"
              },
              {
                "type": "null"
              }
            ]
          },
          "files": {
            "type": ["array", "null"],
            "items": {
              "$ref": "#/components/schemas/File2"
            }
          },
          "html_contents": {
            "type": ["string", "null"]
          },
          "industry_id": {
            "type": ["integer", "null"],
            "format": "int64"
          },
          "rewards": {
            "type": ["integer", "null"],
            "format": "int64"
          },
          "team_id": {
            "type": ["integer", "null"],
            "format": "int64"
          },
          "title": {
            "type": ["string", "null"]
          },
          "url": {
            "type": ["string", "null"]
          },
          "url_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UrlType"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "UpdateTeamPathParams": {
        "type": "object",
        "properties": {
          "team_pk": {
            "description": "Team PK to be updated",
            "type": "string"
          }
        },
        "required": ["team_pk"]
      },
      "UpdateTeamRequest": {
        "type": "object",
        "properties": {
          "description": {
            "description": "Team description to update",
            "type": ["string", "null"]
          },
          "nickname": {
            "description": "Team display name to update",
            "type": ["string", "null"]
          },
          "profile_url": {
            "description": "Team profile URL to update",
            "type": ["string", "null"]
          }
        }
      },
      "UpdateUserRequest": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "Profile": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "User description to update",
                    "type": "string"
                  },
                  "nickname": {
                    "description": "User Nickname to update",
                    "type": "string"
                  },
                  "profile_url": {
                    "description": "User profile URL to update",
                    "type": "string"
                  }
                },
                "required": ["nickname", "profile_url", "description"]
              }
            },
            "additionalProperties": false,
            "required": ["Profile"]
          },
          {
            "description": "User Theme (\"light\" or \"dark\") to update",
            "type": "object",
            "properties": {
              "Theme": {
                "type": "object",
                "properties": {
                  "theme": {
                    "$ref": "#/components/schemas/Theme"
                  }
                },
                "required": ["theme"]
              }
            },
            "additionalProperties": false,
            "required": ["Theme"]
          },
          {
            "type": "object",
            "properties": {
              "EvmAddress": {
                "type": "object",
                "properties": {
                  "evm_address": {
                    "type": "string"
                  }
                },
                "required": ["evm_address"]
              }
            },
            "additionalProperties": false,
            "required": ["EvmAddress"]
          }
        ]
      },
      "UpdateVisibility": {
        "type": "string",
        "enum": ["TeamOnly", "Public"]
      },
      "UploadedPart": {
        "type": "object",
        "properties": {
          "etag": {
            "type": "string"
          },
          "part_number": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": ["part_number", "etag"]
      },
      "UrlType": {
        "type": "string",
        "enum": ["None", "Image"]
      },
      "UserAction": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "signup": {
                "$ref": "#/components/schemas/UserSignupRequest"
              }
            },
            "additionalProperties": false,
            "required": ["signup"]
          },
          {
            "type": "object",
            "properties": {
              "email_signup": {
                "$ref": "#/components/schemas/UserEmailSignupRequest"
              }
            },
            "additionalProperties": false,
            "required": ["email_signup"]
          },
          {
            "type": "object",
            "properties": {
              "update_telegram_id": {
                "$ref": "#/components/schemas/UserUpdateTelegramIdRequest"
              }
            },
            "additionalProperties": false,
            "required": ["update_telegram_id"]
          },
          {
            "type": "object",
            "properties": {
              "update_evm_address": {
                "$ref": "#/components/schemas/UserUpdateEvmAddressRequest"
              }
            },
            "additionalProperties": false,
            "required": ["update_evm_address"]
          }
        ]
      },
      "UserByIdAction": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "edit_profile": {
                "$ref": "#/components/schemas/UserEditProfileRequest"
              }
            },
            "additionalProperties": false,
            "required": ["edit_profile"]
          }
        ]
      },
      "UserByIdPath": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["id"]
      },
      "UserDetailResponse": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "evm_address": {
            "type": ["string", "null"]
          },
          "followers_count": {
            "type": "integer",
            "format": "int64"
          },
          "followings_count": {
            "type": "integer",
            "format": "int64"
          },
          "membership": {
            "type": "integer",
            "format": "uint8",
            "maximum": 255,
            "minimum": 0
          },
          "nickname": {
            "type": "string"
          },
          "phone_number": {
            "type": ["string", "null"]
          },
          "pk": {
            "type": "string"
          },
          "point": {
            "type": "integer",
            "format": "int64"
          },
          "principal": {
            "type": ["string", "null"]
          },
          "profile_url": {
            "type": "string"
          },
          "referral_code": {
            "type": ["string", "null"]
          },
          "teams": {
            "type": ["array", "null"],
            "items": {
              "$ref": "#/components/schemas/UserTeamResponse"
            }
          },
          "theme": {
            "type": "integer",
            "format": "uint8",
            "maximum": 255,
            "minimum": 0
          },
          "user_type": {
            "type": "integer",
            "format": "uint8",
            "maximum": 255,
            "minimum": 0
          }
        },
        "required": [
          "pk",
          "email",
          "nickname",
          "profile_url",
          "description",
          "user_type",
          "followers_count",
          "followings_count",
          "membership",
          "theme",
          "point"
        ]
      },
      "UserEditProfileRequest": {
        "type": "object",
        "properties": {
          "html_contents": {
            "type": "string"
          },
          "nickname": {
            "type": "string"
          },
          "profile_url": {
            "type": "string"
          }
        },
        "required": ["nickname", "profile_url", "html_contents"]
      },
      "UserEmailSignupRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "informed_agreed": {
            "type": "boolean"
          },
          "nickname": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "profile_url": {
            "type": "string"
          },
          "telegram_raw": {
            "type": ["string", "null"]
          },
          "term_agreed": {
            "type": "boolean"
          },
          "username": {
            "type": "string"
          }
        },
        "required": [
          "nickname",
          "email",
          "profile_url",
          "term_agreed",
          "informed_agreed",
          "username",
          "password"
        ]
      },
      "UserQuery": {
        "type": "object",
        "properties": {
          "bookmark": {
            "type": ["string", "null"]
          },
          "size": {
            "type": "integer",
            "format": "uint",
            "default": 0,
            "minimum": 0
          }
        }
      },
      "UserQuery2": {
        "type": "object",
        "properties": {
          "email": {
            "description": "Email",
            "type": ["string", "null"]
          },
          "phone-number": {
            "description": "Phone Number",
            "type": ["string", "null"]
          },
          "username": {
            "description": "Username",
            "type": ["string", "null"]
          }
        }
      },
      "UserReadAction": {
        "type": "object",
        "properties": {
          "action": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UserReadActionType"
              },
              {
                "type": "null"
              }
            ]
          },
          "email": {
            "type": ["string", "null"],
            "format": "email"
          },
          "password": {
            "type": ["string", "null"]
          },
          "phone": {
            "type": ["string", "null"]
          },
          "principal": {
            "type": ["string", "null"]
          },
          "telegram_raw": {
            "type": ["string", "null"]
          },
          "username": {
            "type": ["string", "null"]
          }
        }
      },
      "UserReadActionType": {
        "type": "string",
        "enum": [
          "user-info",
          "by-principal",
          "check-email",
          "login",
          "login-by-password",
          "find-by-email",
          "find-by-username",
          "find-by-phone-number",
          "login-by-telegram"
        ]
      },
      "UserSignupRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "evm_address": {
            "type": "string"
          },
          "informed_agreed": {
            "type": "boolean"
          },
          "nickname": {
            "type": "string"
          },
          "profile_url": {
            "type": "string"
          },
          "telegram_raw": {
            "type": ["string", "null"]
          },
          "term_agreed": {
            "type": "boolean"
          },
          "username": {
            "type": "string"
          }
        },
        "required": [
          "nickname",
          "email",
          "profile_url",
          "term_agreed",
          "informed_agreed",
          "username",
          "evm_address"
        ]
      },
      "UserTeamResponse": {
        "type": "object",
        "properties": {
          "nickname": {
            "type": "string"
          },
          "profile_url": {
            "type": "string"
          },
          "user_type": {
            "$ref": "#/components/schemas/UserType"
          },
          "username": {
            "type": "string"
          }
        },
        "required": ["nickname", "profile_url", "username", "user_type"]
      },
      "UserType": {
        "type": "integer",
        "enum": [1, 2, 3, 99]
      },
      "UserUpdateEvmAddressRequest": {
        "type": "object",
        "properties": {
          "evm_address": {
            "type": "string"
          }
        },
        "required": ["evm_address"]
      },
      "UserUpdateTelegramIdRequest": {
        "type": "object",
        "properties": {
          "telegram_raw": {
            "type": ["string", "null"]
          }
        }
      },
      "VerificationAction": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "send_verification_code": {
                "$ref": "#/components/schemas/VerificationSendVerificationCodeRequest"
              }
            },
            "additionalProperties": false,
            "required": ["send_verification_code"]
          },
          {
            "type": "object",
            "properties": {
              "verify": {
                "$ref": "#/components/schemas/VerificationVerifyRequest"
              }
            },
            "additionalProperties": false,
            "required": ["verify"]
          }
        ]
      },
      "VerificationSendVerificationCodeRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          }
        },
        "required": ["email"]
      },
      "VerificationVerifyRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "value": {
            "type": "string"
          }
        },
        "required": ["email", "value"]
      },
      "VerifyCodeRequest": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Verification code sent to user's email.",
            "type": "string"
          },
          "email": {
            "description": "Email address used for verification.",
            "type": "string"
          }
        },
        "required": ["email", "code"]
      },
      "VerifyCodeResponse": {
        "type": "object",
        "properties": {
          "success": {
            "description": "Indicates if the verification was successful.",
            "type": "boolean"
          }
        },
        "required": ["success"]
      },
      "VerifyTelegramRawRequest": {
        "type": "object",
        "properties": {
          "telegram_raw": {
            "description": "Telegram Raw for verifying Telegram ownership",
            "type": "string"
          }
        },
        "required": ["telegram_raw"]
      },
      "Visibility": {
        "oneOf": [
          {
            "type": "string",
            "enum": ["Public"]
          },
          {
            "type": "object",
            "properties": {
              "TeamOnly": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["TeamOnly"]
          }
        ]
      },
      "VoteConsensusPathParams": {
        "type": "object",
        "properties": {
          "artwork_id": {
            "description": "Artwork ID",
            "type": "integer",
            "format": "int64"
          },
          "space_id": {
            "description": "Space ID",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": ["space_id", "artwork_id"]
      },
      "VoteConsensusRequest": {
        "type": "object",
        "properties": {
          "description": {
            "description": "Additional Description of the vote",
            "type": ["string", "null"]
          },
          "vote_type": {
            "description": "Vote Type",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConsensusVoteType"
              }
            ]
          }
        },
        "required": ["vote_type"]
      }
    }
  }
}
