name: PR Testing

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [dev]

env:
  CARGO_TERM_COLOR: always

jobs:
  nextjs-web:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ts-packages/web

    outputs:
      image: ${{ steps.build.outputs.image }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and cache Docker image
        id: build
        env:
          ECR_NAME: web
          COMMIT: pr-${{ github.sha }}
        run: |
          # Build and tag image
          make docker.build

          # Save image to cache
          docker save $ECR_NAME:$COMMIT | gzip > /tmp/web-image.tar.gz
          echo "image=$ECR_NAME:$COMMIT" >> $GITHUB_OUTPUT

      - name: Cache Docker image
        uses: actions/cache@v4
        with:
          path: /tmp/web-image.tar.gz
          key: web-image-${{ github.sha }}

  main-api-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy, rustfmt
          toolchain: stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Setup test environment
        env:
          COMMIT: pr-${{ github.sha }}
        run: |
          mkdir -p .build
          docker-compose --profile infra up -d

      - name: Run Rust tests
        env:
          DYNAMO_TABLE_PREFIX: ratel-local
          ENV: test
          RUST_FLAG: "--features no-secret"
          RUSTFLAGS: "-A warnings"
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ratel
          DYNAMO_ENDPOINT: http://localhost:4566
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_REGION: us-east-1
          MIGRATE: true
        run: |
          make .build/evm-keys
          cd packages/main-api
          make test

  main-api-clean-build:
    runs-on: ubuntu-22.04

    defaults:
      run:
        working-directory: packages/main-api

    outputs:
      image: ${{ steps.build.outputs.image }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          ssh-key: ${{ secrets.PULL_KEY_REPO }}

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy, rustfmt
          target: wasm32-unknown-unknown
          toolchain: stable

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - uses: cargo-bins/cargo-binstall@main
      - name: Install toml-cli
        run: |
          cargo binstall toml-cli

      - name: Build and cache Docker image
        id: build
        env:
          AWS_REGION: ap-northeast-2
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          ENV: dev
          SERVICE: main-api
          DOMAIN: api.dev.ratel.foundation
          ECR_NAME: main-api
          COMMIT: pr-${{ github.sha }}
          MIGRATE: true
          DYNAMO_TABLE_PREFIX: ratel-local
        run: |
          # Build and tag image
          make docker.build

          # Save image to cache
          docker save $ECR_NAME:$COMMIT | gzip > /tmp/main-api-image.tar.gz
          echo "image=$ECR_NAME:$COMMIT" >> $GITHUB_OUTPUT

      - name: Cache Docker image
        uses: actions/cache@v4
        with:
          path: /tmp/main-api-image.tar.gz
          key: main-api-image-${{ github.sha }}

  main-api:
    runs-on: ubuntu-22.04

    defaults:
      run:
        working-directory: packages/main-api

    outputs:
      image: ${{ steps.build.outputs.image }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          ssh-key: ${{ secrets.PULL_KEY_REPO }}

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy, rustfmt
          target: wasm32-unknown-unknown
          toolchain: stable

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - uses: cargo-bins/cargo-binstall@main
      - name: Install toml-cli
        run: |
          cargo binstall toml-cli

      - name: Build and cache Docker image
        id: build
        env:
          AWS_REGION: ap-northeast-2
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          ENV: dev
          SERVICE: main-api
          DOMAIN: api.dev.ratel.foundation
          ECR_NAME: main-api
          COMMIT: pr-${{ github.sha }}
          MIGRATE: true
          DYNAMO_TABLE_PREFIX: ratel-local
          RUST_FLAG: "--features bypass,no-secret"
          RUSTFLAGS: "-A warnings"
        run: |
          # Build and tag image
          make docker.build

          # Save image to cache
          docker save $ECR_NAME:$COMMIT | gzip > /tmp/main-api-image.tar.gz
          echo "image=$ECR_NAME:$COMMIT" >> $GITHUB_OUTPUT

      - name: Cache Docker image
        uses: actions/cache@v4
        with:
          path: /tmp/main-api-image.tar.gz
          key: main-api-image-${{ github.sha }}

  fetcher:
    runs-on: ubuntu-latest

    outputs:
      image: ${{ steps.build.outputs.image }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          ssh-key: ${{ secrets.PULL_KEY_REPO }}

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy, rustfmt
          target: wasm32-unknown-unknown
          toolchain: stable

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - uses: cargo-bins/cargo-binstall@main
      - name: Install dependencies
        run: |
          cargo binstall toml-cli

      - name: Build and cache Docker image
        id: build
        env:
          REGION: ap-northeast-2
          ACCESS_KEY_ID: test
          SECRET_ACCESS_KEY: test
          ENV: dev
          RUST_LOG: info
          SERVICE: fetcher
          DOMAIN: fetcher-api.dev.ratel.foundation
          AUTH_DOMAIN: dev.ratel.foundation
          DATABASE_TYPE: postgres
          BASE_DOMAIN: ratel.foundation
          REPO_NAME: ratel/fetcher
          ECR_NAME: fetcher
          COMMIT: pr-${{ github.sha }}
          DYNAMO_TABLE_PREFIX: ratel-local
        run: |
          npm i -g aws-cdk
          cd packages/fetcher
          # Build and tag image
          make docker.build

          # Save image to cache
          docker save $ECR_NAME:$COMMIT | gzip > /tmp/fetcher-image.tar.gz
          echo "image=$ECR_NAME:$COMMIT" >> $GITHUB_OUTPUT

      - name: Cache Docker image
        uses: actions/cache@v4
        with:
          path: /tmp/fetcher-image.tar.gz
          key: fetcher-image-${{ github.sha }}

  playwright-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [nextjs-web, main-api, fetcher]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          ssh-key: ${{ secrets.PULL_KEY_REPO }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Setup pnpm
        run: |
          corepack enable
          corepack prepare pnpm@10.15.0 --activate

      - name: Install dependencies
        run: pnpm i

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium

      - name: Restore web image cache
        uses: actions/cache@v4
        with:
          path: /tmp/web-image.tar.gz
          key: web-image-${{ github.sha }}
          fail-on-cache-miss: true

      - name: Restore main-api image cache
        uses: actions/cache@v4
        with:
          path: /tmp/main-api-image.tar.gz
          key: main-api-image-${{ github.sha }}
          fail-on-cache-miss: true

      - name: Restore fetcher image cache
        uses: actions/cache@v4
        with:
          path: /tmp/fetcher-image.tar.gz
          key: fetcher-image-${{ github.sha }}
          fail-on-cache-miss: true

      - name: Load Docker images
        run: |
          # Load images from cache
          docker load < /tmp/web-image.tar.gz
          docker load < /tmp/main-api-image.tar.gz
          docker load < /tmp/fetcher-image.tar.gz

          # Verify images are loaded
          docker images

      # - name: Setup SSH session with tmate
      #   uses: mxschmitt/action-tmate@v3
      #   env:
      #     COMMIT: pr-${{ github.sha }}
      #   with:
      #     limit-access-to-actor: true

      - name: Setup test environment
        env:
          COMMIT: pr-${{ github.sha }}
        run: |
          docker-compose --profile testing up -d

      - name: Wait for services to be ready
        run: |
          # Check service health with retry loop and timeout
          echo "Waiting for services to be ready..."

          # Wait for Main API (180 second timeout for container startup)
          echo "üîÑ Checking Main API..."
          timeout=180
          interval=10
          elapsed=0
          while [ $elapsed -lt $timeout ]; do
            if curl -f -s http://localhost:3000/version > /dev/null 2>&1; then
              echo "‚úÖ Main API is responding (took ${elapsed}s)"
              break
            fi
            echo "‚è≥ Main API not ready yet... (${elapsed}/${timeout}s)"
            sleep $interval
            elapsed=$((elapsed + interval))
          done

          if [ $elapsed -ge $timeout ]; then
            echo "‚ùå Main API failed to respond with 200 status within ${timeout}s"
            echo "üîç Checking Docker services status:"
            docker-compose -f docker-compose.yaml ps
            echo "üîç Main API logs:"
            docker-compose -f docker-compose.yaml logs main-api-testing --tail=50
            exit 1
          fi

          # Wait for Web frontend (180 second timeout)
          echo "üîÑ Checking Web frontend..."
          elapsed=0
          while [ $elapsed -lt $timeout ]; do
            if curl -f -s http://localhost:8080/api/version > /dev/null 2>&1; then
              echo "‚úÖ Web frontend is responding (took ${elapsed}s)"
              break
            fi
            echo "‚è≥ Web frontend not ready yet... (${elapsed}/${timeout}s)"
            sleep $interval
            elapsed=$((elapsed + interval))
          done

          if [ $elapsed -ge $timeout ]; then
            echo "‚ùå Web frontend failed to respond with 200 status within ${timeout}s"
            echo "üîç Checking Docker services status:"
            docker-compose -f docker-compose.yaml ps
            echo "üîç Web logs:"
            docker-compose -f docker-compose.yaml logs web-testing --tail=50
            exit 1
          fi

          echo "üéâ All services are ready!"

      - name: Run Playwright Tests
        env:
          CI: true
        run: |
          # Create test results directory
          mkdir -p test-results

          # Run Playwright tests
          make test

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-test-results
          path: |
            playwright-report/
          retention-days: 30

      - name: Lookup artifact URL for this run
        id: artifact
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const {owner, repo} = context.repo;
            const run_id = context.runId;
            const artifactName = 'playwright-test-results';

            // Get artifacts produced by this run
            const { data } = await github.rest.actions.listWorkflowRunArtifacts({
              owner, repo, run_id
            });

            const art = data.artifacts.find(a => a.name === artifactName);
            if (!art) {
              core.setFailed(`Artifact "${artifactName}" not found on run ${run_id}`);
              return;
            }

            // UI link (works in browser, no API token / redirect needed)
            const artifactUiUrl = `https://github.com/${owner}/${repo}/actions/runs/${run_id}/artifacts/${art.id}`;

            core.setOutput('artifact_ui_url', artifactUiUrl);
            core.setOutput('artifact_id', String(art.id));

      - name: Comment PR with test report link
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const artifactUrl = `${{ steps.artifact.outputs.artifact_ui_url }}`;
            const runUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;

            const comment = `## üé≠ Playwright Test Results

            **üìä Test Report:**
            - [Download artifact](${artifactUrl})
            - Extract by \`unzip -d playwright-report playwright-report.zip\`
            - Show report by \`npx playwright show-report\`

            **üìÅ Test Artifacts:**
            - All artifacts: [Run artifacts page](${runUrl}#artifacts)

            **üìã Test Summary:**
            - Workflow: Playwright Tests  
            - Trigger: ${{ github.event_name }}
            - Commit: ${{ github.sha }}
            - Status: ${{ job.status }}

            ---
            *Artifact produced by this workflow run.*`;

            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const existingComment = comments.find(c =>
              c.body.includes('üé≠ Playwright Test Results') && c.user.type === 'Bot'
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
