name: PR Testing

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  CARGO_TERM_COLOR: always

jobs:
  nextjs-web:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ts-packages/web

    steps:
      - uses: actions/checkout@v4

      - name: Build
        env:
          ECR_NAME: ratel.foundation/ratel/web
        run: make docker.build

  test-with-server:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          ssh-key: ${{ secrets.PULL_KEY_REPO }}

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy, rustfmt
          target: wasm32-unknown-unknown
          toolchain: stable
      - name: Install PostgreSQL Client
        run: sudo apt-get install -y postgresql-client

      - name: Initialize Database SQL
        run: |
          psql postgresql://postgres:postgres@localhost:5432/test -f ./deps/rust-sdk/fixtures/sql/init.sql

      - name: test
        env:
          RUSTFLAGS: "-A warnings"
          DATABASE_TYPE: postgres
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
          ENV: "dev"
          DOMAIN: "dev.ratel.foundation"
          OPENAPI_KEY: ${{ secrets.OPENAPI_KEY }}
          AUTH_SECRET_KEY: ${{ secrets.DEV_AUTH_SECRET_KEY }}
          BASE_DOMAIN: "ratel.foundation"
          AUTH_DOMAIN: "ratel.foundation"
          AWS_REGION: ap-northeast-2
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          JWT_SECRET_KEY: ${{ secrets.DEV_JWT_SECRET }}
          SLACK_CHANNEL_SPONSOR: ${{ secrets.DEV_SLACK }}
          US_CONGRESS_KEY: ${{ secrets.US_CONGRESS_KEY }}
          BBS_BLS_X: ${{ secrets.BBS_BLS_X }}
          BBS_BLS_Y: ${{ secrets.BBS_BLS_Y }}
          BBS_BLS_D: ${{ secrets.BBS_BLS_D }}
          BBS_BLS_CRV: ${{ secrets.BBS_BLS_CRV }}
          P256_X: ${{ secrets.P256_X }}
          P256_Y: ${{ secrets.P256_Y }}
          P256_D: ${{ secrets.P256_D }}
          P256_CRV: ${{ secrets.P256_CRV }}

          KAIA_ENDPOINT: https://public-en-kairos.node.kaia.io
          KAIA_FEEPAYER_KEY: ${{ secrets.DEV_KAIA_KEY }}
          KAIA_FEEPAYER_ADDR: ${{ secrets.DEV_KAIA_ADDR }}
          KAIA_OWNER_KEY: ${{ secrets.DEV_KAIA_KEY }}
          KAIA_OWNER_ADDR: ${{ secrets.DEV_KAIA_ADDR }}
        run: |
          cd packages/main-api && make test

  main-api:
    runs-on: ubuntu-22.04

    defaults:
      run:
        working-directory: packages/main-api

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          ssh-key: ${{ secrets.PULL_KEY_REPO }}

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy, rustfmt
          target: wasm32-unknown-unknown
          toolchain: stable

      - uses: cargo-bins/cargo-binstall@main
      - name: Install toml-cli
        run: |
          cargo binstall toml-cli

      - name: Build APIs
        env:
          REGION: ap-northeast-2
          ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          ENV: dev
          SERVICE: main-api
          DOMAIN: api.dev.ratel.foundation
          ECR_NAME: ratel.foundation/ratel/main-api
        run: |
          make docker.build

  fetcher:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          ssh-key: ${{ secrets.PULL_KEY_REPO }}

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy, rustfmt
          target: wasm32-unknown-unknown
          toolchain: stable

      - uses: cargo-bins/cargo-binstall@main
      - name: Install dependencies
        run: |
          cargo binstall toml-cli

      - name: Cache builder
        id: fetcher-build-cache
        uses: actions/cache@v3
        with:
          key: fetcher-build-cache
          path: |
            packages/fetcher/target

      - name: Deploy APIs
        env:
          REGION: ap-northeast-2
          ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          ENV: dev
          RUST_LOG: info
          SERVICE: fetcher
          DOMAIN: fetcher-api.dev.ratel.foundation
          AUTH_DOMAIN: dev.ratel.foundation
          DATABASE_TYPE: postgres
          DATABASE_URL: ${{ secrets.DEV_DATABASE_URL }}
          OPENAPI_KEY: ${{ secrets.OPENAPI_KEY }}
          AUTH_SECRET_KEY: ${{ secrets.DEV_AUTH_SECRET_KEY }}
          JWT_SECRET_KEY: ${{ secrets.DEV_JWT_SECRET_KEY }}
          SERVER_KEY: ${{ secrets.DEV_AUTH_SECRET_KEY }}
          SLACK_CHANNEL_BILL: ${{ secrets.DEV_SLACK }}
          BASE_DOMAIN: ratel.foundation
          REPO_NAME: ratel/fetcher
          ECR_NAME: test-fetcher
          US_CONGRESS_KEY: ${{ secrets.US_CONGRESS_KEY }}
        run: |
          npm i -g aws-cdk
          cd packages/fetcher && make docker.build
