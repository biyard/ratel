name: PR Testing

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [dev]

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  CARGO_TERM_COLOR: always

jobs:
  ratel-storybook:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ts-packages/web

    outputs:
      image: ${{ steps.build.outputs.image }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        run: |
          corepack enable
          corepack prepare pnpm@10.15.0 --activate

      - name: Build and cache Docker image
        id: build
        env:
          ECR_NAME: web
          COMMIT: pr-${{ github.sha }}
        run: |
          pnpm i
          npx storybook build

  ratel-web:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ts-packages/web

    outputs:
      image: ${{ steps.build.outputs.image }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        run: |
          corepack enable
          corepack prepare pnpm@10.15.0 --activate

      - name: Build and cache Docker image
        id: build
        env:
          ECR_NAME: web
          COMMIT: pr-${{ github.sha }}
        run: |
          # Build and tag image
          make build

  main-api-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy, rustfmt
          toolchain: stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Setup test environment
        env:
          COMMIT: pr-${{ github.sha }}
        run: |
          mkdir -p .build
          docker-compose --profile infra up -d

      - name: Setup pnpm
        run: |
          corepack enable
          corepack prepare pnpm@10.15.0 --activate

      - name: Cache builder
        id: main-api-test-build-cache
        uses: actions/cache@v4
        with:
          key: main-api-test-build-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            main-api-test-build-
          path: |
            packages/main-api/target

      - name: Run Rust tests
        env:
          DYNAMO_TABLE_PREFIX: ratel-local
          ENV: test
          RUST_FLAG: "--features no-secret"
          RUSTFLAGS: "-A warnings"
          RUST_LOG: info
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ratel
          DYNAMO_ENDPOINT: http://localhost:4566
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_REGION: us-east-1
          MIGRATE: true
          WEB_BUILD: false
        run: |
          make .build/evm-keys
          cd packages/main-api
          make dist
          make test

  main-api-clean-build:
    runs-on: ubuntu-22.04

    defaults:
      run:
        working-directory: packages/main-api

    outputs:
      image: ${{ steps.build.outputs.image }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          ssh-key: ${{ secrets.PULL_KEY_REPO }}

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy, rustfmt
          target: wasm32-unknown-unknown
          toolchain: stable

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - uses: cargo-bins/cargo-binstall@main
      - name: Install toml-cli
        run: |
          cargo binstall toml-cli

      - name: Setup pnpm
        run: |
          corepack enable
          corepack prepare pnpm@10.15.0 --activate

      - name: Cache builder
        id: main-api-clean-build-cache
        uses: actions/cache@v4
        with:
          key: main-api-clean-build-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            main-api-clean-build-
          path: |
            packages/main-api/target

      - name: Build and cache Docker image
        id: build
        env:
          AWS_REGION: ap-northeast-2
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          ENV: dev
          SERVICE: main-api
          DOMAIN: api.dev.ratel.foundation
          ECR_NAME: main-api
          MIGRATE: true
          DYNAMO_TABLE_PREFIX: ratel-local
        run: |
          # Build and tag image
          make dist
          make docker.build

  main-api:
    runs-on: ubuntu-22.04

    defaults:
      run:
        working-directory: packages/main-api

    outputs:
      image: ${{ steps.build.outputs.image }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          ssh-key: ${{ secrets.PULL_KEY_REPO }}

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy, rustfmt
          target: wasm32-unknown-unknown
          toolchain: stable

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - uses: cargo-bins/cargo-binstall@main
      - name: Install toml-cli
        run: |
          cargo binstall toml-cli

      - name: Cache builder
        id: main-api-build-cache
        uses: actions/cache@v4
        with:
          key: main-api-build-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            main-api-build-
          path: |
            packages/main-api/target

      - name: Setup pnpm
        run: |
          corepack enable
          corepack prepare pnpm@10.15.0 --activate

      - name: Build and cache Docker image
        id: build
        env:
          AWS_REGION: ap-northeast-2
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          ENV: dev
          SERVICE: main-api
          DOMAIN: api.dev.ratel.foundation
          ECR_NAME: main-api
          COMMIT: pr-${{ github.sha }}
          MIGRATE: true
          RUST_LOG: info
          DYNAMO_TABLE_PREFIX: ratel-local
          RUST_FLAG: "--features bypass,no-secret"
        run: |
          # Build and tag image
          make dist
          make docker.build

          # Save image to cache
          docker save $ECR_NAME:$COMMIT | gzip > /tmp/main-api-image.tar.gz
          echo "image=$ECR_NAME:$COMMIT" >> $GITHUB_OUTPUT

      - name: Cache Docker image
        uses: actions/cache@v4
        with:
          path: /tmp/main-api-image.tar.gz
          key: main-api-image-${{ github.sha }}

  # fetcher:
  #   runs-on: ubuntu-latest

  #   outputs:
  #     image: ${{ steps.build.outputs.image }}

  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         submodules: recursive
  #         ssh-key: ${{ secrets.PULL_KEY_REPO }}

  #     - uses: actions-rust-lang/setup-rust-toolchain@v1
  #       with:
  #         components: clippy, rustfmt
  #         target: wasm32-unknown-unknown
  #         toolchain: stable

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - uses: cargo-bins/cargo-binstall@main
  #     - name: Install dependencies
  #       run: |
  #         cargo binstall toml-cli

  #     - name: Cache builder
  #       id: fetcher-build-cache
  #       uses: actions/cache@v4
  #       with:
  #         key: fetcher-build-${{ hashFiles('Cargo.lock') }}
  #         restore-keys: |
  #           fetcher-build-
  #         path: |
  #           packages/fetcher/target

  #     - name: Build and cache Docker image
  #       id: build
  #       env:
  #         REGION: ap-northeast-2
  #         ACCESS_KEY_ID: test
  #         SECRET_ACCESS_KEY: test
  #         ENV: dev
  #         RUST_LOG: info
  #         SERVICE: fetcher
  #         DOMAIN: fetcher-api.dev.ratel.foundation
  #         AUTH_DOMAIN: dev.ratel.foundation
  #         DATABASE_TYPE: postgres
  #         BASE_DOMAIN: ratel.foundation
  #         REPO_NAME: ratel/fetcher
  #         ECR_NAME: fetcher
  #         COMMIT: pr-${{ github.sha }}
  #         DYNAMO_TABLE_PREFIX: ratel-local
  #       run: |
  #         npm i -g aws-cdk
  #         cd packages/fetcher
  #         # Build and tag image
  #         make docker.build

  #         # Save image to cache
  #         docker save $ECR_NAME:$COMMIT | gzip > /tmp/fetcher-image.tar.gz
  #         echo "image=$ECR_NAME:$COMMIT" >> $GITHUB_OUTPUT

  #     - name: Cache Docker image
  #       uses: actions/cache@v4
  #       with:
  #         path: /tmp/fetcher-image.tar.gz
  #         key: fetcher-image-${{ github.sha }}

  playwright-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [ratel-web, main-api]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          ssh-key: ${{ secrets.PULL_KEY_REPO }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Setup pnpm
        run: |
          corepack enable
          corepack prepare pnpm@10.15.0 --activate

      - name: Install dependencies
        run: pnpm i

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium

      # - name: Restore web image cache
      #   uses: actions/cache@v4
      #   with:
      #     path: /tmp/web-image.tar.gz
      #     key: web-image-${{ github.sha }}
      #     fail-on-cache-miss: true

      - name: Restore main-api image cache
        uses: actions/cache@v4
        with:
          path: /tmp/main-api-image.tar.gz
          key: main-api-image-${{ github.sha }}
          fail-on-cache-miss: true

      # - name: Restore fetcher image cache
      #   uses: actions/cache@v4
      #   with:
      #     path: /tmp/fetcher-image.tar.gz
      #     key: fetcher-image-${{ github.sha }}
      #     fail-on-cache-miss: true

      - name: Load Docker images
        run: |
          # Load images from cache
          # docker load < /tmp/web-image.tar.gz
          docker load < /tmp/main-api-image.tar.gz
          # docker load < /tmp/fetcher-image.tar.gz

          # Verify images are loaded
          docker images

      # - name: Setup SSH session with tmate
      #   uses: mxschmitt/action-tmate@v3
      #   env:
      #     COMMIT: pr-${{ github.sha }}
      #   with:
      #     limit-access-to-actor: true

      - name: Setup test environment
        env:
          COMMIT: pr-${{ github.sha }}
        run: |
          docker-compose --profile testing up -d

      - name: Wait for services to be ready
        run: |
          # Check service health with retry loop and timeout
          echo "Waiting for services to be ready..."

          # Wait for Main API (180 second timeout for container startup)
          echo "🔄 Checking Main API..."
          timeout=180
          interval=10
          elapsed=0
          while [ $elapsed -lt $timeout ]; do
            if curl -f -s http://localhost:3000/version > /dev/null 2>&1; then
              echo "✅ Main API is responding (took ${elapsed}s)"
              break
            fi
            echo "⏳ Main API not ready yet... (${elapsed}/${timeout}s)"
            sleep $interval
            elapsed=$((elapsed + interval))
          done

          if [ $elapsed -ge $timeout ]; then
            echo "❌ Main API failed to respond with 200 status within ${timeout}s"
            echo "🔍 Checking Docker services status:"
            docker-compose -f docker-compose.yaml ps
            echo "🔍 Main API logs:"
            docker-compose -f docker-compose.yaml logs main-api-testing --tail=50
            exit 1
          fi

          # Wait for Web frontend (180 second timeout)
          # echo "🔄 Checking Web frontend..."
          # elapsed=0
          # while [ $elapsed -lt $timeout ]; do
          #   if curl -f -s http://localhost:8080/api/version > /dev/null 2>&1; then
          #     echo "✅ Web frontend is responding (took ${elapsed}s)"
          #     break
          #   fi
          #   echo "⏳ Web frontend not ready yet... (${elapsed}/${timeout}s)"
          #   sleep $interval
          #   elapsed=$((elapsed + interval))
          # done

          echo "🎉 All services are ready!"

      - name: Run Playwright Tests
        env:
          CI: true
          RATEL_TEST_PLAYWRIGHT_URL: http://localhost:3000
        run: |
          cd ts-packages/web
          make test

      - name: Move Playwright Tests
        if: always()
        run: |
          mv ts-packages/web/playwright-report ./

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-test-results
          path: |
            playwright-report/
          retention-days: 30
