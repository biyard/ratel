name: PR Testing

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  CARGO_TERM_COLOR: always

jobs:
  nextjs-web:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ts-packages/web

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
          run_install: true

      - name: Run ESLint
        run: pnpm lint

      - name: Build
        run: make build

  test-with-server:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          ssh-key: ${{ secrets.PULL_KEY_REPO }}

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy, rustfmt
          target: wasm32-unknown-unknown
          toolchain: stable
      - name: Install PostgreSQL Client
        run: sudo apt-get install -y postgresql-client

      - name: Initialize Database SQL
        run: |
          psql postgresql://postgres:postgres@localhost:5432/test -f ./deps/rust-sdk/fixtures/sql/init.sql

      - name: test
        env:
          RUSTFLAGS: "-A warnings"
          DATABASE_TYPE: postgres
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
          ENV: "dev"
          DOMAIN: "dev.ratel.foundation"
          OPENAPI_KEY: ${{ secrets.OPENAPI_KEY }}
          AUTH_SECRET_KEY: ${{ secrets.DEV_AUTH_SECRET_KEY }}
          BASE_DOMAIN: "ratel.foundation"
          AUTH_DOMAIN: "ratel.foundation"
          AWS_REGION: ap-northeast-2
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          JWT_SECRET_KEY: ${{ secrets.DEV_JWT_SECRET }}
          SLACK_CHANNEL_SPONSOR: ${{ secrets.DEV_SLACK }}
          US_CONGRESS_KEY: ${{ secrets.US_CONGRESS_KEY }}

          KAIA_FEEPAYER_KEY: "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
          KAIA_FEEPAYER_ADDR: "0x742d35Cc6634C0532925a3b8D72C1a6C4A2c4c8f"
          KAIA_OWNER_KEY: "fedcba9876543210fedcba9876543210fedcba9876543210fedcba9876543210"
          KAIA_OWNER_ADDR: "0x8ba1f109551bD432803012645Hac136c1c5c45e3"
          KAIA_ENDPOINT: https://public-en.node.kaia.io
        run: |
          cd packages/main-api  && make test

  main-api:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          ssh-key: ${{ secrets.PULL_KEY_REPO }}

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy, rustfmt
          target: wasm32-unknown-unknown
          toolchain: stable

      - uses: cargo-bins/cargo-binstall@main
      - name: Install toml-cli
        run: |
          cargo binstall toml-cli

      - name: Build APIs
        env:
          REGION: ap-northeast-2
          ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          ENV: dev
          SERVICE: main-api
          DOMAIN: api.dev.ratel.foundation
        run: |
          make build

  fetcher:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          ssh-key: ${{ secrets.PULL_KEY_REPO }}

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy, rustfmt
          target: wasm32-unknown-unknown
          toolchain: stable

      - uses: cargo-bins/cargo-binstall@main
      - name: Install dependencies
        run: |
          cargo binstall toml-cli

      - name: Cache builder
        id: fetcher-build-cache
        uses: actions/cache@v3
        with:
          key: fetcher-build-cache
          path: |
            packages/fetcher/target

      - name: Deploy APIs
        env:
          REGION: ap-northeast-2
          ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          ENV: dev
          RUST_LOG: info
          SERVICE: fetcher
          DOMAIN: fetcher-api.dev.ratel.foundation
          AUTH_DOMAIN: dev.ratel.foundation
          DATABASE_TYPE: postgres
          DATABASE_URL: ${{ secrets.DEV_DATABASE_URL }}
          OPENAPI_KEY: ${{ secrets.OPENAPI_KEY }}
          AUTH_SECRET_KEY: ${{ secrets.DEV_AUTH_SECRET_KEY }}
          JWT_SECRET_KEY: ${{ secrets.DEV_JWT_SECRET_KEY }}
          SERVER_KEY: ${{ secrets.DEV_AUTH_SECRET_KEY }}
          SLACK_CHANNEL_BILL: ${{ secrets.DEV_SLACK }}
          BASE_DOMAIN: ratel.foundation
          REPO_NAME: ratel/fetcher
          ECR_NAME: test-fetcher
          US_CONGRESS_KEY: ${{ secrets.US_CONGRESS_KEY }}
        run: |
          npm i -g aws-cdk
          cd packages/fetcher && make docker.build
