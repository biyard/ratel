name: Dev deploy

on:
  push:
    branches:
      - dev

env:
  CARGO_TERM_COLOR: always

jobs:
  deploy:
    runs-on: ubuntu-latest
    needs: [main-api, nextjs-web, telegram-bot, fetcher]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          ssh-key: ${{ secrets.PULL_KEY_REPO }}
      - name: Download Next.js CDK .next
        uses: actions/download-artifact@v4
        with:
          name: nextjs-web-cdk-next-${{ github.sha }}
          path: ./
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      # - name: Setup SSH session with tmate
      #   uses: mxschmitt/action-tmate@v3
      #   with:
      #     limit-access-to-actor: true
      - name: Deploy
        env:
          REGION: ap-northeast-2
          ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PGHOST_EU: ${{ secrets.DEV_PGHOST_EU }}
          PGHOST_US: ${{ secrets.DEV_PGHOST_US }}
          PGHOST_AP: ${{ secrets.DEV_PGHOST_AP }}
        run: |
          npm i -g aws-cdk
          tar xzvf next.tar.gz
          make cdk/public
          make cdk-deploy-v2

  test-with-server:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          ssh-key: ${{ secrets.PULL_KEY_REPO }}
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy, rustfmt
          target: wasm32-unknown-unknown
          toolchain: stable
      - name: Install PostgreSQL Client
        run: sudo apt-get install -y postgresql-client
      - name: Initialize Database SQL
        run: |
          psql postgresql://postgres:postgres@localhost:5432/test -f ./deps/rust-sdk/fixtures/sql/init.sql
      - name: test
        env:
          RUSTFLAGS: "-A warnings"
          DATABASE_TYPE: postgres
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
          ENV: "dev"
          DOMAIN: "dev.ratel.foundation"
          OPENAPI_KEY: ${{ secrets.OPENAPI_KEY }}
          AUTH_SECRET_KEY: ${{ secrets.DEV_AUTH_SECRET_KEY }}
          BASE_DOMAIN: "ratel.foundation"
          AUTH_DOMAIN: "ratel.foundation"
          AWS_REGION: ap-northeast-2
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          JWT_SECRET_KEY: ${{ secrets.DEV_JWT_SECRET }}
          US_CONGRESS_KEY: ${{ secrets.US_CONGRESS_KEY }}
          KAIA_ENDPOINT: https://public-en-kairos.node.kaia.io
          KAIA_FEEPAYER_KEY: ${{ secrets.DEV_KAIA_KEY }}
          KAIA_FEEPAYER_ADDR: ${{ secrets.DEV_KAIA_ADDR }}
          KAIA_OWNER_KEY: ${{ secrets.DEV_KAIA_KEY }}
          KAIA_OWNER_ADDR: ${{ secrets.DEV_KAIA_ADDR }}
          BBS_BLS_X: ${{ secrets.BBS_BLS_X }}
          BBS_BLS_Y: ${{ secrets.BBS_BLS_Y }}
          BBS_BLS_D: ${{ secrets.BBS_BLS_D }}
          BBS_BLS_CRV: ${{ secrets.BBS_BLS_CRV }}
          P256_X: ${{ secrets.P256_X }}
          P256_Y: ${{ secrets.P256_Y }}
          P256_D: ${{ secrets.P256_D }}
          P256_CRV: ${{ secrets.P256_CRV }}
        run: |
          cd packages/main-api && make test

  main-api:
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: packages/main-api

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          ssh-key: ${{ secrets.PULL_KEY_REPO }}
      - name: Cache builder
        id: main-api-build-cache
        uses: actions/cache@v3
        with:
          key: main-api-build-cache
          path: |
            packages/main-api/target
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy, rustfmt
          target: wasm32-unknown-unknown
          toolchain: stable
      - uses: cargo-bins/cargo-binstall@main
      - name: Install toml-cli
        run: |
          cargo binstall toml-cli --force
      - name: Deploy APIs
        env:
          REGION: ap-northeast-2
          ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          ENV: dev
          RUST_LOG: debug
          SERVICE: main-api
          DOMAIN: api.dev.ratel.foundation
          AUTH_DOMAIN: dev.ratel.foundation
          DATABASE_TYPE: postgres
          DATABASE_URL: ${{ secrets.DEV_DATABASE_URL }}
          OPENAPI_KEY: ${{ secrets.OPENAPI_KEY }}
          AUTH_SECRET_KEY: ${{ secrets.DEV_AUTH_SECRET_KEY }}
          JWT_SECRET_KEY: ${{ secrets.DEV_JWT_SECRET_KEY }}
          BASE_DOMAIN: ratel.foundation
          MIGRATE: false
          ENABLE_S3: false
          ENABLE_LAMBDA: true
          SLACK_CHANNEL_SPONSOR: ${{ secrets.DEV_SLACK }}
          US_CONGRESS_KEY: ${{ secrets.US_CONGRESS_KEY }}
          SLACK_CHANNEL_ABUSING: ${{ secrets.DEV_SLACK }}
          KAIA_ENDPOINT: https://public-en-kairos.node.kaia.io
          KAIA_FEEPAYER_KEY: ${{ secrets.DEV_KAIA_KEY }}
          KAIA_FEEPAYER_ADDR: ${{ secrets.DEV_KAIA_ADDR }}
          KAIA_OWNER_KEY: ${{ secrets.DEV_KAIA_KEY }}
          KAIA_OWNER_ADDR: ${{ secrets.DEV_KAIA_ADDR }}
          RDS_RESOURCE_ARN: ${{ secrets.RDS_RESOURCE_ARN }}
          RDS_SECRET_ARN: ${{ secrets.RDS_SECRET_ARN }}
          NONCELAB_TOKEN: ${{ secrets.NONCELAB_TOKEN }}
          BBS_BLS_X: ${{ secrets.BBS_BLS_X }}
          BBS_BLS_Y: ${{ secrets.BBS_BLS_Y }}
          BBS_BLS_D: ${{ secrets.BBS_BLS_D }}
          BBS_BLS_CRV: ${{ secrets.BBS_BLS_CRV }}
          P256_X: ${{ secrets.P256_X }}
          P256_Y: ${{ secrets.P256_Y }}
          P256_D: ${{ secrets.P256_D }}
          P256_CRV: ${{ secrets.P256_CRV }}
          
          TELEGRAM_TOKEN: ${{ secrets.DEV_TELEGRAM_TOKEN }}
          TELEGRAM_BOT_URL: https://telegram-bot.dev.ratel.foundation
        run: |
          make docker.build
          make docker.login
          make docker.push

  image-worker:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          ssh-key: ${{ secrets.PULL_KEY_REPO }}
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy, rustfmt
          target: wasm32-unknown-unknown
          toolchain: stable
      - uses: cargo-bins/cargo-binstall@main
      - name: Install toml-cli
        run: |
          cargo binstall toml-cli --force
      - name: Cache builder
        id: image-worker-build-cache
        uses: actions/cache@v3
        with:
          key: image-worker-build-cache
          path: |
            packages/image-worker/target
      - name: Deploy APIs
        env:
          REGION: ap-northeast-2
          STACK: ratel-image-worker-dev-stack
          ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          ENV: dev
          RUST_LOG: debug
          SERVICE: image-worker
          DATABASE_TYPE: postgres
          DATABASE_URL: ${{ secrets.DEV_DATABASE_URL }}
          BASE_DOMAIN: ratel.foundation
          MIGRATE: false
          ENABLE_S3: false
          ENABLE_LAMBDA: false
          ENABLE_SQS_WORKER: true
          ENABLE_CDN: false
        run: |
          npm i -g aws-cdk
          make deploy

  telegram-bot:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: packages/telegram-bot

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          ssh-key: ${{ secrets.PULL_KEY_REPO }}
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy, rustfmt
          target: wasm32-unknown-unknown
          toolchain: stable
      - uses: cargo-bins/cargo-binstall@main
      - name: Install dependencies
        run: |
          cargo binstall toml-cli
      - name: Cache builder
        id: telegram-bot-build-cache
        uses: actions/cache@v3
        with:
          key: telegram-bot-build-cache
          path: |
            packages/telegram-bot/target
      - name: Deploy APIs
        env:
          REGION: ap-northeast-2
          STACK: ratel-telegram-bot-dev-stack
          ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          ENV: dev
          RUST_LOG: info
          SERVICE: telegram-bot
          DOMAIN: telegram-bot.dev.ratel.foundation
          DATABASE_TYPE: postgres
          DATABASE_URL: ${{ secrets.DEV_DATABASE_URL }}
          TELEGRAM_TOKEN: ${{ secrets.DEV_TELEGRAM_TOKEN }}
          TELEGRAM_MINI_APP_URI: https://t.me/crypto_ratel_dev_bot
          BASE_DOMAIN: ratel.foundation
          REPO_NAME: ratel/telegram-bot
          MIGRATE: false
          ENABLE_S3: false
          ENABLE_FARGATE: true
          ENABLE_LAMBDA: false
        run: |
          make docker.build
          make docker.login
          make docker.push

  fetcher:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: packages/fetcher
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          ssh-key: ${{ secrets.PULL_KEY_REPO }}
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy, rustfmt
          target: wasm32-unknown-unknown
          toolchain: stable
      - uses: cargo-bins/cargo-binstall@main
      - name: Install dependencies
        run: |
          cargo binstall toml-cli
      - name: Cache builder
        id: fetcher-build-cache
        uses: actions/cache@v3
        with:
          key: fetcher-build-cache
          path: |
            packages/fetcher/target
      - name: Deploy APIs
        env:
          REGION: ap-northeast-2
          STACK: ratel-fetcher-dev-stack
          ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          ENV: dev
          RUST_LOG: info
          SERVICE: fetcher
          DOMAIN: fetcher-api.dev.ratel.foundation
          AUTH_DOMAIN: dev.ratel.foundation
          DATABASE_TYPE: postgres
          DATABASE_URL: ${{ secrets.DEV_DATABASE_URL }}
          OPENAPI_KEY: ${{ secrets.OPENAPI_KEY }}
          AUTH_SECRET_KEY: ${{ secrets.DEV_AUTH_SECRET_KEY }}
          JWT_SECRET_KEY: ${{ secrets.DEV_JWT_SECRET_KEY }}
          SERVER_KEY: ${{ secrets.DEV_AUTH_SECRET_KEY }}
          SLACK_CHANNEL_BILL: ${{ secrets.DEV_SLACK }}
          BASE_DOMAIN: ratel.foundation
          REPO_NAME: ratel/fetcher
          US_CONGRESS_KEY: ${{ secrets.US_CONGRESS_KEY }}
          RPC_ENDPOINT: https://public-en-kairos.node.kaia.io
          MIGRATE: false
          ENABLE_S3: false
          ENABLE_FARGATE: true
          ENABLE_LAMBDA: false
        run: |
          make docker.build
          make docker.login
          make docker.push

  nextjs-web:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ts-packages/web
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      - name: Build
        env:
          REGION: ap-northeast-2
          NEXT_PUBLIC_LOG_LEVEL: debug
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET:  ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID:  ${{ secrets.FIREBASE_MEASUREMENT_ID }}

          NEXT_PUBLIC_ENV: dev
          NEXT_PUBLIC_SIGN_DOMAIN: dev.ratel.foundation
          NEXT_PUBLIC_API_URL: https://api.dev.ratel.foundation
          NEXT_PUBLIC_EXPERIMENT: true
          NEXT_PUBLIC_GRAPHQL_URL: https://graphql.dev.ratel.foundation/v1/graphql

        run: |
            make docker.build
            make docker.login
            make docker.push
            cd ../..
            make cdk/.next
            tar czvf next.tar.gz cdk/.next

      - name: Upload Next.js CDK .next
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-web-cdk-next-${{ github.sha }}
          path: ${{ github.workspace }}/next.tar.gz
          if-no-files-found: error
          retention-days: 7

  android-apk:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: flutter-packages/mobile
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          ssh-key: ${{ secrets.PULL_KEY_REPO }}
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true
      - name: Flutter pub get
        run: flutter pub get
      - name: Prepare Android signing (real or placeholder)
        working-directory: flutter-packages/mobile
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p android/app
          if [[ -n "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" ]]; then
            echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android/app/keystore.jks
            printf "%s\n" \
              "storeFile=app/keystore.jks" \
              "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" \
              "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" \
              "keyPassword=${{ secrets.ANDROID_KEY_ALIAS_PASSWORD }}" \
              > android/key.properties
          else
            keytool -genkey -v \
              -keystore android/app/debug-placeholder.keystore \
              -storepass android -keypass android \
              -alias androiddebugkey -keyalg RSA -keysize 2048 -validity 10000 \
              -dname "CN=Android,O=Android,C=US"
            printf "%s\n" \
              "storeFile=app/debug-placeholder.keystore" \
              "storePassword=android" \
              "keyAlias=androiddebugkey" \
              "keyPassword=android" \
              > android/key.properties
          fi
      - name: Build APK (debug)
        run: |
          make ENV=dev build-config
          flutter build apk --debug --dart-define-from-file=.build/config.json
      - name: Package single APK (zip)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p .build
          APK=$(ls -t build/app/outputs/flutter-apk/*.apk | head -n 1)
          ZIP=".build/$(basename "${APK%.apk}").zip"
          zip -j "$ZIP" "$APK"
          echo "APK_ZIP=$PWD/$ZIP" >> $GITHUB_ENV
          ls -lh "$APK" "$ZIP"
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: mobile-apk-${{ github.sha }}
          path: ${{ env.APK_ZIP }}
          if-no-files-found: error
          retention-days: 30

  ios-testflight:
    runs-on: macos-14
    permissions:
      contents: read
    defaults:
      run:
        working-directory: flutter-packages/mobile
    env:
      MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      ASC_KEY_ID: ${{ secrets.ASC_KEY_ID }}
      ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
      APP_IDENTIFIER: foundation.ratel.app
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          ssh-key: ${{ secrets.PULL_KEY_REPO }}

      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.2"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Setup Ruby (bundler)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"
          bundler-cache: true
          working-directory: flutter-packages/mobile/ios

      - name: Flutter pub get
        run: flutter pub get

      - name: Generate iOS Release configs (Flutter)
        run: |
          rm -f ios/Flutter/Generated.xcconfig
          ENV=dev make build.ios

      - name: Patch CocoaPods base config include
        run: |
          grep -q 'Pods-Runner\.release' ios/Flutter/Release.xcconfig || echo '#include "../Pods/Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig"' >> ios/Flutter/Release.xcconfig
          grep -q 'Pods-Runner\.profile' ios/Flutter/Profile.xcconfig || echo '#include "../Pods/Target Support Files/Pods-Runner/Pods-Runner.profile.xcconfig"' >> ios/Flutter/Profile.xcconfig

      - name: Pod install
        working-directory: flutter-packages/mobile/ios
        run: pod install --repo-update

      - name: Write App Store Connect API key
        working-directory: flutter-packages/mobile/ios
        env:
          ASC_KEY_BASE64: ${{ secrets.ASC_KEY_BASE64 }}
          ASC_KEY_ID: ${{ secrets.ASC_KEY_ID }}
        run: |
          mkdir -p fastlane
          echo "$ASC_KEY_BASE64" | base64 -d > fastlane/AuthKey_${ASC_KEY_ID}.p8
          chmod 600 fastlane/AuthKey_${ASC_KEY_ID}.p8

      - name: Setup SSH for match repo
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.MATCH_SSH_KEY }}

      - name: Trust github.com host keys
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Create and unlock temporary keychain
        run: |
          set -euo pipefail
          KEYCHAIN_LABEL="ci-temp"
          KEYCHAIN_PASSWORD="password"
          KEYCHAIN_PATH="$HOME/Library/Keychains/${KEYCHAIN_LABEL}.keychain-db"
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security list-keychains -d user -s "$KEYCHAIN_PATH" "$HOME/Library/Keychains/login.keychain-db"
          security default-keychain -s "$KEYCHAIN_PATH"
          echo "MATCH_KEYCHAIN_NAME=$KEYCHAIN_LABEL" >> $GITHUB_ENV
          echo "MATCH_KEYCHAIN_PASSWORD=$KEYCHAIN_PASSWORD" >> $GITHUB_ENV

      - name: Install signing with match (readonly)
        working-directory: flutter-packages/mobile/ios
        env:
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          bundle exec fastlane match appstore \
            --readonly \
            --git_url "$MATCH_GIT_URL" \
            --app_identifier foundation.ratel.app \
            --team_id "$APPLE_TEAM_ID" \
            --keychain_name "$MATCH_KEYCHAIN_NAME" \
            --keychain_password "$MATCH_KEYCHAIN_PASSWORD"

      - name: Resolve installed provisioning profile name
        shell: bash
        run: |
          set -euo pipefail
          TARGET_BUNDLE_ID="foundation.ratel.app"
          FOUND_NAME=""
          for f in ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision; do
            TMP="$(mktemp)"
            security cms -D -i "$f" > "$TMP" 2>/dev/null || continue
            BID=$(/usr/libexec/PlistBuddy -c 'Print :Entitlements:application-identifier' "$TMP" 2>/dev/null || true)
            NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' "$TMP" 2>/dev/null || true)
            if [[ "${BID#*.}" == "$TARGET_BUNDLE_ID" ]]; then
              FOUND_NAME="$NAME"
              UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' "$TMP" 2>/dev/null || true)
              echo "Resolved provisioning profile: $FOUND_NAME ($UUID)"
              break
            fi
          done
          if [[ -z "$FOUND_NAME" ]]; then
            echo "PROFILE_NAME=match AppStore $TARGET_BUNDLE_ID" >> $GITHUB_ENV
          else
            echo "PROFILE_NAME=$FOUND_NAME" >> $GITHUB_ENV
          fi

      - name: Compute iOS build number
        env:
          IOS_BUILD_BASE: 8
        run: echo "FLUTTER_BUILD_NUMBER=$(( GITHUB_RUN_NUMBER + ${IOS_BUILD_BASE:-0} ))" >> $GITHUB_ENV

      - name: Build and Upload to TestFlight
        working-directory: flutter-packages/mobile/ios
        env:
          ASC_KEY_ID: ${{ secrets.ASC_KEY_ID }}
          ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
          APP_IDENTIFIER: foundation.ratel.app
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          bundle exec fastlane deploy

      - name: Dump xcodebuild log on failure
        if: failure()
        run: |
          LOG_DIR="$HOME/Library/Logs/gym"
          ls -la "$LOG_DIR" || true
          tail -n +200 "$LOG_DIR"/Runner-Runner.log || true

      - name: Upload .ipa artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa-${{ github.sha }}
          path: |
            flutter-packages/mobile/build/ios/**/*.ipa
            flutter-packages/mobile/ios/*.ipa
          if-no-files-found: warn
          retention-days: 14

  create-release-pr:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    needs: [image-worker, android-apk, ios-testflight, deploy]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          ssh-key: ${{ secrets.PULL_KEY_REPO }}
      - name: Git pr release action
        uses: grassedge/git-pr-release-action@v1.0
        with:
          base: stg
          head: dev
          token: ${{ secrets.GITHUB_TOKEN }}
