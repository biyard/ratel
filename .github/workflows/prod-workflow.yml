name: Production deploy

on:
  push:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:
  main-ui:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          ssh-key: ${{ secrets.PULL_KEY_REPO }}

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy, rustfmt
          target: wasm32-unknown-unknown
          toolchain: stable

      - uses: cargo-bins/cargo-binstall@main

      - name: Install dioxus-cli
        run: |
          cargo binstall dioxus-cli --force
          cargo binstall toml-cli --force

      - name: Checking violate
        env:
          REGION: ap-northeast-2
          ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SERVICE: main-ui
        run: |
          dx check -p $SERVICE

      - name: Deploy UI
        env:
          REGION: ap-northeast-2
          ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          FIREBASE_API_KEY: "${{ secrets.FIREBASE_API_KEY }}"
          FIREBASE_AUTH_DOMAIN: "${{ secrets.FIREBASE_AUTH_DOMAIN }}"
          FIREBASE_PROJECT_ID: "${{ secrets.FIREBASE_PROJECT_ID }}"
          FIREBASE_STORAGE_BUCKET: "${{ secrets.FIREBASE_STORAGE_BUCKET }}"
          FIREBASE_MESSAGING_SENDER_ID: "${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}"
          FIREBASE_APP_ID: "${{ secrets.FIREBASE_APP_ID }}"
          FIREBASE_MEASUREMENT_ID: "${{ secrets.FIREBASE_MEASUREMENT_ID }}"
          MAIN_API_ENDPOINT: https://api.ratel.foundation
          ENV: prod
          RUST_LOG: info
          SERVICE: main-ui
          DOMAIN: ratel.foundation
          API_PREFIX: /api
          BASE_DOMAIN: ratel.foundation
          ENABLE_S3: true
          ENABLE_LAMBDA: true
          VERSIONS: v1
          V1_ENDPOINT: api.ratel.foundation
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          US_CONGRESS_KEY: ${{ secrets.US_CONGRESS_KEY }}
        run: |
          npm i -g aws-cdk @tailwindcss/cli
          make deploy-web

  main-api:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          ssh-key: ${{ secrets.PULL_KEY_REPO }}

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy, rustfmt
          target: wasm32-unknown-unknown
          toolchain: stable

      - uses: cargo-bins/cargo-binstall@main
      - name: Install toml-cli
        run: |
          cargo binstall toml-cli --force

      - name: Deploy APIs
        env:
          REGION: ap-northeast-2
          ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          ENV: prod
          RUST_LOG: info
          SERVICE: main-api
          DOMAIN: api.ratel.foundation
          AUTH_DOMAIN: ratel.foundation
          DATABASE_TYPE: postgres
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          OPENAPI_KEY: ${{ secrets.OPENAPI_KEY }}
          AUTH_SECRET_KEY: ${{ secrets.AUTH_SECRET_KEY }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          BASE_DOMAIN: ratel.foundation
          MIGRATE: false
          ENABLE_S3: false
          ENABLE_LAMBDA: true
          BUCKET_NAME: ratel.foundation
          SLACK_CHANNEL_SPONSOR: ${{ secrets.SLACK_CHANNEL_SPONSOR }}
          US_CONGRESS_KEY: ${{ secrets.US_CONGRESS_KEY }}
          SLACK_CHANNEL_ABUSING: ${{ secrets.SLACK_CHANNEL_ABUSING }}
        run: |
          npm i -g aws-cdk
          make deploy

  # mobile-android:
  #   runs-on: ubuntu-22.04

  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         submodules: recursive
  #         ssh-key: ${{ secrets.PULL_KEY_REPO }}

  #     - uses: actions-rust-lang/setup-rust-toolchain@v1
  #       with:
  #         components: clippy, rustfmt
  #         target: wasm32-unknown-unknown
  #         toolchain: stable

  #     - uses: cargo-bins/cargo-binstall@main

  #     - name: Install dioxus-cli
  #       run: |
  #         cargo binstall dioxus-cli --force
  #         cargo binstall toml-cli --force
      
  #     - name: Install Tauri CLI
  #       run: cargo install tauri-cli
      
  #     - name: Decode keystore
  #       run: |
  #         echo "$KEYSTORE_BASE64" | base64 -d > release.keystore
  #       env:
  #         KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          
  #     - name: Create .env for signing
  #       run: |
  #         KEYSTORE_FILE=../../../../../../release.keystore
  #         KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}
  #         KEY_ALIAS=${{ secrets.KEY_ALIAS }}
  #         KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}

  #     - name: Install Fastlane
  #       run: npm install fastlane

  #     - name: Restore service account json
  #       run: |
  #         echo "$GOOGLE_PLAY_JSON" | base64 --decode > packages/mobile/src-tauri/gen/android/ratel-mobile.json
  #       env:
  #         GOOGLE_PLAY_JSON: ${{ secrets.GOOGLE_PLAY_JSON }}

  #     - name: Build & deploy to Play Store via Fastlane
  #       run: |
  #         cd packages/mobile/src-tauri/gen/android
  #         fastlane deploy

  fetcher:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          ssh-key: ${{ secrets.PULL_KEY_REPO }}

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy, rustfmt
          target: wasm32-unknown-unknown
          toolchain: stable

      - name: Install dependencies
        run: |
          cargo install toml-cli

      - name: Cache builder
        id: fetcher-build-cache
        uses: actions/cache@v3
        with:
          key: fetcher-build-cache
          path: |
            packages/fetcher/target

      - name: Deploy APIs
        env:
          REGION: ap-northeast-2
          ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          ENV: prod
          RUST_LOG: info
          SERVICE: fetcher
          DOMAIN: fetcher-api.ratel.foundation
          AUTH_DOMAIN: ratel.foundation
          DATABASE_TYPE: postgres
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          OPENAPI_KEY: ${{ secrets.OPENAPI_KEY }}
          AUTH_SECRET_KEY: ${{ secrets.AUTH_SECRET_KEY }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          SERVER_KEY: ${{ secrets.AUTH_SECRET_KEY }}
          SLACK_CHANNEL_BILL: ${{ secrets.SLACK_CHANNEL_BILL }}
          BASE_DOMAIN: ratel.foundation
          REPO_NAME: ratel/fetcher
          US_CONGRESS_KEY: ${{ secrets.US_CONGRESS_KEY }}

          MIGRATE: false
          ENABLE_S3: false
          ENABLE_FARGATE: true
          ENABLE_LAMBDA: false
        run: |
          npm i -g aws-cdk
          make deploy
