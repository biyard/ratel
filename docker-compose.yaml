services:
  # Database
  postgres:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ratel
    ports:
      - "5432:5432"
    volumes:
      - .build/postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ratel-network

  adminer:
    image: adminer
    restart: always
    ports:
      - 9000:8080

  postgres-init:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ratel
    volumes:
      - ./:/app
    command: psql postgresql://postgres:postgres@postgres:5432/ratel -f /app/scripts/init.sql
    healthcheck:
      test: ["CMD", "test", "-f", "/tmp/init-complete"]
      interval: 5s
      timeout: 3s
      retries: 10
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ratel-network

  # Main API Service
  main-api:
    image: rust:1.89
    restart: always
    ports:
      - "3000:3000"
    environment:
      ENV: dev
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/ratel
      MIGRATE: "true"
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: "aws-access-key-id"
      AWS_SECRET_ACCESS_KEY: "aws-secret-access-key"
    volumes:
      - .:/app
    working_dir: /app
    command: ["bash", "scripts/api-entrypoint.sh"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/version || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      postgres:
        condition: service_healthy
      postgres-init:
        condition: service_completed_successfully
    networks:
      - ratel-network

  # Web Frontend
  web:
    image: node:22.14
    restart: always
    volumes:
      - .:/app
    working_dir: /app
    command: ["bash", "scripts/web-entrypoint.sh"]
    environment:
      PORT: 8080
      API_URL: "http://main-api:3000"
      GRAPHQL_URL: "http://hasura:8080/v1/graphql"
    ports:
      - "8080:8080"
    networks:
      - ratel-network

  # # Hasura GraphQL Engine
  hasura:
    image: hasura/graphql-engine:v2.40.0
    restart: unless-stopped
    ports:
      - "28080:8080"
    environment:
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgres@postgres:5432/ratel
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:postgres@postgres:5432/ratel
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: ratel_admin_secret
      HASURA_GRAPHQL_AUTH_HOOK: http://main-api:3000/v1/auth/hasura
      HASURA_GRAPHQL_AUTH_HOOK_MODE: POST
      HASURA_GRAPHQL_LOG_LEVEL: debug
    depends_on:
      postgres:
        condition: service_healthy
      main-api:
        condition: service_healthy
    networks:
      - ratel-network

  # Hasura table tracker
  hasura-init:
    image: hasura/graphql-engine:v2.40.0
    environment:
      HASURA_GRAPHQL_ENDPOINT: http://hasura:8080
      HASURA_GRAPHQL_ADMIN_SECRET: ratel_admin_secret
    command: >
      sh -c "
        echo 'Waiting for Hasura to be ready...' &&
        until curl -s http://hasura:8080/healthz > /dev/null 2>&1; do
          sleep 2
        done &&
        echo 'Tracking all tables in ratel database...' &&
        curl -X POST http://hasura:8080/v1/metadata \
          -H 'Content-Type: application/json' \
          -H 'X-Hasura-Admin-Secret: ratel_admin_secret' \
          -d '{\"type\": \"pg_track_all_tables\", \"args\": {\"source\": \"default\"}}' &&
        echo 'All tables tracked successfully'
      "
    depends_on:
      hasura:
        condition: service_started
    networks:
      - ratel-network

  # Playwright E2E Testing
  playwright:
    image: mcr.microsoft.com/playwright:v1.49.0-jammy
    working_dir: /app
    volumes:
      - .:/app
      - playwright-cache:/home/pwuser/.cache
    environment:
      CI: "true"
      PLAYWRIGHT_BASE_URL: "http://web:8080"
    command: >
      sh -c "
        echo 'Waiting for web service to be ready...' &&
        until curl -s http://web:8080 > /dev/null 2>&1; do
          sleep 2
        done &&
        echo 'Installing dependencies...' &&
        cd ts-packages/web &&
        npm install &&
        echo 'Running Playwright tests...' &&
        npm run test:e2e
      "
    depends_on:
      web:
        condition: service_started
      main-api:
        condition: service_healthy
    networks:
      - ratel-network
    profiles:
      - testing


  # # Fetcher Service
  # fetcher:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.fetcher
  #   restart: unless-stopped
  #   ports:
  #     - "3001:3000"
  #   environment:
  #     ENV: dev
  #     RUST_LOG: debug
  #     DATABASE_URL: postgres://postgres:postgres@postgres:5432/ratel
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   networks:
  #     - ratel-network

  # # Image Worker Service
  # image-worker:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.image-worker
  #   restart: unless-stopped
  #   environment:
  #     ENV: dev
  #     RUST_LOG: debug
  #     AWS_REGION: us-east-1
  #     # Disable AWS SQS for local development
  #     AWS_ACCESS_KEY_ID: ""
  #     AWS_SECRET_ACCESS_KEY: ""
  #   volumes:
  #     - ./uploads:/app/uploads
  #   networks:
  #     - ratel-network

  # # Telegram Bot Service (optional)
  # telegram-bot:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.telegram-bot
  #   restart: unless-stopped
  #   environment:
  #     ENV: dev
  #     RUST_LOG: debug
  #     TELEGRAM_TOKEN: ${TELEGRAM_TOKEN:-}
  #     DATABASE_URL: postgres://postgres:postgres@postgres:5432/ratel
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   networks:
  #     - ratel-network
  #   profiles:
  #     - telegram


networks:
  ratel-network:
    driver: bridge

volumes:
  playwright-cache:
    driver: local
