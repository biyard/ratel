services:
  # Production main-api (pre-built image)
  main-api-testing:
    image: main-api:${COMMIT}
    restart: always
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD-SHELL", "apt update && apt install curl -y && curl -f http://localhost:3000/version || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 100
    depends_on:
      postgres:
        condition: service_healthy
      postgres-init:
        condition: service_healthy
      localstack:
        condition: service_healthy
      localstack-init:
        condition: service_completed_successfully
    networks:
      - ratel-network
    profiles:
      - testing

  # Development main-api (source code mounting)
  main-api:
    image: rust
    restart: always
    ports:
      - "3000:3000"
    environment:
      ENV: dev
      WEB_BUILD: "true"
      RUST_LOG: ${RUST_LOG:-info}
      RUSTFLAGS: ${RUSTFLAGS:--A warnings}
      RUST_FLAG: ${RUST_FLAG:---features bypass}
      DATABASE_URL: ${DATABASE_URL:-postgres://postgres:postgres@postgres:5432/ratel}
      DYNAMO_ENDPOINT: ${DYNAMO_ENDPOINT:-http://localstack:4566}
      MIGRATE: ${MIGRATE:-true}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-test}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-test}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      TELEGRAM_TOKEN: ${TELEGRAM_TOKEN}
      DYNAMO_TABLE_PREFIX: ${DYNAMO_TABLE_PREFIX:-ratel-local}
      BINANCE_API_KEY: ${BINANCE_API_KEY:-dummy}
      BINANCE_SECRET_KEY: ${BINANCE_SECRET_KEY:-dummy}
      BINANCE_WEBHOOK: ${BINANCE_WEBHOOK:-dummy}
      REDIRECT_DOMAIN: ${REDIRECT_DOMAIN:-http://localhost:3000}

      VITE_API_URL: "http://localhost:3000"
      VITE_LOG_LEVEL: ${VITE_LOG_LEVEL:-debug}
      VITE_FIREBASE_API_KEY: ${VITE_FIREBASE_API_KEY:-dummy}
      VITE_FIREBASE_AUTH_DOMAIN: ${VITE_FIREBASE_AUTH_DOMAIN:-dummy}
      VITE_FIREBASE_PROJECT_ID: ${VITE_FIREBASE_PROJECT_ID:-dummy}
      VITE_FIREBASE_STORAGE_BUCKET: ${VITE_FIREBASE_STORAGE_BUCKET:-dummy}
      VITE_FIREBASE_MESSAGING_SENDER_ID: ${VITE_FIREBASE_MESSAGING_SENDER_ID:-dummy}
      VITE_FIREBASE_APP_ID: ${VITE_FIREBASE_APP_ID:-dummy}
      VITE_FIREBASE_MEASUREMENT_ID: ${VITE_FIREBASE_MEASUREMENT_ID:-dummy}

      API_URL: "http://main-api:3000"

      NODE_ENV: production
    volumes:
      - .:/app
      - ./.build/target:/app/target
      - ./.build/main-api/target:/app/packages/main-api/target
      - ./.build/main-api/web-dist:/app/ts-packages/web/dist
      - ./.build/main-api/dist:/app/packages/main-api/dist
      - ./.build/main-api/node_modules:/app/node_modules
      - ./.build/main-api/web_node_modules:/app/ts-packages/web/node_modules
      - ./.build/main-api/pnpm-store:/app/.pnpm-store

    working_dir: /app
    command: ["bash", "scripts/api-entrypoint.sh"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/version || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 100
    depends_on:
      # postgres:
      #   condition: service_healthy
      # postgres-init:
      #   condition: service_healthy
      localstack:
        condition: service_healthy
      localstack-init:
        condition: service_completed_successfully
    networks:
      - ratel-network
    profiles:
      - development

  # fetcher-testing:
  #   image: fetcher:${COMMIT}
  #   restart: always
  #   ports:
  #     - "3001:3001"
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl -f http://localhost:3001/version || exit 1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 100
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     postgres-init:
  #       condition: service_healthy
  #   networks:
  #     - ratel-network
  #   profiles:
  #     - testing

  # Development fetcher (source code mounting)
  fetcher:
    image: rust
    restart: always
    ports:
      - "3001:3001"
    volumes:
      - .:/app
      # - ./.build/target:/app/target
      - ./.build/fetcher/target:/app/packages/fetcher/target
    working_dir: /app
    environment:
      ENV: dev
      RUST_LOG: debug
      PORT: 3001
      DATABASE_URL: ${DATABASE_URL:-postgres://postgres:postgres@postgres:5432/ratel}
      TELEGRAM_TOKEN: ${TELEGRAM_TOKEN}
      DYNAMO_TABLE_PREFIX: ratel-local
    command: ["bash", "scripts/fetcher-entrypoint.sh"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/version || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 100
    # depends_on:
    #   postgres:
    #     condition: service_healthy
    #   postgres-init:
    #     condition: service_healthy
    networks:
      - ratel-network
    profiles:
      - development

  # Production web (pre-built image)
  # web-testing:
  #   image: web:${COMMIT}
  #   restart: always
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     PORT: 8080
  #     API_URL: "http://main-api-testing:3000"
  #     NODE_ENV: test
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl -f http://localhost:8080/api/version || exit 1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 100
  #   depends_on:
  #     main-api-testing:
  #       condition: service_healthy
  #   networks:
  #     - ratel-network
  #   profiles:
  #     - testing

  # Development web (source code mounting)
  web:
    image: node:22.14
    restart: always
    ports:
      - "8080:8080"
    volumes:
      - ./.build/web/node_modules:/app/node_modules
      - ./.build/web/web_node_modules:/app/ts-packages/web/node_modules
      - ./.build/web/pnpm-store:/app/.pnpm-store
      - .:/app
    working_dir: /app
    environment:
      PORT: 8080
      VITE_API_URL: "http://localhost:3000"
      VITE_LOG_LEVEL: ${VITE_LOG_LEVEL:-debug}
      VITE_FIREBASE_API_KEY: ${VITE_FIREBASE_API_KEY:-dummy}
      VITE_FIREBASE_AUTH_DOMAIN: ${VITE_FIREBASE_AUTH_DOMAIN:-dummy}
      VITE_FIREBASE_PROJECT_ID: ${VITE_FIREBASE_PROJECT_ID:-dummy}
      VITE_FIREBASE_STORAGE_BUCKET: ${VITE_FIREBASE_STORAGE_BUCKET:-dummy}
      VITE_FIREBASE_MESSAGING_SENDER_ID: ${VITE_FIREBASE_MESSAGING_SENDER_ID:-dummy}
      VITE_FIREBASE_APP_ID: ${VITE_FIREBASE_APP_ID:-dummy}
      VITE_FIREBASE_MEASUREMENT_ID: ${VITE_FIREBASE_MEASUREMENT_ID:-dummy}

      API_URL: "http://main-api:3000"

      NODE_ENV: development
    command: ["bash", "scripts/web-entrypoint.sh"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/api/version || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 100
    # depends_on:
    #   main-api:
    #     condition: service_healthy
    networks:
      - ratel-network
    profiles:
      - development

  # Database
  postgres:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ratel
    volumes:
      - .build/postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ratel-network
    profiles:
      - testing
      - infra

  postgres-init:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      PGPASSWORD: postgres
    volumes:
      - ./scripts:/scripts
    # Command will be overridden in specific compose files
    healthcheck:
      test: ["CMD", "test", "-f", "/tmp/init-complete"]
      interval: 5s
      timeout: 3s
      retries: 10
    command: >
      sh -c "
        echo 'Waiting for PostgreSQL to be ready...' &&
        until pg_isready -h postgres -U postgres; do
          sleep 2
        done &&
        echo 'Creating ratel database...' &&
        psql -h postgres -U postgres -d postgres -c 'CREATE DATABASE ratel;' || echo 'Database might already exist' &&
        echo 'Running init.sql...' &&
        psql -h postgres -U postgres -d ratel -f /scripts/init.sql &&
        echo 'Database initialization completed' &&
        touch /tmp/init-complete &&
        sleep infinity
      "
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ratel-network
    profiles:
      - testing
      - infra

  localstack:
    hostname: localstack
    image: localstack/localstack
    restart: always
    ports:
      - "4566:4566"
    environment:
      PERSISTENCE: ${LOCALSTACK_PERSISTENCE:-1}
      SERVICES: dynamodb,s3,sqs
      DYNAMODB_SHARE_DB: 1
      SQS_ENDPOINT_STRATEGY: "off"
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-test}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-test}
      AWS_DEFAULT_REGION: ${AWS_REGION:-us-east-1}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - ./.build/localstack-data:/var/lib/localstack
    networks:
      - ratel-network
    profiles:
      - testing
      - development
      - infra

  # DynamoDB initialization
  localstack-init:
    image: amazonlinux:2023
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-test}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-test}
      AWS_DEFAULT_REGION: ${AWS_REGION:-us-east-1}
      LOCALSTACK_ENDPOINT: http://localstack:4566
    volumes:
      - ./scripts:/scripts
    networks:
      - ratel-network
    command: ["bash", "/scripts/localstack-init-entrypoint.sh"]
    depends_on:
      localstack:
        condition: service_healthy
    profiles:
      - testing
      - development
      - infra

  dynamodb-admin:
    image: aaronshaf/dynamodb-admin:latest
    restart: always
    ports:
      - "8081:8001"
    environment:
      DYNAMO_ENDPOINT: http://localstack:4566
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-test}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-test}
      AWS_DEFAULT_REGION: ${AWS_REGION:-us-east-1}
    depends_on:
      - localstack-init
    profiles:
      - development
      - infra
    networks:
      - ratel-network

networks:
  ratel-network:
    driver: bridge
